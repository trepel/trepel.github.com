{"commit":{"parents":[{"id":"b69e3d6fed9b0d03877d0224c3991a297feae70b"}],"message":"[ARQ-448] Added admin login credentials for GlassFish Remote 3.1","tree":"f116246de18910a645796ba0043691787e8441e2","modified":[{"filename":"glassfish-remote-3.1/pom.xml","diff":"@@ -81,16 +81,9 @@\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>\n-                <version>2.5</version>\n                 <configuration>\n                     <!-- enable tests when GlassFish is setup on Hudson server -->\n                     <skip>true</skip>\n-                    <includes>\n-                        <include>**/*TestSuite.java</include>\n-                    </includes>\n-                    <systemPropertyVariables>\n-                        <glassfish.install.dir>${env.GLASSFISH_HOME}</glassfish.install.dir>\n-                    </systemPropertyVariables>\n                 </configuration>\n             </plugin>\n         </plugins>"},{"filename":"glassfish-remote-3.1/src/main/java/org/jboss/arquillian/container/glassfish/remote_3_1/GlassFishRestConfiguration.java","diff":"@@ -14,7 +14,6 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n /**\n  *\n  * @author <a href=\"http://community.jboss.org/people/LightGuard\">Jason Porter</a>\n@@ -23,104 +22,129 @@\n \n import org.jboss.arquillian.container.spi.ConfigurationException;\n import org.jboss.arquillian.container.spi.client.container.ContainerConfiguration;\n-import org.jboss.arquillian.test.spi.ContainerProfile;\n-\n-public class GlassFishRestConfiguration implements ContainerConfiguration\n-{\n-   /**\n-    * Glassfish Admin Console port.\n-    * Used to build the URL for the REST request.\n-    */\n-   private int remoteServerAdminPort = 4848;\n-\n-   /**\n-    * Glassfish address.\n-    * Used to build the URL for the REST request.\n-    */\n-   private String remoteServerAddress = \"localhost\";\n-\n-   /**\n-    * Flag indicating the administration url uses a secure connection.\n-    * Used to build the URL for the REST request.\n-    */\n-   private boolean remoteServerAdminHttps = false;\n-\n-   /**\n-    * Flag indicating application urls use secure connections.\n-    * Used to build the URL for the REST request.\n-    */\n-   private boolean remoteServerHttps = false;\n-\n-   /**\n-    * Http port for application urls.\n-    * Used to build the URL for the REST request.\n-    */\n-   private int remoteServerHttpPort = 8080;\n-\n-   /**\n-    * Type of container this is.\n-    * @return CLIENT\n-    */\n-   public ContainerProfile getContainerProfile()\n-   {\n-      return ContainerProfile.CLIENT;\n-   }\n-\n-   public String getRemoteServerAddress()\n-   {\n-      return remoteServerAddress;\n-   }\n-\n-   public void setRemoteServerAddress(String remoteServerAddress)\n-   {\n-      this.remoteServerAddress = remoteServerAddress;\n-   }\n-\n-   public int getRemoteServerAdminPort()\n-   {\n-      return remoteServerAdminPort;\n-   }\n-\n-   public void setRemoteServerAdminPort(int remoteServerAdminPort)\n-   {\n-      this.remoteServerAdminPort = remoteServerAdminPort;\n-   }\n-\n-   public boolean isRemoteServerAdminHttps()\n-   {\n-      return remoteServerAdminHttps;\n-   }\n-\n-   public void setRemoteServerAdminHttps(boolean remoteServerAdminHttps)\n-   {\n-      this.remoteServerAdminHttps = remoteServerAdminHttps;\n-   }\n-\n-   public int getRemoteServerHttpPort()\n-   {\n-      return remoteServerHttpPort;\n-   }\n-\n-   public void setRemoteServerHttpPort(int remoteServerHttpPort)\n-   {\n-      this.remoteServerHttpPort = remoteServerHttpPort;\n-   }\n-\n-   public boolean isRemoteServerHttps()\n-   {\n-      return remoteServerHttps;\n-   }\n-\n-   public void setRemoteServerHttps(boolean remoteServerHttps)\n-   {\n-      this.remoteServerHttps = remoteServerHttps;\n-   }\n+import org.jboss.arquillian.container.spi.client.deployment.Validate;\n+\n+public class GlassFishRestConfiguration implements ContainerConfiguration {\n+\n+    /**\n+     * Glassfish Admin Console port.\n+     * Used to build the URL for the REST request.\n+     */\n+    private int remoteServerAdminPort = 4848;\n+    \n+    /**\n+     * Glassfish address.\n+     * Used to build the URL for the REST request.\n+     */\n+    private String remoteServerAddress = \"localhost\";\n+    \n+    /**\n+     * Flag indicating the administration url uses a secure connection.\n+     * Used to build the URL for the REST request.\n+     */\n+    private boolean remoteServerAdminHttps = false;\n+    \n+    /**\n+     * Flag indicating application urls use secure connections.\n+     * Used to build the URL for the REST request.\n+     */\n+    private boolean remoteServerHttps = false;\n+    \n+    /**\n+     * Http port for application urls.\n+     * Used to build the URL for the REST request.\n+     */\n+    private int remoteServerHttpPort = 8080;\n+    \n+    /**\n+     * Flag indicating the remote server requires an admin user and password. \n+     */\n+    private boolean remoteServerAuthorisation = false;\n+    \n+    /**\n+     * Authorised admin user in the remote glassfish admin realm\n+     */\n+    private String remoteServerAdminUser;\n+\n+    /**\n+     * Authorised admin user password\n+     */\n+    private String remoteServerAdminPassword;\n+\n+    public String getRemoteServerAddress() {\n+        return remoteServerAddress;\n+    }\n+\n+    public void setRemoteServerAddress(String remoteServerAddress) {\n+        this.remoteServerAddress = remoteServerAddress;\n+    }\n+\n+    public int getRemoteServerAdminPort() {\n+        return remoteServerAdminPort;\n+    }\n+\n+    public void setRemoteServerAdminPort(int remoteServerAdminPort) {\n+        this.remoteServerAdminPort = remoteServerAdminPort;\n+    }\n+\n+    public boolean isRemoteServerAdminHttps() {\n+        return remoteServerAdminHttps;\n+    }\n+\n+    public void setRemoteServerAdminHttps(boolean remoteServerAdminHttps) {\n+        this.remoteServerAdminHttps = remoteServerAdminHttps;\n+    }\n+\n+    public int getRemoteServerHttpPort() {\n+        return remoteServerHttpPort;\n+    }\n+\n+    public void setRemoteServerHttpPort(int remoteServerHttpPort) {\n+        this.remoteServerHttpPort = remoteServerHttpPort;\n+    }\n+\n+    public boolean isRemoteServerHttps() {\n+        return remoteServerHttps;\n+    }\n+\n+    public void setRemoteServerHttps(boolean remoteServerHttps) {\n+        this.remoteServerHttps = remoteServerHttps;\n+    }\n+\n+    public boolean isRemoteServerAuthorisation() {\n+        return remoteServerAuthorisation;\n+    }\n+\n+    public void setRemoteServerAuthorisation(boolean remoteServerAuthorisation) {\n+        this.remoteServerAuthorisation = remoteServerAuthorisation;\n+    }\n+\n+    public String getRemoteServerAdminUser() {\n+        return remoteServerAdminUser;\n+    }\n+\n+    public void setRemoteServerAdminUser(String remoteServerAdminUser) {\n+        this.setRemoteServerAuthorisation(true);\n+        this.remoteServerAdminUser = remoteServerAdminUser;\n+    }\n+\n+    public String getRemoteServerAdminPassword() {\n+        return remoteServerAdminPassword;\n+    }\n+\n+    public void setRemoteServerAdminPassword(String remoteServerAdminPassword) {\n+        this.remoteServerAdminPassword = remoteServerAdminPassword;\n+    }\n \n     /**\n      * Validates if current configuration is valid, that is if all required\n      * properties are set and have correct values\n      */\n     public void validate() throws ConfigurationException {\n-        //To change body of implemented methods use File | Settings | File Templates.\n+       if(isRemoteServerAuthorisation())\n+       {\n+          Validate.notNull(getRemoteServerAdminUser(), \"remoteServerAdminUser must be specified to use remoteServerAuthorisation\");\n+          Validate.notNull(getRemoteServerAdminPassword(), \"remoteServerAdminPassword must be specified to use remoteServerAuthorisation\");\n+       }\n     }\n }"},{"filename":"glassfish-remote-3.1/src/main/java/org/jboss/arquillian/container/glassfish/remote_3_1/GlassFishRestDeployableContainer.java","diff":"@@ -14,7 +14,6 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n /**\n  *\n  * @author <a href=\"http://community.jboss.org/people/LightGuard\">Jason Porter</a>\n@@ -46,6 +45,7 @@\n \n import com.sun.jersey.api.client.Client;\n import com.sun.jersey.api.client.WebResource;\n+import com.sun.jersey.api.client.filter.HTTPBasicAuthFilter;\n import com.sun.jersey.multipart.FormDataMultiPart;\n import com.sun.jersey.multipart.file.FileDataBodyPart;\n \n@@ -56,18 +56,13 @@\n  */\n @SuppressWarnings({\"HardcodedFileSeparator\"})\n public class GlassFishRestDeployableContainer implements DeployableContainer<GlassFishRestConfiguration> {\n-    private static final String APPLICATION = \"/applications/application\";\n \n+    private static final String APPLICATION = \"/applications/application\";\n     private static final String LIST_SUB_COMPONENTS = \"/applications/application/list-sub-components?id=\";\n-\n     private static final String SUCCESS = \"SUCCESS\";\n-\n     private String adminBaseUrl;\n-\n     private String applicationBaseUrl;\n-\n     private String deploymentName;\n-\n     private GlassFishRestConfiguration configuration;\n \n     public Class<GlassFishRestConfiguration> getConfigurationClass() {\n@@ -90,7 +85,7 @@ public void setup(GlassFishRestConfiguration configuration) {\n         }\n \n         adminUrlBuilder.append(this.configuration.getRemoteServerAddress()).append(\":\")\n-                .append(this.configuration.getRemoteServerAdminPort()).append(\"/management/domain\");\n+                       .append(this.configuration.getRemoteServerAdminPort()).append(\"/management/domain\");\n \n         this.adminBaseUrl = adminUrlBuilder.toString();\n \n@@ -103,7 +98,7 @@ public void setup(GlassFishRestConfiguration configuration) {\n         }\n \n         applicationUrlBuilder.append(this.configuration.getRemoteServerAddress()).append(\":\")\n-                .append(this.configuration.getRemoteServerHttpPort()).append(\"/\");\n+                             .append(this.configuration.getRemoteServerHttpPort()).append(\"/\");\n \n         this.applicationBaseUrl = applicationUrlBuilder.toString();\n     }\n@@ -121,7 +116,7 @@ public void start() throws LifecycleException {\n     }\n \n     public void stop() throws LifecycleException {\n-        //To change body of implemented methods use File | Settings | File Templates.\n+       // NO-OP\n     }\n \n     public ProtocolDescription getDefaultProtocol() {\n@@ -152,8 +147,7 @@ public ProtocolMetaData deploy(Archive<?> archive) throws DeploymentException {\n             form.field(\"contextroot\", archiveName.substring(0, archiveName.lastIndexOf(\".\")), MediaType.TEXT_PLAIN_TYPE);\n             deploymentName = archiveName.substring(0, archiveName.lastIndexOf(\".\"));\n             form.field(\"name\", deploymentName, MediaType.TEXT_PLAIN_TYPE);\n-            final String xmlResponse = prepareClient(APPLICATION).type(MediaType.MULTIPART_FORM_DATA_TYPE)\n-                    .post(String.class, form);\n+            final String xmlResponse = prepareClient(APPLICATION).type(MediaType.MULTIPART_FORM_DATA_TYPE).post(String.class, form);\n \n             try {\n                 if (!isCallSuccessful(xmlResponse)) {\n@@ -209,6 +203,11 @@ public void undeploy(Descriptor descriptor) throws DeploymentException {\n      */\n     private WebResource.Builder prepareClient(String additionalResourceUrl) {\n         final Client client = Client.create();\n+        if (configuration.isRemoteServerAuthorisation()) {\n+            client.addFilter(new HTTPBasicAuthFilter(\n+                    configuration.getRemoteServerAdminUser(),\n+                    configuration.getRemoteServerAdminPassword()));\n+        }\n         return client.resource(this.adminBaseUrl + additionalResourceUrl).accept(MediaType.APPLICATION_XML_TYPE);\n     }\n \n@@ -258,4 +257,4 @@ private ProtocolMetaData parseForProtocolMetaData(String xmlResponse) throws XPa\n         protocolMetaData.addContext(httpContext);\n         return protocolMetaData;\n     }\n-}\n+}\n\\ No newline at end of file"},{"filename":"glassfish-remote-3.1/src/test/resources/arquillian.xml","diff":"@@ -1,8 +1,30 @@\n <?xml version=\"1.0\"?>\n <arquillian xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-\txsi:schemaLocation=\"http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian-1.0.xsd\">\n+    xsi:schemaLocation=\"http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian-1.0.xsd\">\n+\n+    <!-- Uncomment to have test archives exported to the file system for inspection -->\n+    <!-- \n+    <engine> \n+        <property name=\"deploymentExportPath\">target/</property> \n+    </engine> \n+    -->\n+\n+    <container qualifier=\"glassfish\" default=\"true\">\n+        <configuration>\n+            <property name=\"remoteServerAddress\">localhost</property>\n+            <property name=\"remoteServerHttpPort\">8080</property>\n+            <property name=\"remoteServerAdminPort\">4848</property>\n+        </configuration>\n+    </container>\n+\n+    <container qualifier=\"glassfish-auth\">\n+        <configuration>\n+            <property name=\"remoteServerAddress\">localhost</property>\n+            <property name=\"remoteServerHttpPort\">8080</property>\n+            <property name=\"remoteServerAdminPort\">4848</property>\n+            <property name=\"remoteServerAdminUser\">admin</property>\n+            <property name=\"remoteServerAdminPassword\">admin</property>\n+        </configuration>\n+    </container>\n \n-\t<engine>\n-\t\t<property name=\"deploymentExportPath\">target/</property>\n-\t</engine>\n </arquillian>\n\\ No newline at end of file"}],"committer":{"email":"aslak@redhat.com","login":"aslakknutsen","name":"Aslak Knutsen"},"authored_date":"2011-05-26T07:55:21-07:00","url":"/arquillian/arquillian-container-glassfish/commit/905c91ae4766307131b79e03ac3cc87a5b031b0e","committed_date":"2011-05-29T04:58:27-07:00","id":"905c91ae4766307131b79e03ac3cc87a5b031b0e","author":{"email":"magnus.smith@gmail.com","login":"MagnusSmith","name":"Magnus"}}}