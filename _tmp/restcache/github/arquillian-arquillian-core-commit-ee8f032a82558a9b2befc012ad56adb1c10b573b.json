{"commit":{"tree":"8b5709aad0ade3cc6c91203483ecd8dacf0ec8ea","parents":[{"id":"a68916c9baf5eafb74225aad968f4ae9c82275fb"}],"authored_date":"2012-06-14T00:14:40-07:00","id":"ee8f032a82558a9b2befc012ad56adb1c10b573b","added":["container/test-api/src/main/java/org/jboss/arquillian/container/test/api/Testable.java"],"url":"/arquillian/arquillian-core/commit/ee8f032a82558a9b2befc012ad56adb1c10b573b","committer":{"email":"aslak@redhat.com","name":"Aslak Knutsen","login":"aslakknutsen"},"committed_date":"2012-07-23T10:21:14-07:00","message":"ARQ-1035 Add support for marking the test module in a multi module deployment\n\nAdd support for having multiple wars in one ear when using the servlet 2.5/3.0 protocol.\n\nAPI:\n\n    return ShrinkWrap.create(EnterpriseArchive.class)\n        .addAsModule(Testable.archiveToTest(\n            ShrinkWrap.create(WebArchive.class)))\n\nThe Protocol can use the TestDeployment to resolve the marked archive.\n\nSPI:\n\n    testDeployment.getArchiveForEnrichment()","author":{"email":"Robert.Panzer.PB@googlemail.com","name":"Robert.Panzer","login":"robertpanzer"},"modified":[{"filename":"container/test-api/pom.xml","diff":"@@ -1,5 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n \n     <!-- Parent -->\n     <parent>\n@@ -30,6 +31,10 @@\n     <dependencies>\n \n         <!-- org.jboss.arquillian -->\n+        <dependency>\n+            <groupId>org.jboss.shrinkwrap</groupId>\n+            <artifactId>shrinkwrap-api</artifactId>\n+        </dependency>\n \n         <dependency>\n             <groupId>junit</groupId>"},{"filename":"container/test-spi/pom.xml","diff":"@@ -1,5 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n \n     <!-- Parent -->\n     <parent>\n@@ -49,6 +50,11 @@\n             <scope>test</scope>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.jboss.arquillian.container</groupId>\n+            <artifactId>arquillian-container-test-api</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n     </dependencies>\n </project>\n "},{"filename":"container/test-spi/src/main/java/org/jboss/arquillian/container/test/spi/TestDeployment.java","diff":"@@ -17,11 +17,17 @@\n package org.jboss.arquillian.container.test.spi;\n \n import java.util.Collection;\n+import java.util.Map;\n \n import org.jboss.arquillian.container.spi.client.deployment.DeploymentDescription;\n import org.jboss.arquillian.container.spi.client.deployment.TargetDescription;\n import org.jboss.arquillian.container.spi.client.protocol.ProtocolDescription;\n+import org.jboss.arquillian.container.test.api.Testable;\n import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ArchivePath;\n+import org.jboss.shrinkwrap.api.Filters;\n+import org.jboss.shrinkwrap.api.GenericArchive;\n+import org.jboss.shrinkwrap.api.Node;\n \n /**\n  * Value object that contains the {@link Archive}s needed for deployment. <br/>\n@@ -34,9 +40,13 @@\n public class TestDeployment\n {\n    private DeploymentDescription deploymentDescription;\n+\n    private Archive<?> applicationArchive;\n+\n    private Collection<Archive<?>> auxiliaryArchives;\n-   \n+\n+   private Archive<?> archiveForEnrichment;\n+\n    /**\n     * @param applicationArchive The user defined {@link Archive}\n     * @param auxiliaryArchives All extra library {@link Archive}s defined by extensions / core / frameworks.\n@@ -54,13 +64,14 @@ public TestDeployment(Archive<?> applicationArchive, Collection<Archive<?>> auxi\n     * @param auxiliaryArchives All extra library {@link Archive}s defined by extensions / core / frameworks.\n     *\n     */\n-   public TestDeployment(DeploymentDescription deploymentDescription, Archive<?> applicationArchive, Collection<Archive<?>> auxiliaryArchives)\n+   public TestDeployment(DeploymentDescription deploymentDescription, Archive<?> applicationArchive,\n+         Collection<Archive<?>> auxiliaryArchives)\n    {\n-      if(applicationArchive == null)\n+      if (applicationArchive == null)\n       {\n          throw new IllegalArgumentException(\"ApplicationArchive must be specified\");\n       }\n-      if(auxiliaryArchives == null)\n+      if (auxiliaryArchives == null)\n       {\n          throw new IllegalArgumentException(\"AuxiliaryArchives must be specified\");\n       }\n@@ -72,27 +83,58 @@ public TestDeployment(DeploymentDescription deploymentDescription, Archive<?> ap\n \n    public TargetDescription getTargetDescription()\n    {\n-      return deploymentDescription == null ? null:deploymentDescription.getTarget();\n+      return deploymentDescription == null ? null : deploymentDescription.getTarget();\n    }\n \n    public ProtocolDescription getProtocolDescription()\n    {\n-      return deploymentDescription == null ? null:deploymentDescription.getProtocol();\n+      return deploymentDescription == null ? null : deploymentDescription.getProtocol();\n    }\n \n    public String getDeploymentName()\n    {\n-      return deploymentDescription == null ? null:deploymentDescription.getName();\n+      return deploymentDescription == null ? null : deploymentDescription.getName();\n    }\n \n    /**\n     * Convenience method to lookup the user tagged archive for enriching.\n     * @return The tagged Archive or ApplicationArchive if none are tagged\n     */\n-   public Archive<?> getArchiveForEnrichment() \n+   public Archive<?> getArchiveForEnrichment()\n    {\n-      // TODO: lookup 'tagged' archive. return applicationArchive if none found\n-      return applicationArchive;\n+      if (archiveForEnrichment == null)\n+      {\n+         // TODO: Extend to EJBs once they are supported\n+         Map<ArchivePath, Node> nested = applicationArchive.getContent(Filters.include(\".*\\\\.war\"));\n+         if (!nested.isEmpty())\n+         {\n+            for (ArchivePath path : nested.keySet())\n+            {\n+               try\n+               {\n+                  GenericArchive genericArchive = applicationArchive.getAsType(GenericArchive.class, path);\n+                  if (Testable.isArchiveToTest(genericArchive))\n+                  {\n+                     if (archiveForEnrichment != null)\n+                     {\n+                        throw new UnsupportedOperationException(\"Multiple marked Archives found in \"\n+                              + applicationArchive.getName() + \". Can not determine which to enrich\");\n+                     }\n+                     archiveForEnrichment = genericArchive;\n+                  }\n+               }\n+               catch (IllegalArgumentException e)\n+               {\n+                  // no-op, Nested archive is not a ShrinkWrap archive.\n+               }\n+            }\n+         }\n+      }\n+      else\n+      {\n+         archiveForEnrichment = applicationArchive;\n+      }\n+      return archiveForEnrichment;\n    }\n \n    public Archive<?> getApplicationArchive()"},{"filename":"protocols/servlet/src/main/java/org/jboss/arquillian/protocol/servlet/v_2_5/ServletProtocolDeploymentPackager.java","diff":"@@ -64,7 +64,7 @@\n       \n       if(EnterpriseArchive.class.isInstance(applicationArchive))\n       {\n-         return handleArchive(EnterpriseArchive.class.cast(applicationArchive), auxiliaryArchives, protocol, processor);\n+         return handleArchive(EnterpriseArchive.class.cast(applicationArchive), auxiliaryArchives, protocol, processor, testDeployment);\n       } \n \n       if(WebArchive.class.isInstance(applicationArchive))\n@@ -115,10 +115,11 @@\n                .addAsModule(applicationArchive), \n             auxiliaryArchives, \n             protocol,\n-            processor);\n+            processor,\n+            null);\n    }\n \n-   private Archive<?> handleArchive(EnterpriseArchive applicationArchive, Collection<Archive<?>> auxiliaryArchives, WebArchive protocol, Processor processor) \n+   private Archive<?> handleArchive(EnterpriseArchive applicationArchive, Collection<Archive<?>> auxiliaryArchives, WebArchive protocol, Processor processor, TestDeployment testDeployment) \n    {\n       Map<ArchivePath, Node> applicationArchiveWars = applicationArchive.getContent(Filters.include(\".*\\\\.war\"));\n       if(applicationArchiveWars.size() == 1)\n@@ -139,8 +140,19 @@\n       }\n       else if(applicationArchiveWars.size() > 1)\n       {\n-         // TODO: fetch the TestDeployment.getArchiveForEnrichment\n-         throw new UnsupportedOperationException(\"Multiple WebArchives found in \" + applicationArchive.getName() + \". Can not determine which to enrich\");\n+          Archive<?> archiveToTest = testDeployment.getArchiveForEnrichment();\n+          if (archiveToTest == null) {\n+              throw new UnsupportedOperationException(\"Multiple WebArchives found in \" + applicationArchive.getName() + \". Can not determine which to enrich\");\n+          } else if (!archiveToTest.getName().endsWith(\".war\")) {\n+              //TODO: Removed throwing an exception when EJB modules are supported as well\n+              throw new UnsupportedOperationException(\"Archive to test is not a WebArchive!\");\n+          } else {\n+              handleArchive(\n+                      archiveToTest.as(WebArchive.class),\n+                      new ArrayList<Archive<?>>(), // reuse the War handling, but Auxiliary Archives should be added to the EAR, not the WAR\n+                      protocol,\n+                      processor);\n+          }\n       }\n       else\n       {"},{"filename":"protocols/servlet/src/main/java/org/jboss/arquillian/protocol/servlet/v_3/ServletProtocolDeploymentPackager.java","diff":"@@ -62,7 +62,7 @@\n       \n       if(EnterpriseArchive.class.isInstance(applicationArchive))\n       {\n-         return handleArchive(EnterpriseArchive.class.cast(applicationArchive), auxiliaryArchives, protocol, processor);\n+         return handleArchive(EnterpriseArchive.class.cast(applicationArchive), auxiliaryArchives, protocol, processor, testDeployment);\n       } \n \n       if(WebArchive.class.isInstance(applicationArchive))\n@@ -104,7 +104,7 @@\n             processor);\n    }\n \n-   private Archive<?> handleArchive(EnterpriseArchive applicationArchive, Collection<Archive<?>> auxiliaryArchives, JavaArchive protocol, Processor processor) \n+   private Archive<?> handleArchive(EnterpriseArchive applicationArchive, Collection<Archive<?>> auxiliaryArchives, JavaArchive protocol, Processor processor, TestDeployment testDeployment) \n    {\n       Map<ArchivePath, Node> applicationArchiveWars = applicationArchive.getContent(Filters.include(\".*\\\\.war\"));\n       if(applicationArchiveWars.size() == 1)\n@@ -125,8 +125,19 @@\n       }\n       else if(applicationArchiveWars.size() > 1)\n       {\n-         // TODO: fetch the TestDeployment.getArchiveForEnrichment\n-         throw new UnsupportedOperationException(\"Multiple WebArchives found in \" + applicationArchive.getName() + \". Can not determine which to enrich\");\n+          Archive<?> archiveToTest = testDeployment.getArchiveForEnrichment();\n+          if (archiveToTest == null) {\n+              throw new UnsupportedOperationException(\"Multiple WebArchives found in \" + applicationArchive.getName() + \". Can not determine which to enrich\");\n+          } else if (!archiveToTest.getName().endsWith(\".war\")) {\n+              //TODO: Removed throwing an exception when EJB modules are supported as well\n+              throw new UnsupportedOperationException(\"Archive to test is not a WebArchive!\");\n+          } else {\n+              handleArchive(\n+                      archiveToTest.as(WebArchive.class),\n+                      new ArrayList<Archive<?>>(), // reuse the War handling, but Auxiliary Archives should be added to the EAR, not the WAR\n+                      protocol,\n+                      processor);\n+          }\n       }\n       else\n       {"},{"filename":"protocols/servlet/src/test/java/org/jboss/arquillian/protocol/servlet/v_2_5/ServletProtocolDeploymentPackagerTestCase.java","diff":"@@ -20,6 +20,7 @@\n import java.util.Collection;\n import java.util.List;\n \n+import org.jboss.arquillian.container.test.api.Testable;\n import org.jboss.arquillian.container.test.spi.TestDeployment;\n import org.jboss.arquillian.container.test.spi.client.deployment.ProtocolArchiveProcessor;\n import org.jboss.arquillian.protocol.servlet.ServletMethodExecutor;\n@@ -246,7 +247,7 @@ public void shouldThrowExceptionOnUnknownArchiveType() throws Exception\n             processors()\n       );\n    }\n-   \n+\n    @Test(expected = UnsupportedOperationException.class)\n    public void shouldThrowExceptionOnEnterpriseArchiveWithMultipleWebArchive() throws Exception\n    {\n@@ -258,7 +259,56 @@ public void shouldThrowExceptionOnEnterpriseArchiveWithMultipleWebArchive() thro\n                   createAuxiliaryArchives()),\n             processors());\n    }\n-   \n+\n+   @Test\n+   public void shouldHandleEnterpriseArchiveWithMultipleWebArchiveAndOneMarkedWebArchive() throws Exception\n+   {\n+       WebArchive testableArchive = Testable.archiveToTest(ShrinkWrap.create(WebArchive.class));\n+\n+       Archive<?> archive = new ServletProtocolDeploymentPackager().generateDeployment(\n+               new TestDeployment(\n+                       ShrinkWrap.create(EnterpriseArchive.class, \"applicationArchive.ear\")\n+                       .addAsModule(testableArchive)\n+                       .addAsModule(ShrinkWrap.create(WebArchive.class)),\n+                       createAuxiliaryArchives()),\n+                       processors());\n+\n+       Assert.assertFalse(\n+               \"Verify that the auxiliaryArchives was not added\",\n+               archive.contains(ArchivePaths.create(\"arquillian-protocol.war\")));\n+\n+       Assert.assertTrue(\n+               \"Verify that the auxiliaryArchives are placed in /lib\",\n+               archive.contains(ArchivePaths.create(\"/lib/auxiliaryArchive1.jar\")));\n+\n+       Assert.assertTrue(\n+               \"Verify that the auxiliaryArchives are placed in /lib\",\n+               archive.contains(ArchivePaths.create(\"/lib/auxiliaryArchive2.jar\")));\n+\n+\n+       String webXmlContent = TestUtil.convertToString(testableArchive.get(\"WEB-INF/web.xml\").getAsset().openStream());\n+       Assert.assertTrue(\n+             \"verify that the ServletTestRunner servlet was added to the web.xml of the existing web archive\",\n+             webXmlContent.contains(ServletTestRunner.class.getName()));\n+\n+       Assert.assertTrue(\n+               \"Verify protocol Processor SPI was called\",\n+               DummyProcessor.wasCalled);\n+\n+   }\n+\n+   @Test(expected = UnsupportedOperationException.class)\n+   public void shouldThrowExceptionOnEnterpriseArchiveWithMultipleMarkedWebArchives() throws Exception\n+   {\n+       new ServletProtocolDeploymentPackager().generateDeployment(\n+               new TestDeployment(\n+                       ShrinkWrap.create(EnterpriseArchive.class, \"applicationArchive.ear\")\n+                       .addAsModule(Testable.archiveToTest(ShrinkWrap.create(WebArchive.class)))\n+                       .addAsModule(Testable.archiveToTest(ShrinkWrap.create(WebArchive.class))),\n+                       createAuxiliaryArchives()),\n+                       processors());\n+   }\n+\n    private Collection<Archive<?>> createAuxiliaryArchives() \n    {\n       List<Archive<?>> archives = new ArrayList<Archive<?>>();"},{"filename":"protocols/servlet/src/test/java/org/jboss/arquillian/protocol/servlet/v_3/ServletProtocolDeploymentPackagerTestCase.java","diff":"@@ -20,6 +20,7 @@\n import java.util.Collection;\n import java.util.List;\n \n+import org.jboss.arquillian.container.test.api.Testable;\n import org.jboss.arquillian.container.test.spi.TestDeployment;\n import org.jboss.arquillian.container.test.spi.client.deployment.ProtocolArchiveProcessor;\n import org.jboss.arquillian.protocol.servlet.TestUtil;\n@@ -204,7 +205,6 @@ public void shouldHandleEnterpriseArchiveWithWebArchive() throws Exception\n             DummyProcessor.wasCalled);\n    }\n \n-\n    @Test(expected = IllegalArgumentException.class)\n    public void shouldThrowExceptionOnUnknownArchiveType() throws Exception\n    {\n@@ -213,7 +213,7 @@ public void shouldThrowExceptionOnUnknownArchiveType() throws Exception\n             processors()\n       );\n    }\n-   \n+\n    @Test(expected = UnsupportedOperationException.class)\n    public void shouldThrowExceptionOnEnterpriseArchiveWithMultipleWebArchive() throws Exception\n    {\n@@ -226,6 +226,55 @@ public void shouldThrowExceptionOnEnterpriseArchiveWithMultipleWebArchive() thro\n             processors());\n    }\n \n+   @Test\n+   public void shouldHandleEnterpriseArchiveWithMultipleWebArchiveAndOneMarkedWebArchive() throws Exception\n+   {\n+       WebArchive testableArchive = Testable.archiveToTest(ShrinkWrap.create(WebArchive.class));\n+\n+       Archive<?> archive = new ServletProtocolDeploymentPackager().generateDeployment(\n+               new TestDeployment(\n+                       ShrinkWrap.create(EnterpriseArchive.class, \"applicationArchive.ear\")\n+                       .addAsModule(testableArchive)\n+                       .addAsModule(ShrinkWrap.create(WebArchive.class)),\n+                       createAuxiliaryArchives()),\n+                       processors());\n+\n+       Assert.assertFalse(\n+               \"Verify that the auxiliaryArchives was not added\",\n+               archive.contains(ArchivePaths.create(\"arquillian-protocol.war\")));\n+\n+       Assert.assertTrue(\n+               \"Verify that the auxiliaryArchives are placed in /lib\",\n+               archive.contains(ArchivePaths.create(\"/lib/auxiliaryArchive1.jar\")));\n+\n+       Assert.assertTrue(\n+               \"Verify that the auxiliaryArchives are placed in /lib\",\n+               archive.contains(ArchivePaths.create(\"/lib/auxiliaryArchive2.jar\")));\n+\n+\n+       String webXmlContent = TestUtil.convertToString(testableArchive.get(\"WEB-INF/lib/arquillian-protocol.jar/META-INF/web-fragment.xml\").getAsset().openStream());\n+       Assert.assertTrue(\n+               \"verify that the ServletTestRunner servlet was added to the web.xml of the existing web archive\",\n+               webXmlContent.contains(ServletTestRunner.class.getName()));\n+\n+       Assert.assertTrue(\n+               \"Verify protocol Processor SPI was called\",\n+               DummyProcessor.wasCalled);\n+\n+   }\n+\n+   @Test(expected = UnsupportedOperationException.class)\n+   public void shouldThrowExceptionOnEnterpriseArchiveWithMultipleMarkedWebArchives() throws Exception\n+   {\n+       new ServletProtocolDeploymentPackager().generateDeployment(\n+               new TestDeployment(\n+                       ShrinkWrap.create(EnterpriseArchive.class, \"applicationArchive.ear\")\n+                       .addAsModule(Testable.archiveToTest(ShrinkWrap.create(WebArchive.class)))\n+                       .addAsModule(Testable.archiveToTest(ShrinkWrap.create(WebArchive.class))),\n+                       createAuxiliaryArchives()),\n+                       processors());\n+   }\n+\n    private Collection<Archive<?>> createAuxiliaryArchives() \n    {\n       List<Archive<?>> archives = new ArrayList<Archive<?>>();"}]}}