{"commit":{"parents":[{"id":"c2f826f1ac52d83da68eb6cc5520d7c30de11c44"}],"added":["openwebbeans-embedded-1/src/test/java/org/jboss/arquillian/container/openwebbeans/embedded_1/OpenWebBeansWarIntegrationTestCase.java"],"message":"ARQ-403 Fix openwebbeans-arquillian integration for WAR archives.","tree":"d16f4bda440af66ebe90bd347dacb5df8a1a655f","modified":[{"filename":"openwebbeans-embedded-1/pom.xml","diff":"@@ -15,7 +15,7 @@\n     <description>OpenWebBeans 1.x Embedded Container integration for the Arquillian Project</description>\n \n     <properties>\n-        <version.openwebbeans>1.0.0</version.openwebbeans>\n+        <version.openwebbeans>1.1.1</version.openwebbeans>\n     </properties>\n \n     <dependencyManagement>"},{"filename":"openwebbeans-embedded-1/src/main/java/org/jboss/arquillian/container/openwebbeans/embedded_1/ShrinkWrapMetaDataDiscovery.java","diff":"@@ -28,6 +28,9 @@\n import org.jboss.shrinkwrap.api.ArchivePath;\n import org.jboss.shrinkwrap.api.Filters;\n import org.jboss.shrinkwrap.api.Node;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.jboss.shrinkwrap.impl.base.asset.ArchiveAsset;\n \n /**\n  * A ScannerService implementation that processes a ShrinkWrap bean archive\n@@ -41,67 +44,148 @@\n  * processed as managed bean classes.</p>\n  *\n  * @author <a href=\"mailto:dan.allen@mojavelinux.com\">Dan Allen</a>\n+ * @author <a href=\"mailto:struberg@apache.org\">Mark Struberg</a>\n  */\n public class ShrinkWrapMetaDataDiscovery extends AbstractMetaDataDiscovery\n {\n-   private Archive<?> archive;\n-\n-   public ShrinkWrapMetaDataDiscovery(Archive<?> archive)\n-   {\n-      super();\n-      this.archive = archive;\n-   }\n-\n-   @Override\n-   protected void configure()\n-   {\n-      Map<ArchivePath, Node> beansXmls = archive.getContent(Filters.include(\"/META-INF/beans.xml\"));\n-\t  boolean beansXmlPresent = false;\n-      for (final Map.Entry<ArchivePath, Node> entry : beansXmls.entrySet())\n-      {\n-         try\n-         {\n-            addWebBeansXmlLocation(\n-                  new URL(null, \"archive:/\" + entry.getKey().get(), new URLStreamHandler()\n-                  {\n-                     @Override\n-                     protected java.net.URLConnection openConnection(URL u) throws java.io.IOException\n-                     {\n-                        return new URLConnection(u)\n-                        {\n-                           @Override\n-                           public void connect() throws IOException {}\n-\n-                           @Override\n-                           public InputStream getInputStream() throws IOException\n-                           {\n-                              return entry.getValue().getAsset().openStream();\n-                           }\n-                        };\n-                     };\n-                  }));\n-\t\t    beansXmlPresent = true;\n-         }\n-         catch (Exception e)\n-         {\n-            e.printStackTrace();\n-         }\n-      }\n-\n-\t  if (beansXmlPresent)\n-\t  {\n-         Map<ArchivePath, Node> classes = archive.getContent(Filters.include(\".*\\\\.class\"));\n-         for (Map.Entry<ArchivePath, Node> classEntry : classes.entrySet())\n-         {\n+    private Archive<?> mainArchive;\n+\n+    public ShrinkWrapMetaDataDiscovery(Archive<?> mainArchive)\n+    {\n+        super();\n+        this.mainArchive = mainArchive;\n+    }\n+\n+    @Override\n+    protected void configure()\n+    {\n+        scanArchive(mainArchive);\n+    }\n+\n+    /**\n+     * Scan the given Archive. The following types are supported:\n+     *\n+     * <ul>\n+     *     <li>{@link JavaArchive}</li>\n+     *     <li>{@link WebArchive}</li>\n+     * </ul>\n+     *\n+     * We do not support EARs yet!\n+     *\n+     * @param archive to scan\n+     */\n+    private void scanArchive(Archive<?> archive)\n+    {\n+        boolean beansXmlPresent = false;\n+\n+        if (archive instanceof WebArchive)\n+        {\n+            Map<ArchivePath, Node> beansXmls;\n+            beansXmls = archive.getContent(Filters.include(\"/WEB-INF/beans.xml\"));\n+            beansXmlPresent |= parseBeansXmls(beansXmls);\n+\n+            // people might also add the marker file to WEB-INF/classes directly\n+            beansXmls = archive.getContent(Filters.include(\"/WEB-INF/classes/META-INF/beans.xml\"));\n+            beansXmlPresent |= parseBeansXmls(beansXmls);\n+\n+            if (beansXmlPresent)\n+            {\n+                scanArchiveClasses(archive);\n+            }\n+\n+            // and now we scan all contained JAR files from WEB-INF/lib\n+            Map<ArchivePath, Node> jarFiles = archive.getContent(Filters.include(\"/WEB-INF/lib/.*\\\\.jar\"));\n+            for (Map.Entry<ArchivePath, Node> jarEntry : jarFiles.entrySet())\n+            {\n+                ArchiveAsset archiveAsset = (ArchiveAsset) jarEntry.getValue().getAsset();\n+                Archive jarArchive = (JavaArchive) archiveAsset.getArchive();\n+                scanArchive(jarArchive);\n+            }\n+\n+\n+        }\n+        else if (archive instanceof JavaArchive)\n+        {\n+            Map<ArchivePath, Node> beansXmls;\n+            beansXmls = archive.getContent(Filters.include(\"/META-INF/beans.xml\"));\n+            beansXmlPresent = parseBeansXmls(beansXmls);\n+            if (beansXmlPresent)\n+            {\n+                scanArchiveClasses(archive);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scan all the classes in the given Archive.\n+     * @param archive\n+     */\n+    private void scanArchiveClasses(Archive<?> archive)\n+    {\n+        Map<ArchivePath, Node> classes = archive.getContent(Filters.include(\".*\\\\.class\"));\n+        for (Map.Entry<ArchivePath, Node> classEntry : classes.entrySet())\n+        {\n             try\n             {\n-               getAnnotationDB().scanClass(classEntry.getValue().getAsset().openStream());\n+                getAnnotationDB().scanClass(classEntry.getValue().getAsset().openStream());\n             }\n             catch (Exception e)\n             {\n-               throw new RuntimeException(\"Could not scan class\", e);\n+                throw new RuntimeException(\"Could not scan class\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Take all given archives and add the bean.xml files to the\n+     * ScannerService.\n+     * @param beansXmls\n+     * @return <code>true</code> if at least one beans.xml has been parsed.\n+     */\n+    private boolean parseBeansXmls(Map<ArchivePath, Node> beansXmls)\n+    {\n+        boolean beansXmlPresent = false ;\n+        for (final Map.Entry<ArchivePath, Node> entry : beansXmls.entrySet())\n+        {\n+            try\n+            {\n+                addWebBeansXmlLocation(\n+                        new URL(null, \"archive:/\" + entry.getKey().get(), new URLStreamHandler()\n+                        {\n+                            @Override\n+                            protected URLConnection openConnection(URL u) throws IOException\n+                            {\n+                                return new URLConnection(u)\n+                                {\n+                                    @Override\n+                                    public void connect() throws IOException\n+                                    {}\n+\n+                                    @Override\n+                                    public InputStream getInputStream() throws IOException\n+                                    {\n+                                        return entry.getValue().getAsset().openStream();\n+                                    }\n+                                };\n+                            };\n+                        }));\n+                beansXmlPresent = true;\n+            }\n+            catch (Exception e)\n+            {\n+                RuntimeException runtimeException;\n+                if (e instanceof RuntimeException)\n+                {\n+                    runtimeException = (RuntimeException) e;\n+                }\n+                else\n+                {\n+                    runtimeException = new RuntimeException(\"Error while parsing beans.xml location\", e);\n+                }\n+\n+                throw runtimeException;\n             }\n-         }\n-\t  }\n-   }\n+        }\n+        return beansXmlPresent;\n+    }\n }"}],"committer":{"email":"aslak@redhat.com","login":"aslakknutsen","name":"Aslak Knutsen"},"authored_date":"2011-09-29T23:37:39-07:00","url":"/arquillian/arquillian-container-openwebbeans/commit/65fecb45444dfe9a8c627adbf75ee5c50d7892bc","committed_date":"2011-10-21T12:36:06-07:00","id":"65fecb45444dfe9a8c627adbf75ee5c50d7892bc","author":{"email":"struberg@yahoo.de","login":"struberg","name":"struberg"}}}