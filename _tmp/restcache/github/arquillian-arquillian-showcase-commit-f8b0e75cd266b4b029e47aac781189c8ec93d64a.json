{"commit":{"author":{"login":"","name":"Jakub Narloch","email":"jmnarloch"},"url":"/arquillian/arquillian-showcase/commit/f8b0e75cd266b4b029e47aac781189c8ec93d64a","id":"f8b0e75cd266b4b029e47aac781189c8ec93d64a","parents":[{"id":"feaef61bd96ccb02bd536caf0418aab6fc5db1d9"}],"message":"Update showcase to Spring Extension Beta 1.","tree":"2572356d17fa637b98cca0b640917d90353b0c4a","modified":[{"diff":"@@ -36,8 +36,9 @@\n     <properties>\n \n         <!-- Arquillian version -->\n-        <version.arquillian>1.0.1.Final</version.arquillian>\n-        <version.arquillian.spring>1.0.0.Alpha2</version.arquillian.spring>\n+        <version.arquillian>1.0.2.Final</version.arquillian>\n+        <version.arquillian.spring>1.0.0.Beta1</version.arquillian.spring>\n+        <version.arquillian.transaction>1.0.0.Alpha1</version.arquillian.transaction>\n \n         <!-- Test related -->\n         <version.junit_junit>4.8.1</version.junit_junit>\n@@ -74,6 +75,13 @@\n             </dependency>\n \n             <dependency>\n+                <groupId>org.jboss.arquillian.extension</groupId>\n+                <artifactId>arquillian-transaction-spring</artifactId>\n+                <version>${version.arquillian.spring}</version>\n+                <scope>test</scope>\n+            </dependency>\n+\n+            <dependency>\n                 <groupId>org.springframework</groupId>\n                 <artifactId>spring-context</artifactId>\n                 <version>${version.spring_framework}</version>\n@@ -109,6 +117,15 @@\n                 <version>${version.spring_framework}</version>\n             </dependency>\n \n+            <!-- Arquillian Transaction -->\n+            <dependency>\n+                <groupId>org.jboss.arquillian.extension</groupId>\n+                <artifactId>arquillian-transaction-bom</artifactId>\n+                <version>${version.arquillian.transaction}</version>\n+                <scope>import</scope>\n+                <type>pom</type>\n+            </dependency>\n+\n             <dependency>\n                 <groupId>cglib</groupId>\n                 <artifactId>cglib</artifactId>","filename":"spring/pom.xml"},{"diff":"@@ -77,6 +77,18 @@\n         </dependency>\n \n         <dependency>\n+            <groupId>org.jboss.arquillian.extension</groupId>\n+            <artifactId>arquillian-transaction-spring</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.jboss.arquillian.extension</groupId>\n+            <artifactId>arquillian-transaction-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n         </dependency>","filename":"spring/spring-hibernate/pom.xml"},{"diff":"@@ -24,6 +24,7 @@\n import org.jboss.arquillian.container.test.api.Deployment;\n import org.jboss.arquillian.junit.Arquillian;\n import org.jboss.arquillian.spring.integration.test.annotation.SpringConfiguration;\n+import org.jboss.arquillian.transaction.api.annotation.Transactional;\n import org.jboss.shrinkwrap.api.Archive;\n import org.junit.After;\n import org.junit.Test;\n@@ -46,6 +47,7 @@\n  * @author <a href=\"mailto:jmnarloch@gmail.com\">Jakub Narloch</a>\n  */\n @RunWith(Arquillian.class)\n+@Transactional(manager = \"txManager\")\n @SpringConfiguration(\"applicationContext.xml\")\n public class HibernateStockRepositoryTestCase {\n \n@@ -67,7 +69,7 @@ public static Archive createTestArchive() {\n     private StockRepository stockRepository;\n \n     /**\n-     * <p>{@link org.hibernate.SessionFactory} instance used by tests.</p>\n+     * <p>{@link SessionFactory} instance used by tests.</p>\n      */\n     @Autowired\n     private SessionFactory sessionFactory;\n@@ -91,9 +93,7 @@ public Session getSession() {\n     public void tearDown() throws Exception {\n \n         // deletes all records from database\n-        getSession().getTransaction().begin();\n         getSession().createQuery(\"delete from Stock\").executeUpdate();\n-        getSession().getTransaction().commit();\n     }\n \n     /**\n@@ -105,8 +105,6 @@ public void testSave() {\n         Stock acme = createStock(\"Acme\", \"ACM\", 123.21D, new Date());\n         Stock redhat = createStock(\"Red Hat\", \"RHC\", 59.61D, new Date());\n \n-        getSession().getTransaction().begin();\n-\n         stockRepository.save(acme);\n         stockRepository.save(redhat);\n \n@@ -114,7 +112,6 @@ public void testSave() {\n         assertTrue(\"The stock id hasn't been assigned.\", redhat.getId() > 0);\n \n         List<Stock> stocks = retrieveAllStocks(getSession());\n-        getSession().getTransaction().commit();\n \n         assertEquals(\"Incorrect number of created stocks, 2 were expected.\", 2, stocks.size());\n \n@@ -128,8 +125,6 @@ public void testSave() {\n     @Test\n     public void testUpdate() throws Exception {\n \n-        getSession().getTransaction().begin();\n-\n         runScript(getSession(), \"insert.sql\");\n \n         List<Stock> stocks = retrieveAllStocks(getSession());\n@@ -141,8 +136,6 @@ public void testUpdate() throws Exception {\n \n         stocks = retrieveAllStocks(getSession());\n \n-        getSession().getTransaction().commit();\n-\n         assertEquals(\"The stock symbol hasn't been updated.\", acme.getSymbol(), stocks.get(0).getSymbol());\n     }\n \n@@ -152,15 +145,11 @@ public void testUpdate() throws Exception {\n     @Test\n     public void testGet() throws Exception {\n \n-        getSession().getTransaction().begin();\n-\n         runScript(getSession(), \"insert.sql\");\n         Stock acme = createStock(\"Acme\", \"ACM\", 123.21D, new Date());\n \n         Stock result = stockRepository.get(1L);\n \n-        getSession().getTransaction().commit();\n-\n         assertNotNull(\"Method returned null result.\", result);\n         assertStock(acme, result);\n     }\n@@ -171,16 +160,12 @@ public void testGet() throws Exception {\n     @Test\n     public void testGetBySymbol() throws Exception {\n \n-        getSession().getTransaction().begin();\n-\n         runScript(getSession(), \"insert.sql\");\n \n         Stock acme = createStock(\"Acme\", \"ACM\", 123.21D, new Date());\n \n         Stock result = stockRepository.getBySymbol(acme.getSymbol());\n \n-        getSession().getTransaction().commit();\n-\n         assertNotNull(\"Method returned null result.\", result);\n         assertStock(acme, result);\n     }\n@@ -190,14 +175,11 @@ public void testGetBySymbol() throws Exception {\n      */\n     @Test\n     public void testGetAll() throws Exception {\n-        getSession().getTransaction().begin();\n \n         runScript(getSession(), \"insert.sql\");\n \n         List<Stock> result = stockRepository.getAll();\n \n-        getSession().getTransaction().commit();\n-\n         assertNotNull(\"Method returned null result.\", result);\n         assertEquals(\"Incorrect number of elements.\", 2, result.size());\n     }","filename":"spring/spring-hibernate/src/test/java/com/acme/spring/hibernate/repository/impl/HibernateStockRepositoryTestCase.java"},{"diff":"@@ -24,6 +24,7 @@\n import org.jboss.arquillian.container.test.api.Deployment;\n import org.jboss.arquillian.junit.Arquillian;\n import org.jboss.arquillian.spring.integration.test.annotation.SpringConfiguration;\n+import org.jboss.arquillian.transaction.api.annotation.Transactional;\n import org.jboss.shrinkwrap.api.Archive;\n import org.junit.After;\n import org.junit.Test;\n@@ -46,6 +47,7 @@\n  * @author <a href=\"mailto:jmnarloch@gmail.com\">Jakub Narloch</a>\n  */\n @RunWith(Arquillian.class)\n+@Transactional(manager = \"txManager\")\n @SpringConfiguration(\"applicationContext.xml\")\n public class DefaultStockServiceTestCase {\n \n@@ -67,7 +69,7 @@ public static Archive createTestArchive() {\n     private StockService stockService;\n \n     /**\n-     * <p>{@link org.hibernate.SessionFactory} instance used by tests.</p>\n+     * <p>{@link SessionFactory} instance used by tests.</p>\n      */\n     @Autowired\n     private SessionFactory sessionFactory;\n@@ -91,9 +93,7 @@ public Session getSession() {\n     public void tearDown() throws Exception {\n \n         // deletes all records from database\n-        getSession().getTransaction().begin();\n         getSession().createQuery(\"delete from Stock\").executeUpdate();\n-        getSession().getTransaction().commit();\n     }\n \n     /**\n@@ -105,8 +105,6 @@ public void testSave() {\n         Stock acme = createStock(\"Acme\", \"ACM\", 123.21D, new Date());\n         Stock redhat = createStock(\"Red Hat\", \"RHC\", 59.61D, new Date());\n \n-        getSession().getTransaction().begin();\n-\n         stockService.save(acme);\n         stockService.save(redhat);\n \n@@ -115,8 +113,6 @@ public void testSave() {\n \n         List<Stock> stocks = retrieveAllStocks(getSession());\n \n-        getSession().getTransaction().commit();\n-\n         assertEquals(\"Incorrect number of created stocks, 2 were expected.\", 2, stocks.size());\n \n         assertStock(acme, stocks.get(0));\n@@ -129,8 +125,6 @@ public void testSave() {\n     @Test\n     public void testUpdate() throws Exception {\n \n-        getSession().getTransaction().begin();\n-\n         runScript(getSession(), \"insert.sql\");\n \n         List<Stock> stocks = retrieveAllStocks(getSession());\n@@ -142,8 +136,6 @@ public void testUpdate() throws Exception {\n \n         stocks = retrieveAllStocks(getSession());\n \n-        getSession().getTransaction().commit();\n-\n         assertEquals(\"The stock symbol hasn't been updated.\", acme.getSymbol(), stocks.get(0).getSymbol());\n     }\n \n@@ -153,15 +145,12 @@ public void testUpdate() throws Exception {\n     @Test\n     public void testGet() throws Exception {\n \n-        getSession().getTransaction().begin();\n         runScript(getSession(), \"insert.sql\");\n \n         Stock acme = createStock(\"Acme\", \"ACM\", 123.21D, new Date());\n \n         Stock result = stockService.get(1L);\n \n-        getSession().getTransaction().commit();\n-\n         assertNotNull(\"Method returned null result.\", result);\n         assertStock(acme, result);\n     }\n@@ -172,15 +161,12 @@ public void testGet() throws Exception {\n     @Test\n     public void testGetBySymbol() throws Exception {\n \n-        getSession().getTransaction().begin();\n         runScript(getSession(), \"insert.sql\");\n \n         Stock acme = createStock(\"Acme\", \"ACM\", 123.21D, new Date());\n \n         Stock result = stockService.getBySymbol(acme.getSymbol());\n \n-        getSession().getTransaction().commit();\n-\n         assertNotNull(\"Method returned null result.\", result);\n         assertStock(acme, result);\n     }\n@@ -191,13 +177,10 @@ public void testGetBySymbol() throws Exception {\n     @Test\n     public void testGetAll() throws Exception {\n \n-        getSession().getTransaction().begin();\n         runScript(getSession(), \"insert.sql\");\n \n         List<Stock> result = stockService.getAll();\n \n-        getSession().getTransaction().commit();\n-\n         assertNotNull(\"Method returned null result.\", result);\n         assertEquals(\"Incorrect number of elements.\", 2, result.size());\n     }","filename":"spring/spring-hibernate/src/test/java/com/acme/spring/hibernate/service/impl/DefaultStockServiceTestCase.java"},{"diff":"@@ -31,7 +31,6 @@\n         </property>\n         <property name=\"hibernateProperties\">\n             <value>\n-                hibernate.current_session_context_class=thread\n                 hibernate.dialect=org.hibernate.dialect.H2Dialect\n                 hibernate.hbm2ddl.auto=create-drop\n             </value>","filename":"spring/spring-hibernate/src/test/resources/applicationContext-repository.xml"},{"diff":"@@ -62,6 +62,18 @@\n         </dependency>\n \n         <dependency>\n+            <groupId>org.jboss.arquillian.extension</groupId>\n+            <artifactId>arquillian-transaction-spring</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.jboss.arquillian.extension</groupId>\n+            <artifactId>arquillian-transaction-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n         </dependency>","filename":"spring/spring-jdbc/pom.xml"},{"diff":"@@ -22,6 +22,7 @@\n import org.jboss.arquillian.container.test.api.Deployment;\n import org.jboss.arquillian.junit.Arquillian;\n import org.jboss.arquillian.spring.integration.test.annotation.SpringConfiguration;\n+import org.jboss.arquillian.transaction.api.annotation.Transactional;\n import org.jboss.shrinkwrap.api.Archive;\n import org.junit.After;\n import org.junit.Test;\n@@ -46,6 +47,7 @@\n  * @author <a href=\"mailto:jmnarloch@gmail.com\">Jakub Narloch</a>\n  */\n @RunWith(Arquillian.class)\n+@Transactional(manager = \"txManager\")\n @SpringConfiguration(\"applicationContext.xml\")\n public class JdbcStockRepositoryTestCase {\n ","filename":"spring/spring-jdbc/src/test/java/com/acme/spring/jdbc/repository/impl/JdbcStockRepositoryTestCase.java"},{"diff":"@@ -22,6 +22,7 @@\n import org.jboss.arquillian.container.test.api.Deployment;\n import org.jboss.arquillian.junit.Arquillian;\n import org.jboss.arquillian.spring.integration.test.annotation.SpringConfiguration;\n+import org.jboss.arquillian.transaction.api.annotation.Transactional;\n import org.jboss.shrinkwrap.api.Archive;\n import org.junit.After;\n import org.junit.Test;\n@@ -46,6 +47,7 @@\n  * @author <a href=\"mailto:jmnarloch@gmail.com\">Jakub Narloch</a>\n  */\n @RunWith(Arquillian.class)\n+@Transactional(manager = \"txManager\")\n @SpringConfiguration(\"applicationContext.xml\")\n public class DefaultStockServiceTestCase {\n ","filename":"spring/spring-jdbc/src/test/java/com/acme/spring/jdbc/service/impl/DefaultStockServiceTestCase.java"},{"diff":"@@ -82,6 +82,18 @@\n         </dependency>\n \n         <dependency>\n+            <groupId>org.jboss.arquillian.extension</groupId>\n+            <artifactId>arquillian-transaction-spring</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.jboss.arquillian.extension</groupId>\n+            <artifactId>arquillian-transaction-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n         </dependency>","filename":"spring/spring-jpa/pom.xml"},{"diff":"@@ -21,9 +21,7 @@\n import org.springframework.stereotype.Repository;\n \n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.PersistenceException;\n-import javax.persistence.PersistenceUnit;\n+import javax.persistence.PersistenceContext;\n import java.text.MessageFormat;\n import java.util.List;\n \n@@ -36,20 +34,10 @@\n public class JpaStockRepository implements StockRepository {\n \n     /**\n-     * <p>Represents the instance of {@link EntityManagerFactory} used for persistence operation.</p>\n+     * <p>Represents the instance of {@link EntityManager} used for persistence operation.</p>\n      */\n-    @PersistenceUnit\n-    private EntityManagerFactory entityManagerFactory;\n-\n-    /**\n-     * <p>Retrieves the entity manger.</p>\n-     *\n-     * @return the entity manager\n-     */\n-    protected EntityManager getEntityManager() {\n-\n-        return entityManagerFactory.createEntityManager();\n-    }\n+    @PersistenceContext\n+    private EntityManager entityManager;\n \n     /**\n      * <p>Creates new instance of {@link JpaStockRepository}</p>\n@@ -68,23 +56,11 @@ public long save(Stock stock) {\n         validateNoNull(stock, \"stock\");\n         validateNotEmpty(stock.getSymbol(), \"symbol\");\n \n-        EntityManager entityManager = getEntityManager();\n-\n-        try {\n-            entityManager.getTransaction().begin();\n-\n-            // persists the entity\n-            entityManager.persist(stock);\n-\n-            entityManager.getTransaction().commit();\n+        // persists the entity\n+        entityManager.persist(stock);\n \n-            // return the newly created id for the entity\n-            return stock.getId();\n-        } catch (PersistenceException exc) {\n-            entityManager.getTransaction().rollback();\n-\n-            throw exc;\n-        }\n+        // return the newly created id for the entity\n+        return stock.getId();\n     }\n \n     /**\n@@ -97,20 +73,7 @@ public void update(Stock stock) {\n         validateNoNull(stock, \"stock\");\n         validateNotEmpty(stock.getSymbol(), \"symbol\");\n \n-        EntityManager entityManager = getEntityManager();\n-\n-        try {\n-            entityManager.getTransaction().begin();\n-\n-            entityManager.merge(stock);\n-\n-            entityManager.getTransaction().commit();\n-        } catch (PersistenceException exc) {\n-\n-            entityManager.getTransaction().rollback();\n-\n-            throw exc;\n-        }\n+        entityManager.merge(stock);\n     }\n \n     /**\n@@ -120,7 +83,7 @@ public void update(Stock stock) {\n     public Stock get(long id) {\n \n         // retrieves the entity by it's id\n-        return getEntityManager().find(Stock.class, id);\n+        return entityManager.find(Stock.class, id);\n     }\n \n     /**\n@@ -132,7 +95,7 @@ public Stock getBySymbol(String symbol) {\n         validateNotEmpty(symbol, \"symbol\");\n \n         // retrieves the entity by it's symbol\n-        return (Stock) getEntityManager().createQuery(\"from Stock where symbol = :symbol\")\n+        return (Stock) entityManager.createQuery(\"from Stock where symbol = :symbol\")\n                 .setParameter(\"symbol\", symbol)\n                 .getSingleResult();\n     }\n@@ -144,7 +107,7 @@ public Stock getBySymbol(String symbol) {\n     public List<Stock> getAll() {\n \n         // retrieves all stocks\n-        return getEntityManager().createQuery(\"from Stock\").getResultList();\n+        return entityManager.createQuery(\"from Stock\").getResultList();\n     }\n \n     /**","filename":"spring/spring-jpa/src/main/java/com/acme/spring/jpa/repository/impl/JpaStockRepository.java"},{"diff":"@@ -72,16 +72,10 @@ public static void runScript(EntityManager entityManager, String fileName) throw\n         // splits the commands by semicolon\n         String[] commands = stringBuilder.toString().split(\";\");\n \n-        // begins the transaction\n-        entityManager.getTransaction().begin();\n-\n         for (final String command : commands) {\n \n             entityManager.createNativeQuery(command).executeUpdate();\n         }\n-\n-        // commits the transaction\n-        entityManager.getTransaction().commit();\n     }\n \n     /**","filename":"spring/spring-jpa/src/test/java/com/acme/spring/jpa/JpaTestHelper.java"},{"diff":"@@ -22,6 +22,7 @@\n import org.jboss.arquillian.container.test.api.Deployment;\n import org.jboss.arquillian.junit.Arquillian;\n import org.jboss.arquillian.spring.integration.test.annotation.SpringConfiguration;\n+import org.jboss.arquillian.transaction.api.annotation.Transactional;\n import org.jboss.shrinkwrap.api.Archive;\n import org.junit.After;\n import org.junit.Test;\n@@ -29,8 +30,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n \n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.PersistenceUnit;\n+import javax.persistence.PersistenceContext;\n import java.math.BigDecimal;\n import java.util.Date;\n import java.util.List;\n@@ -47,6 +47,7 @@\n  * @author <a href=\"mailto:jmnarloch@gmail.com\">Jakub Narloch</a>\n  */\n @RunWith(Arquillian.class)\n+@Transactional(manager = \"txManager\")\n @SpringConfiguration(\"applicationContext.xml\")\n public class JpaStockRepositoryTestCase {\n \n@@ -68,20 +69,10 @@ public static Archive createTestArchive() {\n     private StockRepository stockRepository;\n \n     /**\n-     * <p>{@link EntityManagerFactory} instance used by tests.</p>\n+     * <p>{@link EntityManager} instance used by tests.</p>\n      */\n-    @PersistenceUnit\n-    private EntityManagerFactory entityManager;\n-\n-    /**\n-     * <p>Retrieves an entity manager.</p>\n-     *\n-     * @return the entity manager\n-     */\n-    public EntityManager getEntityManager() {\n-\n-        return entityManager.createEntityManager();\n-    }\n+    @PersistenceContext\n+    private EntityManager entityManager;\n \n     /**\n      * <p>Tears down the test environment.</p>\n@@ -91,12 +82,8 @@ public EntityManager getEntityManager() {\n     @After\n     public void tearDown() throws Exception {\n \n-        EntityManager entityManager = getEntityManager();\n-\n         // deletes all records from database\n-        entityManager.getTransaction().begin();\n         entityManager.createQuery(\"delete from Stock\").executeUpdate();\n-        entityManager.getTransaction().commit();\n     }\n \n     /**\n@@ -114,8 +101,6 @@ public void testSave() {\n         assertTrue(\"The stock id hasn't been assigned.\", acme.getId() > 0);\n         assertTrue(\"The stock id hasn't been assigned.\", redhat.getId() > 0);\n \n-        EntityManager entityManager = getEntityManager();\n-\n         List<Stock> stocks = retrieveAllStocks(entityManager);\n \n         assertEquals(\"Incorrect number of created stocks, 2 were expected.\", 2, stocks.size());\n@@ -130,8 +115,6 @@ public void testSave() {\n     @Test\n     public void testUpdate() throws Exception {\n \n-        EntityManager entityManager = getEntityManager();\n-\n         runScript(entityManager, \"insert.sql\");\n \n         List<Stock> stocks = retrieveAllStocks(entityManager);\n@@ -152,8 +135,6 @@ public void testUpdate() throws Exception {\n     @Test\n     public void testGet() throws Exception {\n \n-        EntityManager entityManager = getEntityManager();\n-\n         runScript(entityManager, \"insert.sql\");\n \n         Stock acme = createStock(\"Acme\", \"ACM\", 123.21D, new Date());\n@@ -170,8 +151,6 @@ public void testGet() throws Exception {\n     @Test\n     public void testGetBySymbol() throws Exception {\n \n-        EntityManager entityManager = getEntityManager();\n-\n         runScript(entityManager, \"insert.sql\");\n \n         Stock acme = createStock(\"Acme\", \"ACM\", 123.21D, new Date());\n@@ -188,8 +167,6 @@ public void testGetBySymbol() throws Exception {\n     @Test\n     public void testGetAll() throws Exception {\n \n-        EntityManager entityManager = getEntityManager();\n-\n         runScript(entityManager, \"insert.sql\");\n \n         List<Stock> result = stockRepository.getAll();\n@@ -221,8 +198,8 @@ private static Stock createStock(String name, String symbol, double value, Date\n     /**\n      * <p>Asserts that the actual stock's properties values are correct.</p>\n      *\n-     * @param expected   the expected stock object\n-     * @param actual     the tested stock object\n+     * @param expected the expected stock object\n+     * @param actual   the tested stock object\n      */\n     private static void assertStock(Stock expected, Stock actual) {\n ","filename":"spring/spring-jpa/src/test/java/com/acme/spring/jpa/repository/impl/JpaStockRepositoryTestCase.java"},{"diff":"@@ -23,6 +23,7 @@\n import org.jboss.arquillian.container.test.api.Deployment;\n import org.jboss.arquillian.junit.Arquillian;\n import org.jboss.arquillian.spring.integration.test.annotation.SpringConfiguration;\n+import org.jboss.arquillian.transaction.api.annotation.Transactional;\n import org.jboss.shrinkwrap.api.Archive;\n import org.junit.After;\n import org.junit.Test;\n@@ -30,8 +31,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n \n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.PersistenceUnit;\n+import javax.persistence.PersistenceContext;\n import java.math.BigDecimal;\n import java.util.Date;\n import java.util.List;\n@@ -48,6 +48,7 @@\n  * @author <a href=\"mailto:jmnarloch@gmail.com\">Jakub Narloch</a>\n  */\n @RunWith(Arquillian.class)\n+@Transactional(manager = \"txManager\")\n @SpringConfiguration(\"applicationContext.xml\")\n public class DefaultStockServiceTestCase {\n \n@@ -69,20 +70,10 @@ public static Archive createTestArchive() {\n     private StockService stockService;\n \n     /**\n-     * <p>{@link javax.persistence.EntityManagerFactory} instance used by tests.</p>\n+     * <p>{@link EntityManager} instance used by tests.</p>\n      */\n-    @PersistenceUnit\n-    private EntityManagerFactory entityManager;\n-\n-    /**\n-     * <p>Retrieves an entity manager.</p>\n-     *\n-     * @return the entity manager\n-     */\n-    public EntityManager getEntityManager() {\n-\n-        return entityManager.createEntityManager();\n-    }\n+    @PersistenceContext\n+    private EntityManager entityManager;\n \n     /**\n      * <p>Tears down the test environment.</p>\n@@ -92,12 +83,8 @@ public EntityManager getEntityManager() {\n     @After\n     public void tearDown() throws Exception {\n \n-        EntityManager entityManager = getEntityManager();\n-\n         // deletes all records from database\n-        entityManager.getTransaction().begin();\n         entityManager.createQuery(\"delete from Stock\").executeUpdate();\n-        entityManager.getTransaction().commit();\n     }\n \n     /**\n@@ -115,8 +102,6 @@ public void testSave() {\n         assertTrue(\"The stock id hasn't been assigned.\", acme.getId() > 0);\n         assertTrue(\"The stock id hasn't been assigned.\", redhat.getId() > 0);\n \n-        EntityManager entityManager = getEntityManager();\n-\n         List<Stock> stocks = retrieveAllStocks(entityManager);\n \n         assertEquals(\"Incorrect number of created stocks, 2 were expected.\", 2, stocks.size());\n@@ -131,8 +116,6 @@ public void testSave() {\n     @Test\n     public void testUpdate() throws Exception {\n \n-        EntityManager entityManager = getEntityManager();\n-\n         runScript(entityManager, \"insert.sql\");\n \n         List<Stock> stocks = JpaTestHelper.retrieveAllStocks(entityManager);\n@@ -153,8 +136,6 @@ public void testUpdate() throws Exception {\n     @Test\n     public void testGet() throws Exception {\n \n-        EntityManager entityManager = getEntityManager();\n-\n         runScript(entityManager, \"insert.sql\");\n \n         Stock acme = createStock(\"Acme\", \"ACM\", 123.21D, new Date());\n@@ -171,8 +152,6 @@ public void testGet() throws Exception {\n     @Test\n     public void testGetBySymbol() throws Exception {\n \n-        EntityManager entityManager = getEntityManager();\n-\n         runScript(entityManager, \"insert.sql\");\n \n         Stock acme = createStock(\"Acme\", \"ACM\", 123.21D, new Date());\n@@ -189,8 +168,6 @@ public void testGetBySymbol() throws Exception {\n     @Test\n     public void testGetAll() throws Exception {\n \n-        EntityManager entityManager = getEntityManager();\n-\n         runScript(entityManager, \"insert.sql\");\n \n         List<Stock> result = stockService.getAll();\n@@ -222,8 +199,8 @@ private static Stock createStock(String name, String symbol, double value, Date\n     /**\n      * <p>Asserts that the actual stock's properties values are correct.</p>\n      *\n-     * @param expected   the expected stock object\n-     * @param actual     the tested stock object\n+     * @param expected the expected stock object\n+     * @param actual   the tested stock object\n      */\n     private static void assertStock(Stock expected, Stock actual) {\n ","filename":"spring/spring-jpa/src/test/java/com/acme/spring/jpa/service/impl/DefaultStockServiceTestCase.java"}],"committer":{"login":"aslakknutsen","name":"Aslak Knutsen","email":"aslak@redhat.com"},"committed_date":"2012-08-30T14:02:51-07:00","authored_date":"2012-08-30T13:05:18-07:00"}}