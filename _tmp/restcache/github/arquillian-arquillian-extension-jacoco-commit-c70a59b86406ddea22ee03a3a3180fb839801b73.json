{"commit":{"parents":[{"id":"441675569efb8d5cb699dd4f6f7021d87a247e84"}],"added":["src/main/java/org/jboss/arquillian/extension/jacoco/client/CoverageDataReceiver.java","src/main/java/org/jboss/arquillian/extension/jacoco/container/CoverageDataCommand.java"],"message":"ARQ-163 added CoverageDataCommand and updated arq-core dependency from CR1-SNAPSHOT to CR1","tree":"83916d8e83ce6124146ed36699288534112077f5","modified":[{"filename":"pom.xml","diff":"@@ -24,7 +24,7 @@\n     <properties>\n \n         <!-- Versioning -->\n-        <version.arquillian_core>1.0.0.CR1-SNAPSHOT</version.arquillian_core>\n+        <version.arquillian_core>1.0.0.CR1</version.arquillian_core>\n         <version.sonar_jacoco>0.5</version.sonar_jacoco>\n         <version.jacoco>0.5.2.20110519202509</version.jacoco>\n         <version.asm>3.2</version.asm>\n@@ -49,6 +49,22 @@\n                 <enabled>false</enabled>\n             </snapshots>\n         </repository>\n+        \n+        <repository>\n+          <id>jboss-public-repository-group</id>\n+          <name>JBoss Public Maven Repository Group</name>\n+          <url>http://repository.jboss.org/nexus/content/groups/public/</url>\n+          <layout>default</layout>\n+          <releases>\n+            <enabled>true</enabled>\n+            <updatePolicy>never</updatePolicy>\n+          </releases>\n+          <snapshots>\n+            <enabled>true</enabled>\n+            <updatePolicy>never</updatePolicy>\n+          </snapshots>\n+        </repository>\n+        \n     </repositories>\n \n     <dependencyManagement>\n@@ -107,10 +123,12 @@\n             <artifactId>arquillian-junit-container</artifactId>\n             <scope>test</scope>\n         </dependency>\n-        <dependency>\n+        \n+\t\t<dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n             <scope>test</scope>\n+\t\t\t<version>4.8.2</version>\n         </dependency>\n \n         <dependency>"},{"filename":"src/main/java/org/jboss/arquillian/extension/jacoco/container/ShutdownCoverageData.java","diff":"@@ -16,10 +16,11 @@\n  */\n package org.jboss.arquillian.extension.jacoco.container;\n \n-import java.io.FileOutputStream;\n+import java.io.ByteArrayOutputStream;\n \n import org.jacoco.core.data.ExecutionDataWriter;\n import org.jacoco.core.runtime.IRuntime;\n+import org.jboss.arquillian.container.test.spi.command.CommandService;\n import org.jboss.arquillian.core.api.Instance;\n import org.jboss.arquillian.core.api.annotation.Inject;\n import org.jboss.arquillian.core.api.annotation.Observes;\n@@ -27,44 +28,37 @@\n \n /**\n  * StartCoverageData\n- *\n+ * \n  * @author <a href=\"mailto:aslak@redhat.com\">Aslak Knutsen</a>\n  * @version $Revision: $\n  */\n-public class ShutdownCoverageData\n-{\n-   @Inject\n-   private Instance<IRuntime> runtimeInst;\n-   \n-   public void shutdownRuntime(@Observes AfterSuite event) throws Exception\n-   {\n-      IRuntime runtime = runtimeInst.get();\n-      if(runtime != null)\n-      {\n-         FileOutputStream coverageFile = null;\n-         try\n-         {\n-            coverageFile = new FileOutputStream(\n-                  \"/home/aslak/dev/source/testing/arquillian/frameworks/jacoco/target/coverage.data\");\n-   \n-            ExecutionDataWriter writer = new ExecutionDataWriter(coverageFile);\n-            runtime.collect(writer, writer, true);\n-         } \n-         finally \n-         {\n-            runtime.shutdown();\n-            if(coverageFile != null)\n-            {\n-               try\n-               {\n-                  coverageFile.close();\n-               }\n-               catch (Exception e) \n-               {\n-                  throw new RuntimeException(\"Could not close coverage file\", e);\n-               }\n+public class ShutdownCoverageData {\n+    @Inject\n+    private Instance<IRuntime> runtimeInst;\n+\n+    @Inject\n+    private Instance<CommandService> commandService;\n+\n+    public void writeCoverageData(@Observes AfterSuite arqEvent) throws Exception {\n+        IRuntime runtime = runtimeInst.get();\n+        if (runtime != null) {\n+            ByteArrayOutputStream coverageOutputStream = null;\n+            try {\n+                coverageOutputStream = new ByteArrayOutputStream();\n+                ExecutionDataWriter writer = new ExecutionDataWriter(coverageOutputStream);\n+                runtime.collect(writer, writer, true);\n+            } finally {\n+                runtime.shutdown();\n+                if (coverageOutputStream != null) {\n+                    try {\n+                        coverageOutputStream.close();\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(\"Could not close coverage file\", e);\n+                    }\n+                }\n             }\n-         }\n-      }\n-   }\n+\n+            commandService.get().execute(new CoverageDataCommand<ByteArrayOutputStream>(coverageOutputStream));\n+        }\n+    }\n }"},{"filename":"src/main/java/org/jboss/arquillian/extension/jacoco/container/StartCoverageData.java","diff":"@@ -33,15 +33,16 @@\n  */\n public class StartCoverageData \n {\n-   @Inject @SuiteScoped\n-   private InstanceProducer<IRuntime> runtimeInst;\n-   \n-   public void createRuntime(@Observes BeforeSuite event) throws Exception\n-   {\n-      IRuntime runtime = ArquillianRuntime.getInstance();\n-      runtime.setSessionId(UUID.randomUUID().toString());\n-      runtime.startup();\n-      \n-      runtimeInst.set(runtime);\n-   }\n+    @Inject\n+    @SuiteScoped\n+    private InstanceProducer<IRuntime> runtimeInst;\n+\n+    public void createRuntime(@Observes BeforeSuite event) throws Exception\n+    {\n+        IRuntime runtime = ArquillianRuntime.getInstance();\n+        runtime.setSessionId(UUID.randomUUID().toString());\n+        runtime.startup();\n+\n+        runtimeInst.set(runtime);\n+    }\n }"},{"filename":"src/test/java/org/jboss/arquillian/extension/jacoco/test/CoverageDataTestCase.java","diff":"@@ -138,7 +138,7 @@ public void generateReport() throws Exception\n //\n //   private static void visitLeafs(final IReportVisitor visitor, final Collection<? extends ICoverageNode> leafs,\n //         final ISourceFileLocator sourceFileLocator) throws IOException\n-//   {\n+//   {c\n //      for (final ICoverageNode l : leafs)\n //      {\n //         // Ignore Arquillian Client side methods"}],"committer":{"email":"aslak@redhat.com","login":"aslakknutsen","name":"Aslak Knutsen"},"authored_date":"2011-06-29T07:12:41-07:00","url":"/arquillian/arquillian-extension-jacoco/commit/c70a59b86406ddea22ee03a3a3180fb839801b73","committed_date":"2011-07-03T03:40:28-07:00","id":"c70a59b86406ddea22ee03a3a3180fb839801b73","author":{"email":"joserodolfo.freitas@gawab.com","login":"","name":"joserodolfofreitas"}}}