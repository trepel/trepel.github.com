{"commit":{"tree":"fead14ea8249df3d8e1893b275d7a23ef4fb9988","parents":[{"id":"996c13b5276cf5c0837132ec4b4253df6cbd766e"}],"authored_date":"2011-11-19T09:19:01-08:00","id":"d17e79dfd78db5ee13b678ee0cbd8030722af4a8","added":["container/spi/src/main/java/org/jboss/arquillian/container/spi/event/StartClassContainers.java","container/spi/src/main/java/org/jboss/arquillian/container/spi/event/StopClassContainers.java"],"url":"/arquillian/arquillian-core/commit/d17e79dfd78db5ee13b678ee0cbd8030722af4a8","committer":{"email":"aslak@redhat.com","name":"Aslak Knutsen","login":"aslakknutsen"},"committed_date":"2011-11-22T09:23:35-08:00","message":"ARQ-236 - Configure the Container lifecycle based on the Test events","author":{"email":"mgencur@redhat.com","name":"mgencur@redhat.com","login":"mgencur"},"modified":[{"filename":"container/impl-base/src/main/java/org/jboss/arquillian/container/impl/client/container/ContainerLifecycleController.java","diff":"@@ -22,8 +22,10 @@\n import org.jboss.arquillian.container.spi.event.KillContainer;\n import org.jboss.arquillian.container.spi.event.SetupContainer;\n import org.jboss.arquillian.container.spi.event.SetupContainers;\n+import org.jboss.arquillian.container.spi.event.StartClassContainers;\n import org.jboss.arquillian.container.spi.event.StartContainer;\n import org.jboss.arquillian.container.spi.event.StartSuiteContainers;\n+import org.jboss.arquillian.container.spi.event.StopClassContainers;\n import org.jboss.arquillian.container.spi.event.StopContainer;\n import org.jboss.arquillian.container.spi.event.StopSuiteContainers;\n import org.jboss.arquillian.container.spi.event.StopManualContainers;\n@@ -41,12 +43,12 @@\n  */\n public class ContainerLifecycleController\n {\n-   @Inject \n+   @Inject\n    private Instance<ContainerRegistry> containerRegistry;\n \n    @Inject\n    private Instance<Injector> injector;\n-   \n+\n    public void setupContainers(@Observes SetupContainers event) throws Exception\n    {\n       forEachContainer(new Operation<Container>()\n@@ -77,6 +79,21 @@ public void perform(Container container)\n       });\n    }\n \n+   public void startClassContainers(@Observes StartClassContainers event) throws Exception\n+   {\n+      forEachClassContainer(new Operation<Container>()\n+      {\n+         @Inject\n+         private Event<StartContainer> event;\n+\n+         @Override\n+         public void perform(Container container)\n+         {\n+            event.fire(new StartContainer(container));\n+         }\n+      });\n+   }\n+\n    public void stopSuiteContainers(@Observes StopSuiteContainers event) throws Exception\n    {\n       forEachSuiteContainer(new Operation<Container>()\n@@ -91,14 +108,29 @@ public void perform(Container container)\n          }\n       });\n    }\n-   \n+\n+   public void stopClassContainers(@Observes StopClassContainers event) throws Exception\n+   {\n+      forEachClassContainer(new Operation<Container>()\n+      {\n+         @Inject\n+         private Event<StopContainer> stopContainer;\n+\n+         @Override\n+         public void perform(Container container)\n+         {\n+            stopContainer.fire(new StopContainer(container));\n+         }\n+      });\n+   }\n+\n    public void stopManualContainers(@Observes StopManualContainers event) throws Exception\n    {\n       forEachManualContainer(new Operation<Container>()\n       {\n          @Inject\n          private Event<StopContainer> stopContainer;\n-         \n+\n          @Override\n          public void perform(Container container)\n          {\n@@ -106,7 +138,7 @@ public void perform(Container container)\n          }\n       });\n    }\n-   \n+\n    public void setupContainer(@Observes SetupContainer event) throws Exception\n    {\n       forContainer(event.getContainer(), new Operation<Container>()\n@@ -126,14 +158,14 @@ public void startContainer(@Observes StartContainer event) throws Exception\n          @Override\n          public void perform(Container container) throws Exception\n          {\n-            if (!container.getState().equals(Container.State.STARTED)) \n+            if (!container.getState().equals(Container.State.STARTED))\n             {\n                container.start();\n             }\n          }\n       });\n    }\n-   \n+\n    public void stopContainer(@Observes StopContainer event) throws Exception\n    {\n       forContainer(event.getContainer(), new Operation<Container>()\n@@ -141,14 +173,14 @@ public void stopContainer(@Observes StopContainer event) throws Exception\n          @Override\n          public void perform(Container container) throws Exception\n          {\n-            if (container.getState().equals(Container.State.STARTED)) \n+            if (container.getState().equals(Container.State.STARTED))\n             {\n                container.stop();\n             }\n          }\n       });\n    }\n-   \n+\n    public void killContainer(@Observes KillContainer event) throws Exception\n    {\n       forContainer(event.getContainer(), new Operation<Container>()\n@@ -156,54 +188,67 @@ public void killContainer(@Observes KillContainer event) throws Exception\n          @Override\n          public void perform(Container container) throws Exception\n          {\n-            if (container.getState().equals(Container.State.STARTED)) \n+            if (container.getState().equals(Container.State.STARTED))\n             {\n                container.kill();\n             }\n          }\n       });\n    }\n-   \n+\n    private void forEachContainer(Operation<Container> operation) throws Exception\n    {\n       injector.get().inject(operation);\n       ContainerRegistry registry = containerRegistry.get();\n-      if(registry == null)\n+      if (registry == null)\n       {\n          return;\n       }\n-      for(Container container : registry.getContainers())\n+      for (Container container : registry.getContainers())\n       {\n          operation.perform(container);\n       }\n    }\n-   \n+\n    private void forEachSuiteContainer(Operation<Container> operation) throws Exception\n    {\n       injector.get().inject(operation);\n       ContainerRegistry registry = containerRegistry.get();\n-      for(Container container : registry.getContainers())\n+      for (Container container : registry.getContainers())\n       {\n-         if (\"suite\".equals(container.getContainerConfiguration().getMode())) \n+         if (\"suite\".equals(container.getContainerConfiguration().getMode()))\n          {\n             operation.perform(container);\n          }\n       }\n    }\n    \n+   private void forEachClassContainer(Operation<Container> operation) throws Exception\n+   {\n+      injector.get().inject(operation);\n+      ContainerRegistry registry = containerRegistry.get();\n+      for (Container container : registry.getContainers())\n+      {\n+         if (\"class\".equals(container.getContainerConfiguration().getMode()))\n+         {\n+            operation.perform(container);\n+         }\n+      }\n+   }\n+\n    private void forEachManualContainer(Operation<Container> operation) throws Exception\n    {\n       injector.get().inject(operation);\n       ContainerRegistry registry = containerRegistry.get();\n-      for(Container container : registry.getContainers())\n+      for (Container container : registry.getContainers())\n       {\n-         if (\"manual\".equals(container.getContainerConfiguration().getMode())) \n+         if (\"manual\".equals(container.getContainerConfiguration().getMode()))\n          {\n             operation.perform(container);\n          }\n       }\n    }\n-   \n+\n    private void forContainer(Container container, Operation<Container> operation) throws Exception\n    {\n       injector.get().inject(operation);"},{"filename":"container/impl-base/src/test/java/org/jboss/arquillian/container/impl/client/container/ContainerLifecycleControllerTestCase.java","diff":"@@ -37,8 +37,10 @@\n import org.jboss.arquillian.container.spi.context.ContainerContext;\n import org.jboss.arquillian.container.spi.event.SetupContainer;\n import org.jboss.arquillian.container.spi.event.SetupContainers;\n+import org.jboss.arquillian.container.spi.event.StartClassContainers;\n import org.jboss.arquillian.container.spi.event.StartContainer;\n import org.jboss.arquillian.container.spi.event.StartSuiteContainers;\n+import org.jboss.arquillian.container.spi.event.StopClassContainers;\n import org.jboss.arquillian.container.spi.event.StopContainer;\n import org.jboss.arquillian.container.spi.event.StopSuiteContainers;\n import org.jboss.arquillian.container.spi.event.container.AfterSetup;\n@@ -72,15 +74,17 @@\n {\n    private static final String CONTAINER_1_NAME = \"container_1\";\n    private static final String CONTAINER_2_NAME = \"container_2\";\n-   \n+   private static final String CONTAINER_3_NAME = \"container_3\";\n+   private static final String CONTAINER_4_NAME = \"container_4\";\n+\n    @Inject\n    private Instance<Injector> injector;\n-   \n+\n    private ContainerRegistry registry;\n-   \n+\n    @Mock \n    private ServiceLoader serviceLoader;\n-   \n+\n    @Mock\n    private ContainerDef container1;\n \n@@ -88,6 +92,12 @@\n    private ContainerDef container2;\n \n    @Mock\n+   private ContainerDef container3;\n+\n+   @Mock\n+   private ContainerDef container4;\n+\n+   @Mock\n    private DeployableContainer deployableContainer;\n \n    @Before\n@@ -97,14 +107,18 @@ public void setup()\n       when(serviceLoader.onlyOne(eq(DeployableContainer.class))).thenReturn(deployableContainer);\n       when(container1.getContainerName()).thenReturn(CONTAINER_1_NAME);\n       when(container2.getContainerName()).thenReturn(CONTAINER_2_NAME);\n+      when(container3.getContainerName()).thenReturn(CONTAINER_3_NAME);\n+      when(container4.getContainerName()).thenReturn(CONTAINER_4_NAME);\n       when(container1.getMode()).thenReturn(\"suite\");\n       when(container2.getMode()).thenReturn(\"suite\");\n-      \n+      when(container3.getMode()).thenReturn(\"class\");\n+      when(container4.getMode()).thenReturn(\"class\");\n+\n       registry = new LocalContainerRegistry(injector.get());\n-      \n+\n       bind(ApplicationScoped.class, ContainerRegistry.class, registry);\n    }\n-   \n+\n    @Override\n    protected void addExtensions(List<Class<?>> extensions)\n    {\n@@ -117,69 +131,121 @@ public void shouldSetupAllContainersInRegistry() throws Exception\n    {\n       registry.create(container1, serviceLoader);\n       registry.create(container2, serviceLoader);\n-      \n+      registry.create(container3, serviceLoader);\n+      registry.create(container4, serviceLoader);\n+\n       fire(new SetupContainers());\n-      \n+\n       assertEventFiredInContext(SetupContainer.class, ContainerContext.class);\n-      assertEventFired(SetupContainer.class, 2);\n-      \n+      assertEventFired(SetupContainer.class, 4);\n+\n       assertEventFiredInContext(BeforeSetup.class, ContainerContext.class);\n-      assertEventFired(BeforeSetup.class, 2);\n-      \n+      assertEventFired(BeforeSetup.class, 4);\n+\n       assertEventFiredInContext(AfterSetup.class, ContainerContext.class);\n-      assertEventFired(AfterSetup.class, 2);\n-      \n-      verify(deployableContainer, times(2)).setup(isA(DummyContainerConfiguration.class));\n+      assertEventFired(AfterSetup.class, 4);\n+\n+      verify(deployableContainer, times(4)).setup(isA(DummyContainerConfiguration.class));\n    }\n \n    @Test\n-   public void shouldStartAllContainersInRegistry() throws Exception\n+   public void shouldStartAllSuiteContainersInRegistry() throws Exception\n    {\n       registry.create(container1, serviceLoader);\n       registry.create(container2, serviceLoader);\n-      \n+      registry.create(container3, serviceLoader);\n+      registry.create(container4, serviceLoader);\n+\n       fire(new StartSuiteContainers());\n-      \n+\n+      assertEventFiredInContext(StartContainer.class, ContainerContext.class);\n+      assertEventFired(StartContainer.class, 2);\n+\n+      assertEventFiredInContext(BeforeStart.class, ContainerContext.class);\n+      assertEventFired(BeforeStart.class, 2);\n+\n+      assertEventFiredInContext(AfterStart.class, ContainerContext.class);\n+      assertEventFired(AfterStart.class, 2);\n+\n+      verify(deployableContainer, times(2)).start();\n+   }\n+\n+   @Test\n+   public void shouldStartAllClassContainersInRegistry() throws Exception\n+   {\n+      registry.create(container1, serviceLoader);\n+      registry.create(container2, serviceLoader);\n+      registry.create(container3, serviceLoader);\n+      registry.create(container4, serviceLoader);\n+\n+      fire(new StartClassContainers());\n+\n       assertEventFiredInContext(StartContainer.class, ContainerContext.class);\n       assertEventFired(StartContainer.class, 2);\n-      \n+\n       assertEventFiredInContext(BeforeStart.class, ContainerContext.class);\n       assertEventFired(BeforeStart.class, 2);\n-      \n+\n       assertEventFiredInContext(AfterStart.class, ContainerContext.class);\n       assertEventFired(AfterStart.class, 2);\n-      \n+\n       verify(deployableContainer, times(2)).start();\n    }\n-   \n+\n    @Test\n-   public void shouldStopAllContainersInRegistry() throws Exception\n+   public void shouldStopAllSuiteContainersInRegistry() throws Exception\n    {\n       registry.create(container1, serviceLoader);\n       registry.create(container2, serviceLoader);\n-      \n+\n       //we need to manually set this since we don't actually start them\n       for (Container c : registry.getContainers()) {\n          c.setState(Container.State.STARTED);\n       }\n-      \n+\n       fire(new StopSuiteContainers());\n-      \n+\n       assertEventFiredInContext(StopContainer.class, ContainerContext.class);\n       assertEventFired(StopContainer.class, 2);\n-      \n+\n       assertEventFiredInContext(BeforeStop.class, ContainerContext.class);\n       assertEventFired(BeforeStop.class, 2);\n-      \n+\n       assertEventFiredInContext(AfterStop.class, ContainerContext.class);\n       assertEventFired(AfterStop.class, 2);\n-      \n+\n       verify(deployableContainer, times(2)).stop();\n    }\n \n-   public static class DummyContainerConfiguration implements ContainerConfiguration\n+   @Test\n+   public void shouldStopAllClassContainersInRegistry() throws Exception\n    {\n+      registry.create(container1, serviceLoader);\n+      registry.create(container2, serviceLoader);\n+      registry.create(container3, serviceLoader);\n+      registry.create(container4, serviceLoader);\n \n+      //we need to manually set this since we don't actually start them\n+      for (Container c : registry.getContainers()) {\n+         c.setState(Container.State.STARTED);\n+      }\n+\n+      fire(new StopClassContainers());\n+\n+      assertEventFiredInContext(StopContainer.class, ContainerContext.class);\n+      assertEventFired(StopContainer.class, 2);\n+\n+      assertEventFiredInContext(BeforeStop.class, ContainerContext.class);\n+      assertEventFired(BeforeStop.class, 2);\n+\n+      assertEventFiredInContext(AfterStop.class, ContainerContext.class);\n+      assertEventFired(AfterStop.class, 2);\n+\n+      verify(deployableContainer, times(2)).stop();\n+   }\n+\n+   public static class DummyContainerConfiguration implements ContainerConfiguration\n+   {\n       /* (non-Javadoc)\n        * @see org.jboss.arquillian.spi.client.container.ContainerConfiguration#validate()\n        */\n@@ -187,6 +253,5 @@ public void shouldStopAllContainersInRegistry() throws Exception\n       public void validate() throws ConfigurationException\n       {\n       }\n-      \n    }\n }"},{"filename":"container/test-impl-base/src/main/java/org/jboss/arquillian/container/test/impl/client/ContainerEventController.java","diff":"@@ -29,7 +29,9 @@\n import org.jboss.arquillian.container.spi.event.ContainerMultiControlEvent;\n import org.jboss.arquillian.container.spi.event.DeployManagedDeployments;\n import org.jboss.arquillian.container.spi.event.SetupContainers;\n+import org.jboss.arquillian.container.spi.event.StartClassContainers;\n import org.jboss.arquillian.container.spi.event.StartSuiteContainers;\n+import org.jboss.arquillian.container.spi.event.StopClassContainers;\n import org.jboss.arquillian.container.spi.event.StopSuiteContainers;\n import org.jboss.arquillian.container.spi.event.StopManualContainers;\n import org.jboss.arquillian.container.spi.event.UnDeployManagedDeployments;\n@@ -94,6 +96,7 @@ public void execute(@Observes AfterSuite event)\n     */\n    public void execute(@Observes BeforeClass event)\n    {\n+      container.fire(new StartClassContainers());\n       deployment.fire(new GenerateDeployment(event.getTestClass()));\n       container.fire(new DeployManagedDeployments());\n    }\n@@ -107,6 +110,7 @@ public void execute(@Observes AfterClass event)\n       finally\n       {\n          container.fire(new StopManualContainers());\n+         container.fire(new StopClassContainers());\n       }\n    }\n    "},{"filename":"container/test-impl-base/src/test/java/org/jboss/arquillian/container/test/impl/ContainerEventControllerTestCase.java","diff":"@@ -35,7 +35,9 @@\n import org.jboss.arquillian.container.spi.context.DeploymentContext;\n import org.jboss.arquillian.container.spi.event.DeployManagedDeployments;\n import org.jboss.arquillian.container.spi.event.SetupContainers;\n+import org.jboss.arquillian.container.spi.event.StartClassContainers;\n import org.jboss.arquillian.container.spi.event.StartSuiteContainers;\n+import org.jboss.arquillian.container.spi.event.StopClassContainers;\n import org.jboss.arquillian.container.spi.event.StopSuiteContainers;\n import org.jboss.arquillian.container.spi.event.StopManualContainers;\n import org.jboss.arquillian.container.spi.event.UnDeployManagedDeployments;\n@@ -125,7 +127,7 @@ public void scenario() throws Exception\n    }\n \n    @Test\n-   public void shouldSetupAndStartContainers() throws Exception\n+   public void shouldSetupAndStartSuiteContainers() throws Exception\n    {\n       fire(new BeforeSuite());\n \n@@ -134,7 +136,15 @@ public void shouldSetupAndStartContainers() throws Exception\n    }\n \n    @Test\n-   public void shouldStopContainers() throws Exception\n+   public void shouldStartClassContainers() throws Exception\n+   {\n+      fire(new BeforeClass(testClass()));\n+\n+      assertEventFired(StartClassContainers.class, 1);\n+   }\n+\n+   @Test\n+   public void shouldStopSuiteContainers() throws Exception\n    {\n       fire(new AfterSuite());\n \n@@ -150,12 +160,13 @@ public void shouldDeployManagedDeployments() throws Exception\n    }\n \n    @Test\n-   public void shouldUnDeployManagedDeploymentsAndStopManualContainers() throws Exception\n+   public void shouldUndeployManagedDeploymentsAndStopManualAndClassContainers() throws Exception\n    {\n       fire(new AfterClass(testClass()));\n \n       assertEventFired(UnDeployManagedDeployments.class, 1);\n       assertEventFired(StopManualContainers.class, 1);\n+      assertEventFired(StopClassContainers.class, 1);\n    }\n \n    @Test"}]}}