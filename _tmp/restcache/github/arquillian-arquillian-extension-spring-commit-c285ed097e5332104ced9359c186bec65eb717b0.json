{"commit":{"author":{"login":"jmnarloch","email":"jmnarloch@gmail.com","name":"Jakub Narloch"},"authored_date":"2012-04-05T10:12:46-07:00","modified":[{"filename":"README.md","diff":"@@ -1 +1,455 @@\n-Arquillian Spring integration, embedded container and enrichers\n+# Arquillian Spring extension\n+\n+## Arquillian Spring test enricher\n+\n+* Injection of Spring beans into test classes\n+* Configuration from both XML and Java-based config\n+* Injecting beans configured in web application (e.g. DispatcherServlet) for tests annotated with @SpringWebConfiguration\n+* Support for both Spring(@Autowired, @Qualifier, @Required) and JSR-330(@Inject, @Named) annotations\n+* Bean initialization support (@PostConstruct)\n+* Auto packaging the spring-context and spring-web artifacts.\n+\n+## Support for Spring versions\n+\n+* Spring 3.0 and above\n+* Spring 2.5.x\n+\n+## Test setup\n+Enabling the extension is as simple as adding the fallowing dependency into the project POM.\n+\n+```\n+        <dependency>\n+            <groupId>org.jboss.arquillian.extension</groupId>\n+            <artifactId>arquillian-service-deployer-spring-3</artifactId>\n+            <version>${arquillian.spring.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+```\n+\n+Note: For testing Spring 2.5 applications please use arquillian-service-deployer-spring-2.5 instead.\n+\n+Each Arquillian test which relies on Spring framework and requires dependency injection of configured beans has to be\n+annotated with one of the fallowing:\n+``@SpringConfiguration`` - for xml configuration, ``@SpringAnnotatedConfiguration`` - for Java-based configuration\n+and ``@SpringWebConfiguration`` - for web applications.\n+The annotation will instruct the test enricher how to initialize the application context, the first two will cause that\n+for each test case new application context will be created. @SpringWebConfiguration is used for retrieving the context of\n+specific Spring FrameworkServlet (e.g. DispatcherServlet) or the root web application context in general.\n+\n+Note: The annotations may not be mixed with each other, each test will use only one application context.\n+\n+## Configuration\n+It's posible to modify the default behaviour of the extension and set the fallowing settings through arquillian.xml.\n+\n+* If the extension should add the spring dependencies by default for each deployment.\n+* The version of the maven artifact for the Spring Context and Spring Web.\n+* The version of the CGLIB.\n+* Whether to include with each test deployment Snowdrop. Snowdrop is required to run Spring prior version 3.0.3\n+  in JBoss AS (https://jira.springsource.org/browse/SPR-7197)\n+* Name of custom context classes to be used instead of Spring's ClassPathXmlApplicationContext and AnnotationConfigApplicationContext.\n+\n+All the properties are optional.\n+\n+Note: When using the extension with Maven the artifacts version is being read from POM file directly. Modifying the\n+version in the arquillian.xml will have no effect. It's intention is to support other then Maven build systems.\n+\n+Example:\n+\n+```\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<arquillian xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xmlns=\"http://jboss.org/schema/arquillian\"\n+            xsi:schemaLocation=\"http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian_1_0.xsd\">\n+\n+    <extension qualifier=\"spring\">\n+\n+        <!-- The version of Spring artifact, will be used for auto package the spring-context and spring-web, optional\n+         default is 3.1.1.RELEASE -->\n+        <property name=\"springVersion\">3.0.0.RELEASE</property>\n+\n+        <!-- The version of CGLIB artifact - required by Java-based config, optional, default is 2.2.2 -->\n+        <property name=\"cglibVersion\">2.2</property>\n+\n+        <!-- Whether to auto package the dependencies, optional, default is true -->\n+        <property name=\"autoPackage\">true</property>\n+\n+        <!-- Whether to include the snowdrop in test deployment, optional, default is false -->\n+        <property name=\"includeSnowdrop\">true</property>\n+\n+        <!-- The version of the Snowdrop artifact, optional, default is 2.0.3.Final -->\n+        <property name=\"snowdropVersion\">2.0.3.Final</property>\n+\n+        <!-- The name of custom context class, optional, when not specified\n+         then org.springframework.context.support.ClassPathXmlApplicationContext will be used -->\n+        <property name=\"customContextClass\">org.springframework.context.support.ClassPathXmlApplicationContext</property>\n+\n+        <!-- The name of custom context class, optional, when not specified then\n+         org.springframework.context.annotation.AnnotationConfigApplicationContext -->\n+        <property name=\"customAnnotationContextClass\">org.springframework.context.annotation.AnnotationConfigApplicationContext</property>\n+    </extension>\n+</arquillian>\n+```\n+\n+## Code Example\n+\n+The test which requires the dependencies to be injected through Spring should be annotated with @SpringConfiguration.\n+The annotations provides the information where to look for the spring configuration\n+\n+### Testing Spring beans\n+\n+#### XML configuration\n+\n+```xml\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\">\n+\n+    <context:component-scan base-package=\"org.jboss.arquillian.spring.testsuite.beans.repository.impl\"/>\n+    <context:component-scan base-package=\"org.jboss.arquillian.spring.testsuite.beans.service.impl\"/>\n+\n+</beans>\n+```\n+\n+*Test example*\n+\n+```java\n+@RunWith(Arquillian.class)\n+@SpringConfiguration({\"applicationContext.xml\"})\n+public class DefaultEmployeeRepositoryTestCase {\n+\n+    @Deployment\n+    public static JavaArchive createTestArchive() {\n+        return ShrinkWrap.create(JavaArchive.class, \"spring-test.jar\")\n+                .addClasses(Employee.class,\n+                        EmployeeRepository.class, DefaultEmployeeRepository.class, NullEmployeeRepository.class)\n+                .addAsResource(\"applicationContext.xml\");\n+    }\n+\n+    @Autowired\n+    @Qualifier(\"defaultEmployeeRepository\")\n+    private EmployeeRepository employeeRepository;\n+\n+    @Test\n+    public void testGetEmployees() throws Exception {\n+\n+        List<Employee> result = employeeRepository.getEmployees();\n+\n+        assertNotNull(\"Method returned null list as result.\", result);\n+        assertEquals(\"Two employees were expected.\", 2, result.size());\n+    }\n+}\n+```\n+\n+#### Java-based configuration\n+\n+```java\n+@Configuration\n+public class AppConfig {\n+\n+    @Bean\n+    public EmployeeRepository defaultEmployeeRepository() {\n+\n+        return new DefaultEmployeeRepository();\n+    }\n+\n+    @Bean\n+    public EmployeeService defaultEmployeeService() {\n+\n+        return new DefaultEmployeeService();\n+    }\n+}\n+```\n+\n+*Test example*\n+\n+```java\n+@RunWith(Arquillian.class)\n+@SpringAnnotatedConfiguration(classes = {AppConfig.class})\n+public class AnnotatedConfigurationTestCase {\n+\n+    @Deployment\n+    public static JavaArchive createTestArchive() {\n+        return ShrinkWrap.create(JavaArchive.class, \"spring-test.jar\")\n+                .addClasses(Employee.class,\n+                        EmployeeService.class, DefaultEmployeeService.class,\n+                        EmployeeRepository.class, DefaultEmployeeRepository.class, NullEmployeeRepository.class,\n+                        AppConfig.class);\n+    }\n+\n+    @Autowired\n+    private EmployeeService employeeService;\n+\n+    @Test\n+    public void testGetEmployees() throws Exception {\n+\n+        List<Employee> result = employeeService.getEmployees();\n+\n+        assertNotNull(\"Method returned null list as result.\", result);\n+        assertEquals(\"Two employees were expected.\", 2, result.size());\n+    }\n+}\n+```\n+\n+### Testing web apps\n+\n+#### XML configuration\n+The above examples allowed testing seperate classes injected through Spring without configuring entire web application,\n+fallowing example demonstrates how to test a simple MVC application instead.\n+\n+*Simple annotated controller*\n+\n+```java\n+@Controller\n+public class EmployeeController {\n+\n+    @Autowired\n+    private EmployeeService employeeService;\n+\n+    @RequestMapping(\"/Employees.htm\")\n+    public String getEmployees(Model model) {\n+\n+        model.addAttribute(\"employees\", employeeService.getEmployees());\n+\n+        return \"employeeList\";\n+    }\n+}\n+```\n+\n+*Web.xml*\n+\n+```xml\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n+         version=\"3.0\">\n+\n+    <listener>\n+        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n+    </listener>\n+\n+    <servlet>\n+        <servlet-name>employee</servlet-name>\n+        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n+        <load-on-startup>1</load-on-startup>\n+    </servlet>\n+\n+    <servlet-mapping>\n+        <servlet-name>employee</servlet-name>\n+        <url-pattern>*.htm</url-pattern>\n+    </servlet-mapping>\n+\n+</web-app>\n+```\n+\n+Note: The ContextLoaderListener is required here, mostly because each dispatcher servlet has it own application context\n+that is inaccessible from outside. To overcome this limitation the extensions requires that the web application will\n+create Root Web Application Context by defining ContextLoaderListener or ContextLoaderServlet in it's web.xml.\n+\n+*Configuration files*\n+\n+In this example the Spring context is configured through a xml file.\n+\n+*employee-servlet.xml*\n+\n+```xml\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool-3.1.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd\">\n+\n+    <context:component-scan base-package=\"org.jboss.arquillian.spring.testsuite.beans.repository.impl\"/>\n+    <context:component-scan base-package=\"org.jboss.arquillian.spring.testsuite.beans.service.impl\"/>\n+    <context:component-scan base-package=\"org.jboss.arquillian.spring.testsuite.beans.controller\"/>\n+\n+    <mvc:annotation-driven />\n+\n+    <bean id=\"viewResolver\"\n+          class=\"org.springframework.web.servlet.view.UrlBasedViewResolver\">\n+        <property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\"/>\n+        <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n+        <property name=\"suffix\" value=\".jsp\"/>\n+    </bean>\n+\n+</beans>\n+```\n+\n+*Test*\n+\n+It is possible to inject into the test fully configured Spring MVC controller and run on it simple tests in\n+the container.\n+\n+```java\n+@RunWith(Arquillian.class)\n+@SpringWebConfiguration(servletName = \"employee\")\n+public class EmployeeControlerTestCase {\n+\n+    @Deployment\n+    @OverProtocol(\"Servlet 3.0\")\n+    public static WebArchive createTestArchive() {\n+        return ShrinkWrap.create(WebArchive.class, \"spring-test.war\")\n+                .addClasses(Employee.class,\n+                        EmployeeService.class, DefaultEmployeeService.class,\n+                        EmployeeRepository.class, DefaultEmployeeRepository.class, NullEmployeeRepository.class,\n+                        EmployeeController.class)\n+                .addAsLibraries(springDependencies())\n+                .addAsLibraries(mockitoDependencies())\n+                .addAsWebInfResource(\"mvc/web.xml\", \"web.xml\")\n+                .addAsWebInfResource(\"mvc/employee-servlet.xml\", \"employee-servlet.xml\")\n+                .addAsWebInfResource(\"mvc/applicationContext.xml\", \"applicationContext.xml\");\n+    }\n+\n+    /**\n+     * The injected {@link EmployeeController}.\n+     */\n+    @Autowired\n+    private EmployeeController employeeController;\n+\n+    /**\n+     * Tests {@link EmployeeController#getEmployees(org.springframework.ui.Model)} method.\n+     */\n+    @Test\n+    public void testGetEmployees() {\n+\n+        String result;\n+        Model model;\n+        ArgumentCaptor<List> argument;\n+\n+        assertNotNull(\"The controller hasn't been injected.\", employeeController);\n+\n+        model = mock(Model.class);\n+        argument = ArgumentCaptor.forClass(List.class);\n+\n+        result = employeeController.getEmployees(model);\n+\n+        verify(model).addAttribute(eq(\"employees\"), argument.capture());\n+        assertEquals(\"The controller returned invalid view name, 'employeeList' was expected.\", \"employeeList\", result);\n+        assertEquals(\"Two employees should be returned from model.\", 2, argument.getValue().size());\n+    }\n+}\n+```\n+\n+#### Java-based configuration (Servlet 3.0 only)\n+\n+Again, the above configuration can be also done without any piece of XML (even without a web.xml descriptor).\n+All thanks to WebApplicationInitializer which allows to set up the servlets programmatically.\n+\n+Instead of defining web.xml it is possible to write a simple class:\n+\n+```java\n+public class EmployeeWebInitializer implements WebApplicationInitializer {\n+\n+    public void onStartup(ServletContext servletContext) throws ServletException {\n+\n+        // creates the web app context\n+        AnnotationConfigWebApplicationContext webContext = new AnnotationConfigWebApplicationContext();\n+        webContext.register(WebAppConfig.class);\n+\n+        // registers context load listener\n+        servletContext.addListener(new ContextLoaderListener(new AnnotationConfigWebApplicationContext()));\n+\n+        // adds a dispatch servlet, the servlet will be configured from the created application context\n+        ServletRegistration.Dynamic servletConfig = servletContext.addServlet(\"employee\",\n+                new DispatcherServlet(webContext));\n+        servletConfig.setLoadOnStartup(1);\n+        servletConfig.addMapping(\"*.htm\");\n+    }\n+}\n+```\n+\n+Only what is left to do is define a configuration for the Spring context.\n+\n+```java\n+@Configuration\n+@EnableWebMvc\n+@ComponentScan(basePackages = {\n+        \"org.jboss.arquillian.spring.testsuite.beans.repository.impl\",\n+        \"org.jboss.arquillian.spring.testsuite.beans.service.impl\",\n+        \"org.jboss.arquillian.spring.testsuite.beans.controller\"})\n+public class WebAppConfig {\n+\n+    /**\n+     * <p>Retrieves instance of {@link ViewResolver}.</p>\n+     *\n+     * @return instance of {@link ViewResolver}\n+     */\n+    @Bean\n+    public ViewResolver viewResolver() {\n+        InternalResourceViewResolver resolver = new InternalResourceViewResolver();\n+        resolver.setPrefix(\"/WEB-INF/views/\");\n+        resolver.setSuffix(\".jsp\");\n+        return resolver;\n+    }\n+}\n+```\n+\n+*Test code*\n+\n+Now the test deployment doesn't require any kind of descriptors.\n+\n+```java\n+@RunWith(Arquillian.class)\n+@SpringWebConfiguration(servletName = \"employee\")\n+public class EmployeeControllerWebInitTestCase {\n+\n+    @Deployment\n+    @OverProtocol(\"Servlet 3.0\")\n+    public static WebArchive createTestArchive() {\n+        return ShrinkWrap.create(WebArchive.class, \"spring-test.war\")\n+                .addClasses(Employee.class,\n+                        EmployeeService.class, DefaultEmployeeService.class,\n+                        EmployeeRepository.class, DefaultEmployeeRepository.class, NullEmployeeRepository.class,\n+                        EmployeeController.class, WebAppConfig.class, EmployeeWebInitializer.class)\n+                .addAsLibraries(springDependencies())\n+                .addAsLibraries(mockitoDependencies());\n+    }\n+\n+    /**\n+     * The injected {@link EmployeeController}.\n+     */\n+    @Autowired\n+    private EmployeeController employeeController;\n+\n+    /**\n+     * Tests {@link EmployeeController#getEmployees(org.springframework.ui.Model)} method.\n+     */\n+    @Test\n+    public void testGetEmployees() {\n+\n+        String result;\n+        Model model;\n+        ArgumentCaptor<List> argument;\n+\n+        assertNotNull(\"The controller hasn't been injected.\", employeeController);\n+\n+        model = mock(Model.class);\n+        argument = ArgumentCaptor.forClass(List.class);\n+\n+        result = employeeController.getEmployees(model);\n+\n+        verify(model).addAttribute(eq(\"employees\"), argument.capture());\n+        assertEquals(\"The controller returned invalid view name, 'employeeList' was expected.\", \"employeeList\", result);\n+        assertEquals(\"Two employees should be returned from model.\", 2, argument.getValue().size());\n+    }\n+}\n+```\n+\n+## TODO\n+\n+* Showcase and working examples\n+* Arquillian Persistance Extension integration (https://community.jboss.org/message/733268#733268)\n+\n+## Build\n+\n+```\n+mvn clean install\n+```\n+\n+Available profiles (for running the integration tests in the container):\n+\n+* arquillian-jbossas-managed\n+* arquillian-glassfish-embedded\n\\ No newline at end of file"}],"committed_date":"2012-05-21T15:05:29-07:00","parents":[{"id":"78fa350345a50bc63ecc232c727b5a72e307de06"}],"message":"ARQ-301 Add support for Spring 2.5/3 Service Integration/Deployer\n\n* Injection of the Spring beans into tests classes\n\n* Xml based configuration\n\n* Java-based configuration for Spring 3 extension\n\n* Retrieving the application context for a web application, the root application context\n  or the context of specific FrameworkServlet.\n\n* Injection of spring beans through JSR-330 annotations (Spring 3 - only)\n\n* Registering custom context classes for all tests through arquillian.xml or for single\n  test case by specifing it in the annotation.\n\n* Auto package the spring-context, spring-web, cglib.\n\n* Auto package Snowdrop artifact.","tree":"4efbbed4daf25371fcbfcb924ae16850d7016ab6","added":[".gitignore","arquillian-service-deployer-spring-2.5-int-tests/pom.xml","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/controller/EmployeeController.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/model/Employee.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/repository/EmployeeRepository.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/repository/impl/DefaultEmployeeRepository.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/repository/impl/NullEmployeeRepository.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/service/EmployeeService.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/service/impl/DefaultEmployeeService.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/ApplicationContextTestCase.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/DefaultEmployeeRepositoryTestCase.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/DefaultEmployeeServiceTestCase.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/Deployments.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/EmployeeControlerTestCase.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/EmployeeControllerContextTestCase.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/NoConfigurationTestCase.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/NoMatchingBeanTestCase.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/NullEmployeeRepositoryTestCase.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/XmlConfigurationTestCase.java","arquillian-service-deployer-spring-2.5-int-tests/src/test/resources-glassfish/arquillian.xml","arquillian-service-deployer-spring-2.5-int-tests/src/test/resources-glassfish/mvc/web-context.xml","arquillian-service-deployer-spring-2.5-int-tests/src/test/resources-glassfish/mvc/web-servlet.xml","arquillian-service-deployer-spring-2.5-int-tests/src/test/resources-jbossas/arquillian.xml","arquillian-service-deployer-spring-2.5-int-tests/src/test/resources-jbossas/mvc/web-context.xml","arquillian-service-deployer-spring-2.5-int-tests/src/test/resources-jbossas/mvc/web-servlet.xml","arquillian-service-deployer-spring-2.5-int-tests/src/test/resources/applicationContext.xml","arquillian-service-deployer-spring-2.5-int-tests/src/test/resources/empty.xml","arquillian-service-deployer-spring-2.5-int-tests/src/test/resources/mvc/empty.xml","arquillian-service-deployer-spring-2.5-int-tests/src/test/resources/mvc/mvc-applicationContext.xml","arquillian-service-deployer-spring-2.5-int-tests/src/test/resources/repository.xml","arquillian-service-deployer-spring-2.5-int-tests/src/test/resources/service.xml","arquillian-service-deployer-spring-2.5/README.md","arquillian-service-deployer-spring-2.5/pom.xml","arquillian-service-deployer-spring-2.5/src/main/java/org/jboss/arquillian/spring/SpringExtensionConstants_2_5.java","arquillian-service-deployer-spring-2.5/src/main/java/org/jboss/arquillian/spring/client/Spring25EnricherArchiveAppender.java","arquillian-service-deployer-spring-2.5/src/main/java/org/jboss/arquillian/spring/client/Spring25EnricherExtension.java","arquillian-service-deployer-spring-2.5/src/main/java/org/jboss/arquillian/spring/container/Spring25EnricherRemoteExtension.java","arquillian-service-deployer-spring-2.5/src/main/java/org/jboss/arquillian/spring/dependency/Spring25DependencyResolver.java","arquillian-service-deployer-spring-2.5/src/main/java/org/jboss/arquillian/spring/dependency/Spring25DependencyResolverProducer.java","arquillian-service-deployer-spring-2.5/src/main/resources/META-INF/services/org.jboss.arquillian.core.spi.LoadableExtension","arquillian-service-deployer-spring-2.5/src/test/java/org/jboss/arquillian/spring/client/Spring25EnricherArchiveAppenderTestCase.java","arquillian-service-deployer-spring-2.5/src/test/java/org/jboss/arquillian/spring/client/Spring25EnricherExtensionTestCase.java","arquillian-service-deployer-spring-2.5/src/test/java/org/jboss/arquillian/spring/container/Spring25EnricherRemoteExtensionTestCase.java","arquillian-service-deployer-spring-2.5/src/test/java/org/jboss/arquillian/spring/dependency/Spring25DependencyResolverProducerTestCase.java","arquillian-service-deployer-spring-2.5/src/test/java/org/jboss/arquillian/spring/dependency/Spring25DependencyResolverTestCase.java","arquillian-service-deployer-spring-2.5/src/test/java/org/jboss/arquillian/spring/utils/TestReflectionHelper.java","arquillian-service-deployer-spring-2.5/src/test/java/org/jboss/arquillian/spring/utils/TestResourceHelper.java","arquillian-service-deployer-spring-3-int-tests/pom.xml","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/config/AppConfig.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/config/WebAppConfig.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/controller/EmployeeController.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/model/Employee.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/repository/EmployeeRepository.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/repository/impl/DefaultEmployeeRepository.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/repository/impl/NullEmployeeRepository.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/service/EmployeeService.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/service/impl/DefaultEmployeeService.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/web/EmployeeWebInitializer.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/beans/web/EmployeeWebRootInitializer.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/AnnotatedConfigurationTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/ApplicationContextTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/DefaultEmployeeRepositoryTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/DefaultEmployeeServiceTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/Deployments.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/EmployeeControlerTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/EmployeeControllerContextTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/EmployeeControllerContextWebInitTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/EmployeeControllerWebInitTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/NoConfigurationTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/NoMatchingBeanTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/NullEmployeeRepositoryTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/PackageConfigurationTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/java/org/jboss/arquillian/spring/testsuite/test/XmlConfigurationTestCase.java","arquillian-service-deployer-spring-3-int-tests/src/test/resources/applicationContext.xml","arquillian-service-deployer-spring-3-int-tests/src/test/resources/arquillian.xml","arquillian-service-deployer-spring-3-int-tests/src/test/resources/empty.xml","arquillian-service-deployer-spring-3-int-tests/src/test/resources/mvc/empty.xml","arquillian-service-deployer-spring-3-int-tests/src/test/resources/mvc/mvc-applicationContext.xml","arquillian-service-deployer-spring-3-int-tests/src/test/resources/mvc/web.xml","arquillian-service-deployer-spring-3-int-tests/src/test/resources/repository.xml","arquillian-service-deployer-spring-3-int-tests/src/test/resources/service.xml","arquillian-service-deployer-spring-3/README.md","arquillian-service-deployer-spring-3/pom.xml","arquillian-service-deployer-spring-3/src/main/java/org/jboss/arquillian/spring/SpringExtensionConstants_3.java","arquillian-service-deployer-spring-3/src/main/java/org/jboss/arquillian/spring/client/Spring3EnricherArchiveAppender.java","arquillian-service-deployer-spring-3/src/main/java/org/jboss/arquillian/spring/client/Spring3EnricherExtension.java","arquillian-service-deployer-spring-3/src/main/java/org/jboss/arquillian/spring/container/Spring3EnricherRemoteExtension.java","arquillian-service-deployer-spring-3/src/main/java/org/jboss/arquillian/spring/context/AnnotatedApplicationContextProducer.java","arquillian-service-deployer-spring-3/src/main/java/org/jboss/arquillian/spring/dependency/Spring3DependencyResolver.java","arquillian-service-deployer-spring-3/src/main/java/org/jboss/arquillian/spring/dependency/Spring3DependencyResolverProducer.java","arquillian-service-deployer-spring-3/src/main/java/org/jboss/arquillian/spring/test/annotation/SpringAnnotatedConfiguration.java","arquillian-service-deployer-spring-3/src/main/resources/META-INF/services/org.jboss.arquillian.core.spi.LoadableExtension","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/client/Spring3EnricherArchiveAppenderTestCase.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/client/Spring3EnricherExtensionTestCase.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/container/Spring3EnricherRemoteExtensionTestCase.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/context/AnnotatedApplicationContextProducerTestCase.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/dependency/Spring3DependencyResolverProducerTestCase.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/dependency/Spring3DependencyResolverTestCase.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/model/AnnotatedClassesCustomContextClass.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/model/AnnotatedPackagesCustomContextClass.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/model/ClassesAnnotatedClass.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/model/NoConfigAnnotatedClass.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/model/PackagesAnnotatedClass.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/model/PlainClass.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/model/TestConfig.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/utils/TestReflectionHelper.java","arquillian-service-deployer-spring-3/src/test/java/org/jboss/arquillian/spring/utils/TestResourceHelper.java","arquillian-service-deployer-spring-common/pom.xml","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/SpringExtensionConstants.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/client/AbstractSpringEnricherArchiveAppender.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/client/SpringExtensionConfigurationProducer.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/client/SpringProtocolArchiveProcessor.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/configuration/SpringExtensionConfiguration.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/configuration/SpringExtensionRemoteConfiguration.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/configuration/SpringExtensionRemoteConfigurationUtils.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/container/SecurityActions.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/container/SpringExtensionRemoteConfigurationProducer.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/container/SpringInjectionEnricher.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/context/AbstractApplicationContextProducer.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/context/ApplicationContextDestroyer.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/context/TestScopeApplicationContext.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/context/WebApplicationContextProducer.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/context/XmlApplicationContextProducer.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/dependency/AbstractDependencyResolver.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/dependency/AbstractDependencyResolverProducer.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/dependency/MavenDependencyBuilder.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/test/annotation/SpringConfiguration.java","arquillian-service-deployer-spring-common/src/main/java/org/jboss/arquillian/spring/test/annotation/SpringWebConfiguration.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/client/AbstractSpringEnricherArchiveAppenderTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/client/SpringExtensionConfigurationProducerTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/client/SpringProtocolArchiveProcessorTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/configuration/SpringExtensionConfigurationTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/configuration/SpringExtensionRemoteConfigurationTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/configuration/SpringExtensionRemoteConfigurationUtilsTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/container/SpringExtensionRemoteConfigurationProducerTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/container/SpringInjectionEnricherTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/context/AbstractApplicationContextProducerTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/context/ApplicationContextDestroyerTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/context/TestScopeApplicationContextTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/context/WebApplicationContextProducerTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/context/XmlApplicationContextProducerTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/dependency/AbstractDependencyResolverProducerTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/dependency/AbstractDependencyResolverTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/dependency/MavenDependencyBuilderTestCase.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/model/PlainClass.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/model/Strategy.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/model/StrategyImpl.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/model/StrategyTest.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/model/WebAnnotatedClass.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/model/XmlAnnotatedClass.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/model/XmlAnnotatedCustomContextClass.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/model/XmlAnnotatedMissingResourceClass.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/utils/TestReflectionHelper.java","arquillian-service-deployer-spring-common/src/test/java/org/jboss/arquillian/spring/utils/TestResourceHelper.java","arquillian-service-deployer-spring-common/src/test/resources/applicationContext.xml","arquillian-service-deployer-spring-common/src/test/resources/arquillian-spring-remote-configuration.properties","arquillian-service-deployer-spring-common/src/test/resources/arquillian.xml","arquillian-service-deployer-spring-common/src/test/resources/testApplicationContext.xml","pom.xml"],"committer":{"login":"aslakknutsen","email":"aslak@redhat.com","name":"Aslak Knutsen"},"url":"/arquillian/arquillian-extension-spring/commit/c285ed097e5332104ced9359c186bec65eb717b0","id":"c285ed097e5332104ced9359c186bec65eb717b0"}}