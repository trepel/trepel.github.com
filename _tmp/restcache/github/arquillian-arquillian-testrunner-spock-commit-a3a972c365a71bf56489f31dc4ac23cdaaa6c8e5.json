{"commit":{"tree":"29a886bc2a96a06bd1f3fe3769925d44df485bfe","parents":[{"id":"548bf4b3ac60ceec0aafbafdaa16b7c0b08f0a2b"}],"authored_date":"2011-11-01T05:33:56-07:00","id":"a3a972c365a71bf56489f31dc4ac23cdaaa6c8e5","url":"/arquillian/arquillian-testrunner-spock/commit/a3a972c365a71bf56489f31dc4ac23cdaaa6c8e5","committer":{"email":"antony@theanthouse.com","name":"Antony Blakey","login":""},"committed_date":"2011-11-01T05:33:56-07:00","message":"Select the proper test/spec method to run.\n\nBecause of the difference in Spock between the name of the feature e.g. \"This is the name of some spec\" and the actual method name .e.g $spock_feature_0_0, there's a bit more work involved in the logic to select which method to run. Arquillian passes the actual method name, but the JUnit filtering mechanism used in the Sputnik filter passes in the feature name. This commit makes sure that the correct method is selected.","author":{"email":"antony@theanthouse.com","name":"Antony Blakey","login":""},"modified":[{"filename":"container/src/main/java/org/jboss/arquillian/spock/container/SpockTestRunner.java","diff":"@@ -30,6 +30,7 @@\n import org.junit.runner.notification.RunNotifier;\n import org.spockframework.runtime.Sputnik;\n import org.spockframework.runtime.model.FeatureInfo;\n+import org.spockframework.runtime.model.MethodInfo;\n import org.spockframework.runtime.model.SpecInfo;\n \n /**\n@@ -76,14 +77,16 @@ public TestResult execute(final Class<?> testClass, final String methodName)\n             @Override\n             public boolean shouldRun(Description description)\n             {\n-               for(FeatureInfo feature : currentSpec.getAllFeatures())\n-               {\n-                  if(feature.getFeatureMethod().getReflection().getName().equals(methodName))\n-                  {\n-                     return true;\n+               // First, find the featureMethod corresponding to the description\n+               MethodInfo featureMethod = null;\n+               for(FeatureInfo feature : currentSpec.getAllFeatures()) {\n+                  if (feature.getFeatureMethod().getName().equals(description.getMethodName())) {\n+                     featureMethod = feature.getFeatureMethod();\n+                     break;\n                   }\n                }\n-               return false;\n+               // Is it the one we want to run?\n+               return featureMethod.getReflection().getName().equals(methodName);\n             }\n             \n             @Override"}]}}