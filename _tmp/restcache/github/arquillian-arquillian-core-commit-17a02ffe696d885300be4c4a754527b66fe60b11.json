{"commit":{"tree":"a9fcac04f5737bd6e9193ff14770ffbb9ccee796","committed_date":"2012-04-12T05:59:53-07:00","authored_date":"2012-04-12T00:45:50-07:00","committer":{"login":"aslakknutsen","email":"aslak@redhat.com","name":"Aslak Knutsen"},"url":"/arquillian/arquillian-core/commit/17a02ffe696d885300be4c4a754527b66fe60b11","parents":[{"id":"5c049f052639cf9ed5c106029b270570a705c9db"}],"message":"ARQ-846 Protect ExceptionProxy againts Non-Serializable origin","author":{"login":"","email":"bernard.labno@pjwstk.edu.pl","name":"Bernard Labno"},"modified":[{"diff":"@@ -20,6 +20,7 @@\n import java.io.ByteArrayOutputStream;\n import java.io.Externalizable;\n import java.io.IOException;\n+import java.io.NotSerializableException;\n import java.io.ObjectInput;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutput;\n@@ -66,6 +67,8 @@\n \n    private Throwable original;\n \n+   private boolean deserializationProblem = false;\n+\n    public ExceptionProxy() {}\n \n    public ExceptionProxy(Throwable throwable)\n@@ -104,7 +107,8 @@ public Throwable createException()\n          return original;\n       }\n \n-      Throwable throwable = createProxyException(\"Original exception not deserilizable, ClassNotFoundException\"); //constructExceptionForClass(clazz);\n+      Throwable throwable = createProxyException(\n+            \"Original exception \" + (deserializationProblem ? \"not deserilizable, ClassNotFoundException\":\"not serializable, NotSerializableException\"));\n       throwable.setStackTrace(trace);\n       return throwable;\n    }\n@@ -190,13 +194,14 @@ public void readExternal(ObjectInput in) throws IOException, ClassNotFoundExcept\n //               }\n //            };\n             original = (Throwable)input.readObject();\n-            \n+\n             // reset the cause, so we can de-serialize them individual\n             SecurityActions.setFieldValue(Throwable.class, original, \"cause\", causeProxy.createException());\n          }\n          catch (Throwable e) // ClassNotFoundExcpetion / NoClassDefFoundError\n          {\n             // ignore, could not load class on client side, move on and create a fake 'proxy' later\n+            deserializationProblem = true;\n          }\n       }\n    }\n@@ -222,11 +227,15 @@ public void writeExternal(ObjectOutput out) throws IOException\n             // move on, try to serialize anyway\n          }\n \n-         ByteArrayOutputStream originalOut = new ByteArrayOutputStream();\n-         ObjectOutputStream output = new ObjectOutputStream(originalOut);\n-         output.writeObject(original);\n-         output.flush();\n-         originalBytes = originalOut.toByteArray();\n+          try {\n+              ByteArrayOutputStream originalOut = new ByteArrayOutputStream();\n+              ObjectOutputStream output = new ObjectOutputStream(originalOut);\n+              output.writeObject(original);\n+              output.flush();\n+              originalBytes = originalOut.toByteArray();\n+          } catch (NotSerializableException e) {\n+              // in case some class breaks Serialization contract\n+          }\n       }\n       out.writeObject(originalBytes);\n    }","filename":"test/spi/src/main/java/org/jboss/arquillian/test/spi/ExceptionProxy.java"},{"diff":"@@ -17,8 +17,15 @@\n  */\n package org.jboss.arquillian.test.spi;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.lang.reflect.Constructor;\n \n+import junit.framework.Assert;\n+\n import org.junit.Test;\n \n /**\n@@ -49,9 +56,28 @@ public void shouldProxyUnsatisfiedResolutionException() throws Throwable\n       proxy(new UnsatisfiedResolutionException(new Exception(MSG)));\n    }\n \n-   private void proxy(Throwable throwable) throws Throwable\n+   @Test\n+   public void shouldSerializeNonSerializableExceptions() throws Exception\n    {\n+      ExceptionProxy proxy = serialize(ExceptionProxy.createForException(new NonSerializableException()));\n+      Throwable t = proxy.createException();\n \n+      Assert.assertEquals(ArquillianProxyException.class, t.getClass());\n+      Assert.assertEquals(NullPointerException.class, t.getCause().getClass());\n+   }\n+\n+   private ExceptionProxy serialize(ExceptionProxy proxy) throws Exception\n+   {\n+      ByteArrayOutputStream output = new ByteArrayOutputStream();\n+      ObjectOutputStream out = new ObjectOutputStream(output);\n+      out.writeObject(proxy);\n+\n+      ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(output.toByteArray()));\n+      return (ExceptionProxy)in.readObject();\n+   }\n+\n+   private void proxy(Throwable throwable) throws Throwable\n+   {\n       //printConstructors(throwable);\n       \n       throw ExceptionProxy.createForException(throwable).createException();\n@@ -156,4 +182,17 @@ public InjectionException(Throwable throwable)\n       }\n    }\n \n+   public static class NonSerializableException extends RuntimeException\n+   {\n+      private static final long serialVersionUID = 1L;\n+\n+      @SuppressWarnings(\"unused\")\n+      private InputStream input;\n+\n+      public NonSerializableException()\n+      {\n+         super(new NullPointerException());\n+         input = System.in;\n+      }\n+   }\n }","filename":"test/spi/src/test/java/org/jboss/arquillian/test/spi/ExceptionProxyTestCase.java"}],"id":"17a02ffe696d885300be4c4a754527b66fe60b11"}}