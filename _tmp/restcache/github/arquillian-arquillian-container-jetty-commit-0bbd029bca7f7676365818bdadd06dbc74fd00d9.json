{"commit":{"parents":[{"id":"3af6fdc0bac83d9b2c7ee4428e3b4fb582979b9f"}],"added":["containers/jetty-embedded-7/src/main/java/org/jboss/arquillian/container/jetty/embedded_7/VersionUtil.java","containers/jetty-embedded-7/src/test/java/org/jboss/arquillian/container/jetty/embedded_7/VersionUtilTestCase.java"],"message":"ARQ-399 Add version check to JettyContainer to add the renamed configuration classes for Jetty-Pluss 7.2+. Open configuration so configurationClasses so they can be manually controlled.","tree":"bfd02d7e1dda8051f61dc9df484f5f899c422bf8","modified":[{"filename":"containers/jetty-embedded-6.1/src/main/java/org/jboss/arquillian/container/jetty/embedded_6_1/JettyEmbeddedConfiguration.java","diff":"@@ -34,6 +34,8 @@\n \n    private boolean jettyPlus = true;\n \n+   private String configurationClasses;\n+\n    /* (non-Javadoc)\n     * @see org.jboss.arquillian.spi.client.container.ContainerConfiguration#validate()\n     */\n@@ -71,4 +73,17 @@ public void setJettyPlus(boolean jettyPlus)\n    {\n       this.jettyPlus = jettyPlus;\n    }\n+   \n+   public String getConfigurationClasses()\n+   {\n+      return configurationClasses;\n+   }\n+\n+   /**\n+    * @param configurationClasses A comma separated list of fully qualified configuration classes\n+    */\n+   public void setConfigurationClasses(String configurationClasses)\n+   {\n+      this.configurationClasses = configurationClasses;\n+   }\n }"},{"filename":"containers/jetty-embedded-6.1/src/main/java/org/jboss/arquillian/container/jetty/embedded_6_1/JettyEmbeddedContainer.java","diff":"@@ -76,6 +76,8 @@\n \n    private Server server;\n \n+   private String[] configurationClasses = null;\n+\n    private JettyEmbeddedConfiguration containerConfig;\n    \n    @Inject @DeploymentScoped\n@@ -104,6 +106,18 @@ public void start() throws LifecycleException\n    {\n       try \n       {\n+         // explicit configuration classes, as they have changed between jetty7 minor versions\n+         String configuredConfigurationClasses = containerConfig.getConfigurationClasses();\n+         if (configuredConfigurationClasses != null && configuredConfigurationClasses.trim().length() > 0)\n+         {\n+            this.configurationClasses = configuredConfigurationClasses.split(\",\");\n+         }\n+         else if (containerConfig.isJettyPlus())\n+         {\n+            // Jetty plus is required to support in-container invocation and enrichment\n+            configurationClasses = JETTY_PLUS_CONFIGURATION_CLASSES;\n+         }\n+\n          server = new Server();\n          Connector connector = new SelectChannelConnector();\n          connector.setHost(containerConfig.getBindAddress());\n@@ -150,10 +164,9 @@ public ProtocolMetaData deploy(final Archive<?> archive) throws DeploymentExcept\n       try \n       {\n          WebAppContext wctx = archive.as(ShrinkWrapWebAppContext.class);\n-         // Jetty plus is required to support in-container invocation and enrichment\n-         if (containerConfig.isJettyPlus())\n+         if (configurationClasses != null)\n          {\n-            wctx.setConfigurationClasses(JETTY_PLUS_CONFIGURATION_CLASSES);\n+            wctx.setConfigurationClasses(configurationClasses);\n          }\n          // possible configuration parameters\n          wctx.setExtractWAR(true);"},{"filename":"containers/jetty-embedded-7/src/main/java/org/jboss/arquillian/container/jetty/embedded_7/JettyEmbeddedConfiguration.java","diff":"@@ -24,6 +24,7 @@\n  * the Jetty Embedded 7.x and 8.x containers.\n  *\n  * @author Dan Allen\n+ * @author Ales Justin\n  * @version $Revision: $\n  */\n public class JettyEmbeddedConfiguration implements ContainerConfiguration\n@@ -34,6 +35,8 @@\n \n    private boolean jettyPlus = true;\n \n+   private String configurationClasses;\n+\n    /* (non-Javadoc)\n     * @see org.jboss.arquillian.spi.client.container.ContainerConfiguration#validate()\n     */\n@@ -71,4 +74,17 @@ public void setJettyPlus(boolean jettyPlus)\n    {\n       this.jettyPlus = jettyPlus;\n    }\n+\n+   public String getConfigurationClasses()\n+   {\n+      return configurationClasses;\n+   }\n+\n+   /**\n+    * @param configurationClasses A comma separated list of fully qualified configuration classes\n+    */\n+   public void setConfigurationClasses(String configurationClasses)\n+   {\n+      this.configurationClasses = configurationClasses;\n+   }\n }"},{"filename":"containers/jetty-embedded-7/src/main/java/org/jboss/arquillian/container/jetty/embedded_7/JettyEmbeddedContainer.java","diff":"@@ -49,13 +49,14 @@\n  * running in-container. However, the container is still configured properly during setup.</p>\n  *\n  * @author Dan Allen\n+ * @author Ales Justin\n  * @version $Revision: $\n  */\n public class JettyEmbeddedContainer implements DeployableContainer<JettyEmbeddedConfiguration>\n {\n    public static final String HTTP_PROTOCOL = \"http\";\n \n-   public static final String[] JETTY_PLUS_CONFIGURATION_CLASSES =\n+   public static final String[] JETTY_PLUS_PRE_7_2_CONFIGURATION_CLASSES =\n    {\n        \"org.eclipse.jetty.webapp.WebInfConfiguration\",\n        \"org.eclipse.jetty.webapp.WebXmlConfiguration\",\n@@ -66,9 +67,22 @@\n        \"org.eclipse.jetty.webapp.JettyWebXmlConfiguration\"\n    };\n \n+   public static final String[] JETTY_PLUS_CONFIGURATION_CLASSES =\n+   {\n+       \"org.eclipse.jetty.webapp.WebInfConfiguration\",\n+       \"org.eclipse.jetty.webapp.WebXmlConfiguration\",\n+       \"org.eclipse.jetty.webapp.MetaInfConfiguration\",\n+       \"org.eclipse.jetty.webapp.FragmentConfiguration\",\n+       \"org.eclipse.jetty.plus.webapp.EnvConfiguration\",\n+       \"org.eclipse.jetty.plus.webapp.PlusConfiguration\",\n+       \"org.eclipse.jetty.webapp.JettyWebXmlConfiguration\"\n+   };\n+\n    private static final Logger log = Logger.getLogger(JettyEmbeddedContainer.class.getName());\n \n    private Server server;\n+   \n+   private String[] configurationClasses = null;\n \n    private JettyEmbeddedConfiguration containerConfig;\n \n@@ -104,6 +118,24 @@ public void start() throws LifecycleException\n    {\n       try \n       {\n+         // explicit configuration classes, as they have changed between jetty7 minor versions\n+         String configuredConfigurationClasses = containerConfig.getConfigurationClasses();\n+         if (configuredConfigurationClasses != null && configuredConfigurationClasses.trim().length() > 0)\n+         {\n+            this.configurationClasses = configuredConfigurationClasses.split(\",\");\n+         }\n+         else if (containerConfig.isJettyPlus())\n+         {\n+            if(VersionUtil.isGraterThenOrEqual(Server.getVersion(), \"7.2\"))\n+            {\n+               configurationClasses = JETTY_PLUS_CONFIGURATION_CLASSES;\n+            }\n+            else\n+            {\n+               configurationClasses = JETTY_PLUS_PRE_7_2_CONFIGURATION_CLASSES;\n+            }\n+         }\n+         \n          server = new Server();\n          Connector connector = new SelectChannelConnector();\n          connector.setHost(containerConfig.getBindAddress());\n@@ -153,11 +185,12 @@ public ProtocolMetaData deploy(final Archive<?> archive) throws DeploymentExcept\n       try \n       {\n          WebAppContext wctx = archive.as(ShrinkWrapWebAppContext.class);\n-         // Jetty plus is required to support in-container invocation and enrichment\n-         if (containerConfig.isJettyPlus())\n+\n+         if(configurationClasses != null)\n          {\n-            wctx.setConfigurationClasses(JETTY_PLUS_CONFIGURATION_CLASSES);\n+            wctx.setConfigurationClasses(configurationClasses);\n          }\n+\n          // possible configuration parameters\n          wctx.setExtractWAR(true);\n          wctx.setLogUrlOnStart(true);"}],"committer":{"email":"aslak@redhat.com","login":"aslakknutsen","name":"Aslak Knutsen"},"authored_date":"2011-02-24T07:23:34-08:00","url":"/arquillian/arquillian-container-jetty/commit/0bbd029bca7f7676365818bdadd06dbc74fd00d9","committed_date":"2011-03-22T13:11:29-07:00","id":"0bbd029bca7f7676365818bdadd06dbc74fd00d9","author":{"email":"ales.justin@gmail.com","login":"alesj","name":"Ales Justin"}}}