{"commit":{"id":"ed1eaae5959bf2881c681fe10c8daec3aba81166","message":"don't expose internal operations","committer":{"name":"Emanuel Muckenhuber","email":"emuckenh@redhat.com","login":"emuckenhuber"},"committed_date":"2011-03-08T08:14:54-08:00","url":"/jbossas/jboss-as/commit/ed1eaae5959bf2881c681fe10c8daec3aba81166","authored_date":"2011-03-08T04:12:07-08:00","added":["controller/src/main/java/org/jboss/as/controller/registry/OperationEntry.java"],"parents":[{"id":"f9914f3edd83c947bb29579e1775a205709b4455"}],"author":{"name":"Emanuel Muckenhuber","email":"emuckenh@redhat.com","login":"emuckenhuber"},"modified":[{"filename":"arquillian/service/src/main/java/org/jboss/as/arquillian/parser/ArquillianExtension.java","diff":"@@ -22,8 +22,6 @@\n \n package org.jboss.as.arquillian.parser;\n \n-import org.jboss.as.controller.BasicOperationResult;\n-import org.jboss.as.controller.OperationResult;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DESCRIBE;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n@@ -35,10 +33,12 @@\n import javax.xml.stream.XMLStreamConstants;\n import javax.xml.stream.XMLStreamException;\n \n+import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.Extension;\n import org.jboss.as.controller.ExtensionContext;\n import org.jboss.as.controller.ModelQueryOperationHandler;\n import org.jboss.as.controller.OperationContext;\n+import org.jboss.as.controller.OperationResult;\n import org.jboss.as.controller.ResultHandler;\n import org.jboss.as.controller.SubsystemRegistration;\n import org.jboss.as.controller.descriptions.DescriptionProvider;\n@@ -49,6 +49,7 @@\n import org.jboss.as.controller.parsing.ParseUtils;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.staxmapper.XMLElementReader;\n import org.jboss.staxmapper.XMLElementWriter;\n@@ -70,7 +71,7 @@ public void initialize(ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(ArquillianProviders.SUBSYSTEM);\n         registration.registerOperationHandler(ADD, ArquillianSubsystemAdd.INSTANCE, ArquillianProviders.SUBSYSTEM_ADD, false);\n-        registration.registerOperationHandler(DESCRIBE, ArquillianSubsystemDescribeHandler.INSTANCE, ArquillianSubsystemDescribeHandler.INSTANCE, false);\n+        registration.registerOperationHandler(DESCRIBE, ArquillianSubsystemDescribeHandler.INSTANCE, ArquillianSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n         subsystem.registerXMLElementWriter(parser);\n     }\n "},{"filename":"connector/src/main/java/org/jboss/as/connector/subsystems/connector/ConnectorExtension.java","diff":"@@ -65,6 +65,7 @@\n import org.jboss.as.controller.parsing.ExtensionParsingContext;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.logging.Logger;\n import org.jboss.staxmapper.XMLElementReader;\n@@ -91,7 +92,7 @@ public void initialize(final ExtensionContext context) {\n         final ModelNodeRegistration subsystem = registration.registerSubsystemModel(SUBSYSTEM);\n         subsystem.registerOperationHandler(ADD, ConnectorSubsystemAdd.INSTANCE, SUBSYSTEM_ADD_DESC, false);\n         subsystem.registerOperationHandler(REMOVE, ConnectorSubSystemRemove.INSTANCE, SUBSYSTEM_REMOVE_DESC, false);\n-        subsystem.registerOperationHandler(DESCRIBE, ConnectorSubsystemDescribeHandler.INSTANCE, ConnectorSubsystemDescribeHandler.INSTANCE, false);\n+        subsystem.registerOperationHandler(DESCRIBE, ConnectorSubsystemDescribeHandler.INSTANCE, ConnectorSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n     }\n \n     @Override"},{"filename":"connector/src/main/java/org/jboss/as/connector/subsystems/datasources/DataSourcesExtension.java","diff":"@@ -101,6 +101,7 @@\n import org.jboss.as.controller.parsing.ParseUtils;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.jca.common.api.metadata.common.CommonPool;\n import org.jboss.jca.common.api.metadata.common.CommonXaPool;\n@@ -140,7 +141,7 @@ public void initialize(final ExtensionContext context) {\n         final ModelNodeRegistration subsystem = registration.registerSubsystemModel(SUBSYSTEM);\n         subsystem.registerOperationHandler(ADD, DataSourcesSubsystemAdd.INSTANCE, SUBSYSTEM_ADD_DESC, false);\n         subsystem.registerOperationHandler(DESCRIBE, DataSourcesSubsystemDescribeHandler.INSTANCE,\n-                DataSourcesSubsystemDescribeHandler.INSTANCE, false);\n+                DataSourcesSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n \n     }\n "},{"filename":"connector/src/main/java/org/jboss/as/connector/subsystems/resourceadapters/ResourceAdaptersExtension.java","diff":"@@ -84,6 +84,7 @@\n import org.jboss.as.controller.parsing.ExtensionParsingContext;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.jca.common.api.metadata.common.CommonAdminObject;\n import org.jboss.jca.common.api.metadata.common.CommonConnDef;\n@@ -120,7 +121,7 @@ public void initialize(final ExtensionContext context) {\n         // Remoting subsystem description and operation handlers\n         final ModelNodeRegistration subsystem = registration.registerSubsystemModel(SUBSYSTEM);\n         subsystem.registerOperationHandler(ADD, ResourceAdaptersSubsystemAdd.INSTANCE, SUBSYSTEM_ADD_DESC, false);\n-        subsystem.registerOperationHandler(DESCRIBE, ResourceAdaptersSubsystemDescribeHandler.INSTANCE, ResourceAdaptersSubsystemDescribeHandler.INSTANCE, false);\n+        subsystem.registerOperationHandler(DESCRIBE, ResourceAdaptersSubsystemDescribeHandler.INSTANCE, ResourceAdaptersSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n \n     }\n "},{"filename":"controller/src/main/java/org/jboss/as/controller/BasicModelController.java","diff":"@@ -63,6 +63,7 @@\n import org.jboss.as.controller.persistence.ConfigurationPersister;\n import org.jboss.as.controller.persistence.ConfigurationPersisterProvider;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.dmr.ModelType;\n import org.jboss.dmr.Property;\n@@ -287,7 +288,7 @@ protected void registerInternalOperations() {\n             // Ugly. We register a handler for reading the config as xml to avoid leaking internals\n             // via the ModelController or OperationContext interfaces.\n             XmlMarshallingHandler handler = new XmlMarshallingHandler();\n-            this.registry.registerOperationHandler(CommonDescriptions.READ_CONFIG_AS_XML, handler, handler, false);\n+            this.registry.registerOperationHandler(CommonDescriptions.READ_CONFIG_AS_XML, handler, handler, false, OperationEntry.EntryType.PRIVATE);\n         }\n     }\n "},{"filename":"controller/src/main/java/org/jboss/as/controller/operations/global/GlobalOperationHandlers.java","diff":"@@ -43,6 +43,7 @@\n import java.util.Iterator;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicInteger;\n \n@@ -66,6 +67,7 @@\n import org.jboss.as.controller.registry.AttributeAccess.AccessType;\n import org.jboss.as.controller.registry.AttributeAccess.Storage;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n \n /**\n@@ -343,12 +345,14 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) throws OperationFailedException {\n             try {\n                 final ModelNodeRegistration registry = context.getRegistry();\n-                final Map<String, DescriptionProvider> descriptionProviders = registry.getOperationDescriptions(PathAddress.pathAddress(operation.require(ADDRESS)), true);\n+                final Map<String, OperationEntry> operations = registry.getOperationDescriptions(PathAddress.pathAddress(operation.require(ADDRESS)), true);\n \n                 final ModelNode result = new ModelNode();\n-                if (descriptionProviders.size() > 0) {\n-                    for (final String s : descriptionProviders.keySet()) {\n-                        result.add(s);\n+                if (operations.size() > 0) {\n+                    for(final Entry<String, OperationEntry> entry : operations.entrySet()) {\n+                        if(entry.getValue().getType() == OperationEntry.EntryType.PUBLIC) {\n+                            result.add(entry.getKey());\n+                        }\n                     }\n                 } else {\n                     result.setEmptyList();\n@@ -416,11 +420,14 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         private void addDescription(final OperationContext context, final ModelNode result, final boolean recursive, final boolean operations, final ModelNodeRegistration registry, final PathAddress address, final Locale locale) throws OperationFailedException {\n \n             if (operations) {\n-                final Map<String, DescriptionProvider> ops = registry.getOperationDescriptions(address, true);\n+                final Map<String, OperationEntry> ops = registry.getOperationDescriptions(address, true);\n                 if (ops.size() > 0) {\n \n-                    for (final Map.Entry<String, DescriptionProvider> entry : ops.entrySet()) {\n-                        result.get(OPERATIONS, entry.getKey()).set(entry.getValue().getModelDescription(locale));\n+                    for (final Map.Entry<String, OperationEntry> entry : ops.entrySet()) {\n+                        if(entry.getValue().getType() == OperationEntry.EntryType.PUBLIC) {\n+                            final DescriptionProvider provider = entry.getValue().getDescriptionProvider();\n+                            result.get(OPERATIONS, entry.getKey()).set(provider.getModelDescription(locale));\n+                        }\n                     }\n \n                 } else {"},{"filename":"controller/src/main/java/org/jboss/as/controller/registry/AbstractNodeRegistration.java","diff":"@@ -22,18 +22,19 @@\n \n package org.jboss.as.controller.registry;\n \n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.ListIterator;\n import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n \n import org.jboss.as.controller.OperationHandler;\n import org.jboss.as.controller.PathAddress;\n import org.jboss.as.controller.PathElement;\n import org.jboss.as.controller.ProxyController;\n import org.jboss.as.controller.descriptions.DescriptionProvider;\n+import org.jboss.as.controller.registry.OperationEntry.EntryType;\n \n /**\n  * A registry of model node information.  This registry is thread-safe.\n@@ -56,7 +57,19 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public abstract void registerOperationHandler(final String operationName, final OperationHandler handler, final DescriptionProvider descriptionProvider, final boolean inherited);\n+    public void registerOperationHandler(String operationName, OperationHandler handler, DescriptionProvider descriptionProvider) {\n+        registerOperationHandler(operationName, handler, descriptionProvider, false);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void registerOperationHandler(final String operationName, final OperationHandler handler, final DescriptionProvider descriptionProvider, final boolean inherited) {\n+        registerOperationHandler(operationName, handler, descriptionProvider, inherited, OperationEntry.EntryType.PUBLIC);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public abstract void registerOperationHandler(String operationName, OperationHandler handler, DescriptionProvider descriptionProvider, boolean inherited, EntryType entryType);\n \n     /** {@inheritDoc} */\n     @Override\n@@ -95,13 +108,13 @@ public AttributeAccess getAttributeAccess(final PathAddress address, final Strin\n      * @return the handlers\n      */\n     @Override\n-    public Map<String, DescriptionProvider> getOperationDescriptions(final PathAddress address, boolean inherited) {\n-        Map<String, DescriptionProvider> providers = new HashMap<String, DescriptionProvider>();\n+    public Map<String, OperationEntry> getOperationDescriptions(final PathAddress address, boolean inherited) {\n+        Map<String, OperationEntry> providers = new TreeMap<String, OperationEntry>();\n         getOperationDescriptions(address.iterator(), providers, inherited);\n         return providers;\n     }\n \n-    abstract void getOperationDescriptions(ListIterator<PathElement> iterator, Map<String, DescriptionProvider> providers, boolean inherited);\n+    abstract void getOperationDescriptions(ListIterator<PathElement> iterator, Map<String, OperationEntry> providers, boolean inherited);\n \n     /** {@inheritDoc} */\n     @Override"},{"filename":"controller/src/main/java/org/jboss/as/controller/registry/AttributeAccess.java","diff":"@@ -28,7 +28,7 @@\n  *\n  * @author Brian Stansberry\n  */\n-public class AttributeAccess {\n+public final class AttributeAccess {\n \n     /**\n      * The {@link AttributeAccess.AccessType}."},{"filename":"controller/src/main/java/org/jboss/as/controller/registry/ConcreteNodeRegistration.java","diff":"@@ -39,6 +39,7 @@\n import org.jboss.as.controller.descriptions.DescriptionProvider;\n import org.jboss.as.controller.registry.AttributeAccess.AccessType;\n import org.jboss.as.controller.registry.AttributeAccess.Storage;\n+import org.jboss.as.controller.registry.OperationEntry.EntryType;\n import org.jboss.dmr.ModelNode;\n \n final class ConcreteNodeRegistration extends AbstractNodeRegistration {\n@@ -95,13 +96,13 @@ OperationHandler getHandler(final ListIterator<PathElement> iterator, final Stri\n     }\n \n     @Override\n-    void getOperationDescriptions(final ListIterator<PathElement> iterator, final Map<String, DescriptionProvider> providers, final boolean inherited) {\n+    void getOperationDescriptions(final ListIterator<PathElement> iterator, final Map<String, OperationEntry> providers, final boolean inherited) {\n \n         if (!iterator.hasNext() || inherited) {\n             for (final Map.Entry<String, OperationEntry> entry : operationsUpdater.get(this).entrySet()) {\n                 if (!providers.containsKey(entry.getKey())) {\n                     if (!iterator.hasNext() || (inherited && entry.getValue().isInherited())) {\n-                        providers.put(entry.getKey(), entry.getValue().getDescriptionProvider());\n+                        providers.put(entry.getKey(), entry.getValue());\n                     }\n                 }\n             }\n@@ -123,8 +124,8 @@ void getOperationDescriptions(final ListIterator<PathElement> iterator, final Ma\n     }\n \n     @Override\n-    public void registerOperationHandler(final String operationName, final OperationHandler handler, final DescriptionProvider descriptionProvider, final boolean inherited) {\n-        if (operationsUpdater.putIfAbsent(this, operationName, new OperationEntry(handler, descriptionProvider, inherited)) != null) {\n+    public void registerOperationHandler(final String operationName, final OperationHandler handler, final DescriptionProvider descriptionProvider, final boolean inherited, EntryType entryType) {\n+        if (operationsUpdater.putIfAbsent(this, operationName, new OperationEntry(handler, descriptionProvider, inherited, entryType)) != null) {\n             throw new IllegalArgumentException(\"A handler named '\" + operationName + \"' is already registered at location '\" + getLocationString() + \"'\");\n         }\n     }\n@@ -374,29 +375,5 @@ void resolveAddress(PathAddress address, PathAddress base, Set<PathAddress> addr\n         }\n     }\n \n-\n-    private static final class OperationEntry {\n-        private final OperationHandler operationHandler;\n-        private final DescriptionProvider descriptionProvider;\n-        private final boolean inherited;\n-\n-        private OperationEntry(final OperationHandler operationHandler, final DescriptionProvider descriptionProvider, final boolean inherited) {\n-            this.operationHandler = operationHandler;\n-            this.descriptionProvider = descriptionProvider;\n-            this.inherited = inherited;\n-        }\n-\n-        OperationHandler getOperationHandler() {\n-            return operationHandler;\n-        }\n-\n-        DescriptionProvider getDescriptionProvider() {\n-            return descriptionProvider;\n-        }\n-\n-        boolean isInherited() {\n-            return inherited;\n-        }\n-    }\n }\n "},{"filename":"controller/src/main/java/org/jboss/as/controller/registry/ModelNodeRegistration.java","diff":"@@ -54,11 +54,35 @@\n      * @param operationName the operation name\n      * @param handler the operation handler\n      * @param descriptionProvider the description provider for this operation\n-     * @param inherited {@code true} if the operation is inherited to child nodes, {@code false} otherwise  @throws IllegalArgumentException if either parameter is {@code null}\n+     * @throws IllegalArgumentException if either parameter is {@code null}\n+     */\n+    void registerOperationHandler(String operationName, OperationHandler handler, DescriptionProvider descriptionProvider);\n+\n+    /**\n+     * Register an operation handler for this model node.\n+     *\n+     * @param operationName the operation name\n+     * @param handler the operation handler\n+     * @param descriptionProvider the description provider for this operation\n+     * @param inherited {@code true} if the operation is inherited to child nodes, {@code false} otherwise\n+     * @throws IllegalArgumentException if either parameter is {@code null}\n      */\n     void registerOperationHandler(String operationName, OperationHandler handler, DescriptionProvider descriptionProvider, boolean inherited);\n \n     /**\n+     * Register an operation handler for this model node.\n+     *\n+     * @param operationName the operation name\n+     * @param handler the operation handler\n+     * @param descriptionProvider the description provider for this operation\n+     * @param inherited {@code true} if the operation is inherited to child nodes, {@code false} otherwise\n+     * @param entryType the operation entry type\n+     * @throws IllegalArgumentException if either parameter is {@code null}\n+     */\n+    void registerOperationHandler(String operationName, OperationHandler handler, DescriptionProvider descriptionProvider, boolean inherited, OperationEntry.EntryType entryType);\n+\n+\n+    /**\n      * Records that the given attribute can be both read from and written to, and\n      * provides operation handlers for the read and the write.\n      *\n@@ -174,7 +198,7 @@\n      * @param inherited true to include inherited operations\n      * @return the operation map\n      */\n-    Map<String, DescriptionProvider> getOperationDescriptions(PathAddress address, boolean inherited);\n+    Map<String, OperationEntry> getOperationDescriptions(PathAddress address, boolean inherited);\n \n     /**\n      * If there is a proxy controller registered under any part of the registered address it will be returned."},{"filename":"controller/src/main/java/org/jboss/as/controller/registry/NodeSubregistry.java","diff":"@@ -99,7 +99,7 @@ OperationHandler getHandler(final ListIterator<PathElement> iterator, final Stri\n         }\n     }\n \n-    void getHandlers(final ListIterator<PathElement> iterator, final String child, final Map<String, DescriptionProvider> providers, final boolean inherited) {\n+    void getHandlers(final ListIterator<PathElement> iterator, final String child, final Map<String, OperationEntry> providers, final boolean inherited) {\n         final Map<String, AbstractNodeRegistration> snapshot = childRegistriesUpdater.get(this);\n         final AbstractNodeRegistration childRegistry = snapshot.get(child);\n         final AbstractNodeRegistration wildcardRegistry = snapshot.get(\"*\");"},{"filename":"controller/src/main/java/org/jboss/as/controller/registry/ProxyControllerRegistration.java","diff":"@@ -33,6 +33,7 @@\n import org.jboss.as.controller.PathElement;\n import org.jboss.as.controller.ProxyController;\n import org.jboss.as.controller.descriptions.DescriptionProvider;\n+import org.jboss.as.controller.registry.OperationEntry.EntryType;\n \n /**\n  * @author <a href=\"mailto:david.lloyd@redhat.com\">David M. Lloyd</a>\n@@ -57,7 +58,7 @@ public ModelNodeRegistration registerSubModel(final PathElement address, final D\n     }\n \n     @Override\n-    public void registerOperationHandler(final String operationName, final OperationHandler handler, final DescriptionProvider descriptionProvider, final boolean inherited) {\n+    public void registerOperationHandler(final String operationName, final OperationHandler handler, final DescriptionProvider descriptionProvider, final boolean inherited, EntryType entryType) {\n         throw new IllegalArgumentException(\"A proxy handler is already registered at location '\" + getLocationString() + \"'\");\n     }\n \n@@ -87,7 +88,7 @@ public void unregisterProxyController(final PathElement address) throws IllegalA\n     }\n \n     @Override\n-    void getOperationDescriptions(final ListIterator<PathElement> iterator, final Map<String, DescriptionProvider> providers, final boolean inherited) {\n+    void getOperationDescriptions(final ListIterator<PathElement> iterator, final Map<String, OperationEntry> providers, final boolean inherited) {\n \n     }\n "},{"filename":"controller/src/test/java/org/jboss/as/controller/test/GlobalOperationsTestCase.java","diff":"@@ -83,10 +83,12 @@\n import org.jboss.as.controller.descriptions.DescriptionProvider;\n import org.jboss.as.controller.descriptions.common.CommonProviders;\n import org.jboss.as.controller.operations.global.GlobalOperationHandlers;\n+import org.jboss.as.controller.operations.global.GlobalOperationHandlers.ResolveAddressOperationHandler;\n import org.jboss.as.controller.operations.global.WriteAttributeHandlers;\n import org.jboss.as.controller.persistence.ConfigurationPersistenceException;\n import org.jboss.as.controller.persistence.ConfigurationPersister;\n import org.jboss.as.controller.registry.AttributeAccess;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.as.controller.registry.AttributeAccess.AccessType;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n import org.jboss.dmr.ModelNode;\n@@ -543,6 +545,7 @@ public void testReadResourceDescriptionWithOperationsOperation() throws Exceptio\n         assertTrue(ops.contains(READ_OPERATION_NAMES_OPERATION));\n         assertTrue(ops.contains(READ_RESOURCE_DESCRIPTION_OPERATION));\n         assertTrue(ops.contains(READ_RESOURCE_OPERATION));\n+        assertFalse(ops.contains(ResolveAddressOperationHandler.OPERATION_NAME));\n         for (String op : ops) {\n             assertEquals(op, result.require(OPERATIONS).require(op).require(OPERATION_NAME).asString());\n         }\n@@ -855,6 +858,8 @@ public ModelNode getModelDescription(Locale locale) {\n                 }\n             });\n \n+\n+            getRegistry().registerOperationHandler(GlobalOperationHandlers.ResolveAddressOperationHandler.OPERATION_NAME, GlobalOperationHandlers.RESOLVE, GlobalOperationHandlers.RESOLVE, false, OperationEntry.EntryType.PRIVATE);\n             getRegistry().registerOperationHandler(READ_RESOURCE_OPERATION, GlobalOperationHandlers.READ_RESOURCE, CommonProviders.READ_RESOURCE_PROVIDER, true);\n             getRegistry().registerOperationHandler(READ_ATTRIBUTE_OPERATION, GlobalOperationHandlers.READ_ATTRIBUTE, CommonProviders.READ_ATTRIBUTE_PROVIDER, true);\n             getRegistry().registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION, GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION, CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER, true);\n@@ -865,7 +870,6 @@ public ModelNode getModelDescription(Locale locale) {\n             getRegistry().registerOperationHandler(WRITE_ATTRIBUTE_OPERATION, GlobalOperationHandlers.WRITE_ATTRIBUTE, CommonProviders.WRITE_ATTRIBUTE_PROVIDER, true);\n \n \n-\n             ModelNodeRegistration profileReg = getRegistry().registerSubModel(PathElement.pathElement(\"profile\", \"*\"), new DescriptionProvider() {\n \n                 @Override"},{"filename":"domain-controller/src/main/java/org/jboss/as/domain/controller/DomainModelImpl.java","diff":"@@ -70,6 +70,7 @@\n import org.jboss.as.controller.persistence.ExtensibleConfigurationPersister;\n import org.jboss.as.controller.registry.AttributeAccess.Storage;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.as.domain.controller.descriptions.DomainDescriptionProviders;\n import org.jboss.as.domain.controller.operations.ProfileAddHandler;\n import org.jboss.as.domain.controller.operations.ProfileDescribeHandler;\n@@ -137,7 +138,8 @@ public ModelNode getDomainModel() {\n \n     protected ExtensionContext initialize(final ModelNodeRegistration root, final ExtensibleConfigurationPersister configurationPersister, final ModelNode model) {\n         // Global operations\n-        root.registerOperationHandler(GlobalOperationHandlers.ResolveAddressOperationHandler.OPERATION_NAME, GlobalOperationHandlers.RESOLVE, GlobalOperationHandlers.RESOLVE, false);\n+\n+        root.registerOperationHandler(GlobalOperationHandlers.ResolveAddressOperationHandler.OPERATION_NAME, GlobalOperationHandlers.RESOLVE, GlobalOperationHandlers.RESOLVE, false, OperationEntry.EntryType.PRIVATE);\n         root.registerOperationHandler(READ_RESOURCE_OPERATION, GlobalOperationHandlers.READ_RESOURCE, CommonProviders.READ_RESOURCE_PROVIDER, true);\n         root.registerOperationHandler(READ_ATTRIBUTE_OPERATION, GlobalOperationHandlers.READ_ATTRIBUTE, CommonProviders.READ_ATTRIBUTE_PROVIDER, true);\n         root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION, GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION, CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER, true);"},{"filename":"ee/src/main/java/org/jboss/as/ee/subsystem/EeExtension.java","diff":"@@ -49,6 +49,7 @@\n import org.jboss.as.controller.parsing.ParseUtils;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.staxmapper.XMLElementReader;\n import org.jboss.staxmapper.XMLElementWriter;\n@@ -73,7 +74,7 @@ public void initialize(ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(EeSubsystemProviders.SUBSYSTEM);\n         registration.registerOperationHandler(ADD, EeSubsystemAdd.INSTANCE, EeSubsystemProviders.SUBSYSTEM, false);\n-        registration.registerOperationHandler(DESCRIBE, EESubsystemDescribeHandler.INSTANCE, EESubsystemDescribeHandler.INSTANCE, false);\n+        registration.registerOperationHandler(DESCRIBE, EESubsystemDescribeHandler.INSTANCE, EESubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n         subsystem.registerXMLElementWriter(parser);\n     }\n "},{"filename":"host-controller/src/main/java/org/jboss/as/host/controller/HostModel.java","diff":"@@ -72,6 +72,7 @@\n import org.jboss.as.controller.persistence.ExtensibleConfigurationPersister;\n import org.jboss.as.controller.registry.AttributeAccess.Storage;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.as.host.controller.descriptions.HostDescriptionProviders;\n import org.jboss.as.host.controller.operations.ExtensionAddHandler;\n import org.jboss.as.host.controller.operations.ExtensionRemoveHandler;\n@@ -105,7 +106,7 @@ public HostModel(final ExtensibleConfigurationPersister configurationPersister)\n         // Register the operation handlers\n         ModelNodeRegistration root = getRegistry();\n         // Global operations\n-        root.registerOperationHandler(GlobalOperationHandlers.ResolveAddressOperationHandler.OPERATION_NAME, GlobalOperationHandlers.RESOLVE, GlobalOperationHandlers.RESOLVE, false);\n+        root.registerOperationHandler(GlobalOperationHandlers.ResolveAddressOperationHandler.OPERATION_NAME, GlobalOperationHandlers.RESOLVE, GlobalOperationHandlers.RESOLVE, false, OperationEntry.EntryType.PRIVATE);\n         root.registerOperationHandler(READ_RESOURCE_OPERATION, GlobalOperationHandlers.READ_RESOURCE, CommonProviders.READ_RESOURCE_PROVIDER, true);\n         root.registerOperationHandler(READ_ATTRIBUTE_OPERATION, GlobalOperationHandlers.READ_ATTRIBUTE, CommonProviders.READ_ATTRIBUTE_PROVIDER, true);\n         root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION, GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION, CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER, true);"},{"filename":"jaxrs/src/main/java/org/jboss/as/jaxrs/JaxrsExtension.java","diff":"@@ -50,6 +50,7 @@\n import org.jboss.as.controller.parsing.ExtensionParsingContext;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.logging.Logger;\n import org.jboss.staxmapper.XMLElementReader;\n@@ -79,7 +80,7 @@ public void initialize(final ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(SUBSYSTEM_DESCRIPTION);\n         registration.registerOperationHandler(ADD, JaxrsSubsystemAdd.INSTANCE, SUBSYSTEM_ADD_DESCRIPTION, false);\n-        registration.registerOperationHandler(DESCRIBE, JaxrsSubsystemDescribeHandler.INSTANCE, JaxrsSubsystemDescribeHandler.INSTANCE, false);\n+        registration.registerOperationHandler(DESCRIBE, JaxrsSubsystemDescribeHandler.INSTANCE, JaxrsSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n         subsystem.registerXMLElementWriter(parser);\n     }\n "},{"filename":"jmx/src/main/java/org/jboss/as/jmx/JMXExtension.java","diff":"@@ -50,6 +50,7 @@\n import org.jboss.as.controller.parsing.ParseUtils;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.staxmapper.XMLElementReader;\n import org.jboss.staxmapper.XMLElementWriter;\n@@ -74,7 +75,7 @@ public void initialize(ExtensionContext context) {\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(JMXSubsystemProviders.SUBSYSTEM);\n         // Subsystem operation handlers\n         registration.registerOperationHandler(ADD, JMXSubsystemAdd.INSTANCE, JMXSubsystemProviders.SUBSYTEM_ADD, false);\n-        registration.registerOperationHandler(DESCRIBE, JMXDescribeHandler.INSTANCE, JMXDescribeHandler.INSTANCE, false);\n+        registration.registerOperationHandler(DESCRIBE, JMXDescribeHandler.INSTANCE, JMXDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n         registration.registerOperationHandler(JMXConnectorAdd.OPERATION_NAME, JMXConnectorAdd.INSTANCE, JMXSubsystemProviders.JMX_CONNECTOR_ADD, false);\n         registration.registerOperationHandler(JMXConnectorRemove.OPERATION_NAME, JMXConnectorRemove.INSTANCE, JMXSubsystemProviders.JMX_CONNECTOR_REMOVE, false);\n "},{"filename":"logging/src/main/java/org/jboss/as/logging/LoggingExtension.java","diff":"@@ -39,6 +39,7 @@\n import org.jboss.as.controller.SubsystemRegistration;\n import org.jboss.as.controller.parsing.ExtensionParsingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n \n /**\n@@ -56,7 +57,7 @@ public void initialize(ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(LoggingSubsystemProviders.SUBSYSTEM);\n         registration.registerOperationHandler(ADD, NewLoggingSubsystemAdd.ADD_INSTANCE, LoggingSubsystemProviders.SUBSYSTEM_ADD, false);\n-        registration.registerOperationHandler(DESCRIBE, LoggingDescribeHandler.INSTANCE, LoggingDescribeHandler.INSTANCE, false);\n+        registration.registerOperationHandler(DESCRIBE, LoggingDescribeHandler.INSTANCE, LoggingDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n         registration.registerOperationHandler(RootLoggerAdd.OPERATION_NAME, RootLoggerAdd.INSTANCE, LoggingSubsystemProviders.SET_ROOT_LOGGER, false);\n         registration.registerOperationHandler(RootLoggerRemove.OPERATION_NAME, RootLoggerRemove.INSTANCE, LoggingSubsystemProviders.REMOVE_ROOT_LOGGER, false);\n         subsystem.registerXMLElementWriter(LoggingSubsystemParser.getInstance());"},{"filename":"managedbeans/src/main/java/org/jboss/as/managedbean/ManagedBeansExtension.java","diff":"@@ -48,6 +48,7 @@\n import org.jboss.as.controller.parsing.ParseUtils;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.staxmapper.XMLElementReader;\n import org.jboss.staxmapper.XMLElementWriter;\n@@ -79,7 +80,7 @@ public void initialize(ExtensionContext context) {\n         final SubsystemRegistration registration = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration nodeRegistration = registration.registerSubsystemModel(DESCRIPTION);\n         nodeRegistration.registerOperationHandler(ADD, ManagedBeansSubsystemAdd.INSTANCE, DESCRIPTION, false);\n-        nodeRegistration.registerOperationHandler(DESCRIBE, ManagedBeansDescribeHandler.INSTANCE, ManagedBeansDescribeHandler.INSTANCE, false);\n+        nodeRegistration.registerOperationHandler(DESCRIBE, ManagedBeansDescribeHandler.INSTANCE, ManagedBeansDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n         registration.registerXMLElementWriter(parser);\n \n     }"},{"filename":"messaging/src/main/java/org/jboss/as/messaging/MessagingExtension.java","diff":"@@ -33,6 +33,7 @@\n import org.jboss.as.controller.SubsystemRegistration;\n import org.jboss.as.controller.parsing.ExtensionParsingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n \n /**\n  * Domain extension that integrates HornetQ.\n@@ -49,7 +50,7 @@ public void initialize(ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(MessagingSubsystemProviders.SUBSYSTEM);\n         registration.registerOperationHandler(ADD, MessagingSubsystemAdd.INSTANCE, MessagingSubsystemProviders.SUBSYSTEM_ADD, false);\n-        registration.registerOperationHandler(DESCRIBE, MessagingSubsystemDescribeHandler.INSTANCE, MessagingSubsystemProviders.SUBSYSTEM_DESCRIBE, false);\n+        registration.registerOperationHandler(DESCRIBE, MessagingSubsystemDescribeHandler.INSTANCE, MessagingSubsystemProviders.SUBSYSTEM_DESCRIBE, false, OperationEntry.EntryType.PRIVATE);\n \n         subsystem.registerXMLElementWriter(MessagingSubsystemParser.getInstance());\n "},{"filename":"messaging/src/main/java/org/jboss/as/messaging/jms/JMSExtension.java","diff":"@@ -32,6 +32,7 @@\n import org.jboss.as.controller.SubsystemRegistration;\n import org.jboss.as.controller.parsing.ExtensionParsingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n \n /**\n  * The JMS extension.\n@@ -54,7 +55,7 @@ public void initialize(ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(JMSSubsystemProviders.SUBSYSTEM);\n         registration.registerOperationHandler(ADD, JMSSubsystemAdd.INSTANCE, JMSSubsystemProviders.SUBSYSTEM_ADD, false);\n-        registration.registerOperationHandler(DESCRIBE, JMSSubsystemDescribeHandler.INSTANCE, JMSSubsystemProviders.SUBSYSTEM_DESCRIBE, false);\n+        registration.registerOperationHandler(DESCRIBE, JMSSubsystemDescribeHandler.INSTANCE, JMSSubsystemProviders.SUBSYSTEM_DESCRIBE, false, OperationEntry.EntryType.PRIVATE);\n         subsystem.registerXMLElementWriter(parsers);\n         // Connection factories\n         final ModelNodeRegistration cfs = registration.registerSubModel(CFS_PATH, JMSSubsystemProviders.CF);"},{"filename":"naming/src/main/java/org/jboss/as/naming/service/NamingExtension.java","diff":"@@ -49,6 +49,7 @@\n import org.jboss.as.controller.parsing.ParseUtils;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.staxmapper.XMLElementReader;\n import org.jboss.staxmapper.XMLElementWriter;\n@@ -73,7 +74,7 @@ public void initialize(ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(NamingSubsystemProviders.SUBSYSTEM);\n         registration.registerOperationHandler(ADD, NamingSubsystemAdd.INSTANCE, NamingSubsystemProviders.SUBSYSTEM_ADD, false);\n-        registration.registerOperationHandler(DESCRIBE, NamingSubsystemDescribeHandler.INSTANCE, NamingSubsystemDescribeHandler.INSTANCE, false);\n+        registration.registerOperationHandler(DESCRIBE, NamingSubsystemDescribeHandler.INSTANCE, NamingSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n         subsystem.registerXMLElementWriter(parser);\n     }\n "},{"filename":"osgi/service/src/main/java/org/jboss/as/osgi/parser/OSGiExtension.java","diff":"@@ -63,6 +63,7 @@\n import org.jboss.as.controller.parsing.ExtensionParsingContext;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.staxmapper.XMLElementReader;\n import org.jboss.staxmapper.XMLElementWriter;\n@@ -86,7 +87,7 @@ public void initialize(ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(OSGiSubsystemProviders.SUBSYSTEM);\n         registration.registerOperationHandler(ADD, OSGiSubsystemAdd.INSTANCE, OSGiSubsystemProviders.SUBSYSTEM_ADD, false);\n-        registration.registerOperationHandler(DESCRIBE, OSGiSubsystemDescribeHandler.INSTANCE, OSGiSubsystemDescribeHandler.INSTANCE, false);\n+        registration.registerOperationHandler(DESCRIBE, OSGiSubsystemDescribeHandler.INSTANCE, OSGiSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n         subsystem.registerXMLElementWriter(PARSER);\n     }\n "},{"filename":"remoting/src/main/java/org/jboss/as/remoting/RemotingExtension.java","diff":"@@ -81,6 +81,7 @@\n import org.jboss.as.controller.parsing.ParseUtils;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.dmr.ModelType;\n import org.jboss.dmr.Property;\n@@ -109,7 +110,7 @@ public void initialize(ExtensionContext context) {\n         // Remoting subsystem description and operation handlers\n         final ModelNodeRegistration subsystem = registration.registerSubsystemModel(RemotingSubsystemProviders.SUBSYSTEM);\n         subsystem.registerOperationHandler(ADD, RemotingSubsystemAdd.INSTANCE, RemotingSubsystemProviders.SUBSYSTEM_ADD, false);\n-        subsystem.registerOperationHandler(DESCRIBE, RemotingSubsystemDescribeHandler.INSTANCE, RemotingSubsystemDescribeHandler.INSTANCE, false);\n+        subsystem.registerOperationHandler(DESCRIBE, RemotingSubsystemDescribeHandler.INSTANCE, RemotingSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n \n         // Remoting connectors\n         final ModelNodeRegistration connectors = subsystem.registerSubModel(PathElement.pathElement(CONNECTOR), RemotingSubsystemProviders.CONNECTOR_SPEC);"},{"filename":"sar/src/main/java/org/jboss/as/service/SarExtension.java","diff":"@@ -49,6 +49,7 @@\n import org.jboss.as.controller.parsing.ParseUtils;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.staxmapper.XMLElementReader;\n import org.jboss.staxmapper.XMLElementWriter;\n@@ -73,7 +74,7 @@ public void initialize(ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(SarSubsystemProviders.SUBSYSTEM);\n         registration.registerOperationHandler(ADD, SarSubsystemAdd.INSTANCE, SarSubsystemProviders.SUBSYSTEM_ADD, false);\n-        registration.registerOperationHandler(DESCRIBE, SarDescribeHandler.INSTANCE, SarDescribeHandler.INSTANCE, false);\n+        registration.registerOperationHandler(DESCRIBE, SarDescribeHandler.INSTANCE, SarDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n         subsystem.registerXMLElementWriter(parser);\n     }\n "},{"filename":"security/src/main/java/org/jboss/as/security/SecurityExtension.java","diff":"@@ -49,6 +49,7 @@\n import org.jboss.as.controller.operations.common.Util;\n import org.jboss.as.controller.parsing.ExtensionParsingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.dmr.Property;\n import org.jboss.logging.Logger;\n@@ -79,7 +80,7 @@ public void initialize(ExtensionContext context) {\n         registration.registerOperationHandler(ADD, SecuritySubsystemAdd.INSTANCE, SecuritySubsystemDescriptions.SUBSYSTEM_ADD,\n                 false);\n         registration.registerOperationHandler(DESCRIBE, SecurityDescribeHandler.INSTANCE,\n-                SecuritySubsystemDescriptions.SUBSYSTEM_DESCRIBE, false);\n+                SecuritySubsystemDescriptions.SUBSYSTEM_DESCRIBE, false, OperationEntry.EntryType.PRIVATE);\n \n         // security domains\n         final ModelNodeRegistration securityDomain = registration.registerSubModel(PathElement"},{"filename":"server/src/main/java/org/jboss/as/server/ServerControllerModelUtil.java","diff":"@@ -58,6 +58,7 @@\n import org.jboss.as.controller.persistence.ExtensibleConfigurationPersister;\n import org.jboss.as.controller.registry.AttributeAccess;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.as.server.controller.descriptions.ServerDescriptionProviders;\n import org.jboss.as.server.deployment.DeploymentAddHandler;\n import org.jboss.as.server.deployment.DeploymentDeployHandler;\n@@ -116,7 +117,7 @@ public static void initOperations(final ModelNodeRegistration root, final Deploy\n         // Build up the core model registry\n         root.registerReadWriteAttribute(NAME, null, new StringLengthValidatingHandler(1), AttributeAccess.Storage.CONFIGURATION);\n         // Global operations\n-        root.registerOperationHandler(GlobalOperationHandlers.ResolveAddressOperationHandler.OPERATION_NAME, GlobalOperationHandlers.RESOLVE, GlobalOperationHandlers.RESOLVE, false);\n+        root.registerOperationHandler(GlobalOperationHandlers.ResolveAddressOperationHandler.OPERATION_NAME, GlobalOperationHandlers.RESOLVE, GlobalOperationHandlers.RESOLVE, false, OperationEntry.EntryType.PRIVATE);\n         root.registerOperationHandler(READ_RESOURCE_OPERATION, ServerOperationHandlers.SERVER_READ_RESOURCE_HANDLER, CommonProviders.READ_RESOURCE_PROVIDER, true);\n         root.registerOperationHandler(READ_ATTRIBUTE_OPERATION, ServerOperationHandlers.SERVER_READ_ATTRIBUTE_HANDLER, CommonProviders.READ_ATTRIBUTE_PROVIDER, true);\n         root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION, GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION, CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER, true);"},{"filename":"threads/src/main/java/org/jboss/as/threads/ThreadsExtension.java","diff":"@@ -101,6 +101,7 @@\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.AttributeAccess.Storage;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.dmr.ModelType;\n import org.jboss.dmr.Property;\n@@ -132,7 +133,7 @@ public void initialize(final ExtensionContext context) {\n         // Remoting subsystem description and operation handlers\n         final ModelNodeRegistration subsystem = registration.registerSubsystemModel(SUBSYSTEM_PROVIDER);\n         subsystem.registerOperationHandler(ADD, ThreadsSubsystemAdd.INSTANCE, SUBSYSTEM_ADD_DESC, false);\n-        subsystem.registerOperationHandler(DESCRIBE, ThreadsSubsystemDescribeHandler.INSTANCE, ThreadsSubsystemDescribeHandler.INSTANCE, false);\n+        subsystem.registerOperationHandler(DESCRIBE, ThreadsSubsystemDescribeHandler.INSTANCE, ThreadsSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n \n         final ModelNodeRegistration threadFactories = subsystem.registerSubModel(PathElement.pathElement(THREAD_FACTORY), THREAD_FACTORY_DESC);\n         threadFactories.registerOperationHandler(ADD, ThreadFactoryAdd.INSTANCE, ADD_THREAD_FACTORY_DESC, false);"},{"filename":"transactions/src/main/java/org/jboss/as/txn/TransactionExtension.java","diff":"@@ -68,6 +68,7 @@\n import org.jboss.as.controller.parsing.ExtensionParsingContext;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.logging.Logger;\n import org.jboss.staxmapper.XMLElementReader;\n@@ -95,7 +96,7 @@ public void initialize(ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(TransactionSubsystemProviders.SUBSYSTEM);\n         registration.registerOperationHandler(ADD, TransactionSubsystemAdd.INSTANCE, TransactionSubsystemProviders.SUBSYSTEM_ADD, false);\n-        registration.registerOperationHandler(DESCRIBE, TransactionDescribeHandler.INSTANCE, TransactionDescribeHandler.INSTANCE, false);\n+        registration.registerOperationHandler(DESCRIBE, TransactionDescribeHandler.INSTANCE, TransactionDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n         subsystem.registerXMLElementWriter(parser);\n     }\n "},{"filename":"web/src/main/java/org/jboss/as/web/WebExtension.java","diff":"@@ -32,6 +32,7 @@\n import org.jboss.as.controller.SubsystemRegistration;\n import org.jboss.as.controller.parsing.ExtensionParsingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.logging.Logger;\n \n /**\n@@ -55,7 +56,7 @@ public void initialize(ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(WebSubsystemProviders.SUBSYSTEM);\n         registration.registerOperationHandler(ADD, WebSubsystemAdd.INSTANCE, WebSubsystemProviders.SUBSYSTEM_ADD, false);\n-        registration.registerOperationHandler(DESCRIBE, WebSubsystemDescribe.INSTANCE, WebSubsystemProviders.SUBSYSTEM_DESCRIBE, false);\n+        registration.registerOperationHandler(DESCRIBE, WebSubsystemDescribe.INSTANCE, WebSubsystemProviders.SUBSYSTEM_DESCRIBE, false, OperationEntry.EntryType.PRIVATE);\n         subsystem.registerXMLElementWriter(WebSubsystemParser.getInstance());\n         // connector\n         final ModelNodeRegistration connectors = registration.registerSubModel(connectorPath, WebSubsystemProviders.CONNECTOR);"},{"filename":"webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WSExtension.java","diff":"@@ -47,6 +47,7 @@\n import org.jboss.as.controller.parsing.ExtensionParsingContext;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.logging.Logger;\n import org.jboss.staxmapper.XMLElementReader;\n@@ -75,7 +76,7 @@ public void initialize(ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(WSSubsystemProviders.SUBSYSTEM);\n         registration.registerOperationHandler(ADD, WSSubsystemAdd.INSTANCE, WSSubsystemProviders.SUBSYSTEM_ADD, false);\n-        registration.registerOperationHandler(DESCRIBE, WSSubsystemDescribe.INSTANCE, WSSubsystemProviders.SUBSYSTEM_DESCRIBE, false);\n+        registration.registerOperationHandler(DESCRIBE, WSSubsystemDescribe.INSTANCE, WSSubsystemProviders.SUBSYSTEM_DESCRIBE, false, OperationEntry.EntryType.PRIVATE);\n         subsystem.registerXMLElementWriter(PARSER);\n     }\n "},{"filename":"weld/src/main/java/org/jboss/as/weld/WeldExtension.java","diff":"@@ -50,6 +50,7 @@\n import org.jboss.as.controller.parsing.ExtensionParsingContext;\n import org.jboss.as.controller.persistence.SubsystemMarshallingContext;\n import org.jboss.as.controller.registry.ModelNodeRegistration;\n+import org.jboss.as.controller.registry.OperationEntry;\n import org.jboss.dmr.ModelNode;\n import org.jboss.logging.Logger;\n import org.jboss.staxmapper.XMLElementReader;\n@@ -79,7 +80,7 @@ public void initialize(final ExtensionContext context) {\n         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n         final ModelNodeRegistration registration = subsystem.registerSubsystemModel(SUBSYSTEM_DESCRIPTION);\n         registration.registerOperationHandler(ADD, WeldSubsystemAdd.INSTANCE, SUBSYSTEM_ADD_DESCRIPTION, false);\n-        registration.registerOperationHandler(DESCRIBE, WeldSubsystemDescribeHandler.INSTANCE, WeldSubsystemDescribeHandler.INSTANCE, false);\n+        registration.registerOperationHandler(DESCRIBE, WeldSubsystemDescribeHandler.INSTANCE, WeldSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n         subsystem.registerXMLElementWriter(parser);\n     }\n "}],"tree":"95b72047b7db4865f6ba22c60f1c00a88ca28da4"}}