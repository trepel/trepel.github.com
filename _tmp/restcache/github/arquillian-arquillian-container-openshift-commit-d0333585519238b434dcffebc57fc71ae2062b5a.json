{"commit":{"committer":{"email":"aslak@redhat.com","login":"aslakknutsen","name":"Aslak Knutsen"},"authored_date":"2011-10-05T08:08:42-07:00","id":"d0333585519238b434dcffebc57fc71ae2062b5a","message":"ARQ-621 Add support for scanning Imported Archives","committed_date":"2011-10-21T12:58:09-07:00","url":"/arquillian/arquillian-container-openshift/commit/d0333585519238b434dcffebc57fc71ae2062b5a","parents":[{"id":"3cf593ed98502b5506ee9308e03ed266cea43a8b"}],"tree":"d1d9bb5a7e3f21704b530f435d6534708256ca92","modified":[{"diff":"@@ -17,13 +17,16 @@\n package org.jboss.arquillian.container.openshift.express.archive;\n \n import java.util.Collection;\n+import java.util.HashSet;\n import java.util.LinkedHashSet;\n+import java.util.Map;\n import java.util.Map.Entry;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n import org.jboss.shrinkwrap.api.Archive;\n import org.jboss.shrinkwrap.api.ArchivePath;\n+import org.jboss.shrinkwrap.api.Filter;\n import org.jboss.shrinkwrap.api.Node;\n import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n import org.jboss.shrinkwrap.api.spec.JavaArchive;\n@@ -45,6 +48,7 @@\n  *\n  *\n  * @author <a href=\"mailto:kpiwko@redhat.com\">Karel Piwko</a>\n+ * @author <a href=\"http://community.jboss.org/people/jharting\">Jozef Hartinger</a>\n  *\n  */\n public class ArchiveUtil {\n@@ -128,10 +132,10 @@ public static final boolean isEarArchive(Archive<?> archive) {\n             Archive<?> archive, Class<T> needle) {\n \n         if (isEarArchive(archive)) {\n-            for (JavaArchive jar : archive.getAsType(JavaArchive.class, AssetUtil.JAR_FILTER)) {\n+            for (JavaArchive jar : getScannableNestedArchives(archive, JavaArchive.class, AssetUtil.JAR_FILTER)) {\n                 getDefinedClasses(classNames, needleImpls, jar, needle);\n             }\n-            for (WebArchive war : archive.getAsType(WebArchive.class, AssetUtil.WAR_FILTER)) {\n+            for (WebArchive war : getScannableNestedArchives(archive, WebArchive.class, AssetUtil.WAR_FILTER)) {\n                 getDefinedClasses(classNames, needleImpls, war, needle);\n             }\n         } else if (isWarArchive(archive)) {\n@@ -141,7 +145,7 @@ public static final boolean isEarArchive(Archive<?> archive) {\n             for (Entry<ArchivePath, Node> node : archive.getContent(AssetUtil.CLASS_FILTER).entrySet()) {\n                 getDefinedClasses(classNames, needleImpls, ArchiveType.WAR, node.getKey(), node.getValue(), needle, cl);\n             }\n-            for (JavaArchive jar : archive.getAsType(JavaArchive.class, AssetUtil.JAR_FILTER)) {\n+            for (JavaArchive jar : getScannableNestedArchives(archive, JavaArchive.class, AssetUtil.JAR_FILTER)) {\n                 getDefinedClasses(classNames, needleImpls, jar, needle);\n             }\n         } else if (isJarArchive(archive)) {\n@@ -154,6 +158,24 @@ public static final boolean isEarArchive(Archive<?> archive) {\n         }\n \n     }\n+    \n+    /**\n+     * Does the same as {@link Archive#getAsType(Class, Filter)} but filters out nodes which cannot be scanned for classes\n+     * (cannot be converted to <X>)\n+     */\n+    private static <X extends Archive<X>> Collection<X> getScannableNestedArchives(Archive<?> archive, Class<X> type,\n+            Filter<ArchivePath> filter) {\n+        Collection<X> nestedArchives = new HashSet<X>();\n+        for (Map.Entry<ArchivePath, Node> entry : archive.getContent(filter).entrySet()) {\n+            try {\n+                X nestedArchive = archive.getAsType(type, entry.getKey());\n+                nestedArchives.add(nestedArchive);\n+            } catch (IllegalArgumentException ignored) {\n+                // ignored, we are not able to convert this type to X so we won't need it anyway\n+            }\n+        }\n+        return nestedArchives;\n+    }\n \n     // worker method\n     @SuppressWarnings(\"unchecked\")","filename":"openshift-express/src/main/java/org/jboss/arquillian/container/openshift/express/archive/ArchiveUtil.java"},{"diff":"@@ -24,15 +24,19 @@\n import org.jboss.arquillian.container.spi.client.protocol.metadata.HTTPContext;\n import org.jboss.arquillian.container.spi.client.protocol.metadata.ProtocolMetaData;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.exporter.ZipExporter;\n+import org.jboss.shrinkwrap.api.importer.ZipImporter;\n import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n import org.jboss.shrinkwrap.api.spec.WebArchive;\n import org.junit.Test;\n \n /**\n  * Tests metadata creation\n- *\n+ * \n  * @author <a href=\"mailto:kpiwko@redhat.com\">Karel Piwko</a>\n- *\n+ * @author <a href=\"http://community.jboss.org/people/jharting\">Jozef Hartinger</a>\n+ * \n  */\n public class ProtocolMetadataParserTestCase {\n \n@@ -81,6 +85,24 @@ public void testNoServlets() {\n         Assert.assertEquals(\"Context root of arquillian.war is set correctly\", \"/arquillian\", contextRoot);\n     }\n \n+    /**\n+     * Verifies that parsing does not fail on a package imported using ZipImporter.\n+     * @see ARQ-621\n+     */\n+    @Test\n+    public void testImportedWar() {\n+        OpenShiftExpressConfiguration configuration = new OpenShiftExpressConfiguration();\n+        ProtocolMetaDataParser parser = new ProtocolMetaDataParser(configuration);\n+\n+        ProtocolMetaData data = parser.parse(sampleImportedWar());\n+\n+        HTTPContext context = data.getContext(HTTPContext.class);\n+\n+        Assert.assertNotNull(context.getServletByName(\"default\"));\n+        String contextRoot = context.getServletByName(\"default\").getContextRoot();\n+        Assert.assertEquals(\"Context root of arquillian.war is set correctly\", \"/test\", contextRoot);\n+    }\n+\n     private EnterpriseArchive sampleEar() {\n         return ShrinkWrap.create(EnterpriseArchive.class)\n                 .addAsModule(ShrinkWrap.create(WebArchive.class, \"arquillian1.war\").addClass(Servlet1.class))\n@@ -95,4 +117,12 @@ private WebArchive sampleWarNoServlets() {\n         return ShrinkWrap.create(WebArchive.class, \"arquillian.war\").addClass(Object.class);\n     }\n \n+    private WebArchive sampleImportedWar() {\n+\n+        WebArchive archive = ShrinkWrap.create(WebArchive.class, \"test.war\").addClass(Object.class)\n+                .addAsLibrary(ShrinkWrap.create(JavaArchive.class, \"test.jar\").addClass(String.class));\n+\n+        return ShrinkWrap.create(ZipImporter.class, \"test.war\")\n+                .importFrom(archive.as(ZipExporter.class).exportAsInputStream()).as(WebArchive.class);\n+    }\n }","filename":"openshift-express/src/test/java/org/jboss/arquillian/container/openshift/express/ProtocolMetadataParserTestCase.java"}],"author":{"email":"jharting@redhat.com","login":"jharting","name":"Jozef Hartinger"}}}