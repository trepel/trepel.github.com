{"commit":{"author":{"login":"bosschaert","email":"david.bosschaert@gmail.com","name":"David Bosschaert"},"authored_date":"2011-03-02T03:58:57-08:00","modified":[{"filename":"arquillian/container-embedded/pom.xml","diff":"@@ -36,14 +36,14 @@\n     <artifactId>jboss-as-arquillian-container-embedded</artifactId>\n     <version>7.0.0.Alpha2-SNAPSHOT</version>\n \n-    <name>JBoss Application Server: Arquillian: Embedded Container</name>\n+    <name>JBoss Application Server: Arquillian Embedded Container</name>\n \n     <packaging>jar</packaging>\n \n     <dependencies>\n         <dependency>\n             <groupId>org.jboss.as</groupId>\n-            <artifactId>jboss-as-arquillian-container-common</artifactId>\n+            <artifactId>jboss-as-arquillian-common</artifactId>\n         </dependency>\n \n         <dependency>"},{"filename":"arquillian/container-embedded/src/main/java/org/jboss/as/arquillian/container/embedded/JBossAsEmbeddedContainer.java","diff":"@@ -30,7 +30,7 @@\n import org.jboss.arquillian.spi.ContainerMethodExecutor;\n import org.jboss.arquillian.spi.Context;\n import org.jboss.arquillian.spi.LifecycleException;\n-import org.jboss.as.arquillian.container.common.AbstractDeployableContainer;\n+import org.jboss.as.arquillian.container.AbstractDeployableContainer;\n import org.jboss.as.server.EmbeddedServerFactory;\n import org.jboss.as.server.StandaloneServer;\n "},{"filename":"arquillian/container-embedded/src/main/resources/META-INF/services/org.jboss.arquillian.spi.ApplicationArchiveProcessor","diff":"@@ -1 +1 @@\n-org.jboss.as.arquillian.container.common.DelegatingApplicationArchiveProcessor\n+org.jboss.as.arquillian.container.DelegatingApplicationArchiveProcessor"},{"filename":"arquillian/container-embedded/src/main/resources/META-INF/services/org.jboss.arquillian.spi.ContainerConfiguration","diff":"@@ -1 +1 @@\n-org.jboss.as.arquillian.container.common.JBossAsContainerConfiguration\n\\ No newline at end of file\n+org.jboss.as.arquillian.container.JBossAsContainerConfiguration\n\\ No newline at end of file"},{"filename":"arquillian/container-embedded/src/main/resources/META-INF/services/org.jboss.arquillian.spi.DeploymentPackager","diff":"@@ -1 +1 @@\n-org.jboss.as.arquillian.container.common.JBossASDeploymentPackager\n\\ No newline at end of file\n+org.jboss.as.arquillian.container.JBossASDeploymentPackager\n\\ No newline at end of file"},{"filename":"arquillian/container-managed/pom.xml","diff":"@@ -36,7 +36,7 @@\n     <artifactId>jboss-as-arquillian-container-managed</artifactId>\n     <version>7.0.0.Alpha2-SNAPSHOT</version>\n \n-    <name>JBoss Application Server: Arquillian: Managed Container</name>\n+    <name>JBoss Application Server: Arquillian Managed Container</name>\n \n     <packaging>jar</packaging>\n     \n@@ -48,7 +48,7 @@\n     <dependencies>\n         <dependency>\n             <groupId>org.jboss.as</groupId>\n-            <artifactId>jboss-as-arquillian-container-common</artifactId>\n+            <artifactId>jboss-as-arquillian-common</artifactId>\n         </dependency>\n \n         <dependency>"},{"filename":"arquillian/container-managed/src/main/java/org/jboss/as/arquillian/container/managed/JBossAsManagedContainer.java","diff":"@@ -35,9 +35,9 @@\n import org.jboss.arquillian.spi.ContainerMethodExecutor;\n import org.jboss.arquillian.spi.Context;\n import org.jboss.arquillian.spi.LifecycleException;\n-import org.jboss.as.arquillian.container.common.AbstractDeployableContainer;\n-import org.jboss.as.arquillian.container.common.JBossAsContainerConfiguration;\n-import org.jboss.as.arquillian.container.common.MBeanServerConnectionProvider;\n+import org.jboss.as.arquillian.container.AbstractDeployableContainer;\n+import org.jboss.as.arquillian.container.JBossAsContainerConfiguration;\n+import org.jboss.as.arquillian.container.MBeanServerConnectionProvider;\n \n /**\n  * JBossASEmbeddedContainer"},{"filename":"arquillian/container-managed/src/main/resources/META-INF/services/org.jboss.arquillian.spi.ApplicationArchiveProcessor","diff":"@@ -1 +1 @@\n-org.jboss.as.arquillian.container.common.DelegatingApplicationArchiveProcessor\n+org.jboss.as.arquillian.container.DelegatingApplicationArchiveProcessor"},{"filename":"arquillian/container-managed/src/main/resources/META-INF/services/org.jboss.arquillian.spi.ContainerConfiguration","diff":"@@ -1 +1 @@\n-org.jboss.as.arquillian.container.common.JBossAsContainerConfiguration\n\\ No newline at end of file\n+org.jboss.as.arquillian.container.JBossAsContainerConfiguration\n\\ No newline at end of file"},{"filename":"arquillian/container-managed/src/main/resources/META-INF/services/org.jboss.arquillian.spi.DeploymentPackager","diff":"@@ -1 +1 @@\n-org.jboss.as.arquillian.container.common.JBossASDeploymentPackager\n\\ No newline at end of file\n+org.jboss.as.arquillian.container.JBossASDeploymentPackager\n\\ No newline at end of file"},{"filename":"arquillian/container-remote/pom.xml","diff":"@@ -36,7 +36,7 @@\n     <artifactId>jboss-as-arquillian-container-remote</artifactId>\n     <version>7.0.0.Alpha2-SNAPSHOT</version>\n \n-    <name>JBoss Application Server: Arquillian: Remote Container</name>\n+    <name>JBoss Application Server: Arquillian Remote Container</name>\n \n     <packaging>jar</packaging>\n     \n@@ -49,7 +49,7 @@\n     <dependencies>\n         <dependency>\n             <groupId>org.jboss.as</groupId>\n-            <artifactId>jboss-as-arquillian-container-common</artifactId>\n+            <artifactId>jboss-as-arquillian-common</artifactId>\n         </dependency>\n \n         <dependency>"},{"filename":"arquillian/container-remote/src/main/java/org/jboss/as/arquillian/container/remote/JBossAsRemoteContainer.java","diff":"@@ -24,9 +24,9 @@\n import org.jboss.arquillian.spi.ContainerMethodExecutor;\n import org.jboss.arquillian.spi.Context;\n import org.jboss.arquillian.spi.LifecycleException;\n-import org.jboss.as.arquillian.container.common.AbstractDeployableContainer;\n-import org.jboss.as.arquillian.container.common.JBossAsContainerConfiguration;\n-import org.jboss.as.arquillian.container.common.MBeanServerConnectionProvider;\n+import org.jboss.as.arquillian.container.AbstractDeployableContainer;\n+import org.jboss.as.arquillian.container.JBossAsContainerConfiguration;\n+import org.jboss.as.arquillian.container.MBeanServerConnectionProvider;\n \n /**\n  * JBossASRemoteContainer"},{"filename":"arquillian/container-remote/src/main/resources/META-INF/services/org.jboss.arquillian.spi.ApplicationArchiveProcessor","diff":"@@ -1 +1 @@\n-org.jboss.as.arquillian.container.common.DelegatingApplicationArchiveProcessor\n+org.jboss.as.arquillian.container.DelegatingApplicationArchiveProcessor"},{"filename":"arquillian/container-remote/src/main/resources/META-INF/services/org.jboss.arquillian.spi.ContainerConfiguration","diff":"@@ -1 +1 @@\n-org.jboss.as.arquillian.container.common.JBossAsContainerConfiguration\n\\ No newline at end of file\n+org.jboss.as.arquillian.container.JBossAsContainerConfiguration\n\\ No newline at end of file"},{"filename":"arquillian/container-remote/src/main/resources/META-INF/services/org.jboss.arquillian.spi.DeploymentPackager","diff":"@@ -1 +1 @@\n-org.jboss.as.arquillian.container.common.JBossASDeploymentPackager\n\\ No newline at end of file\n+org.jboss.as.arquillian.container.JBossASDeploymentPackager\n\\ No newline at end of file"},{"filename":"arquillian/pom.xml","diff":"@@ -36,11 +36,11 @@\n     <artifactId>jboss-as-arquillian</artifactId>\n     <version>7.0.0.Alpha2-SNAPSHOT</version>\n \n-    <name>JBoss Application Server: Arquillian: Aggregator</name>\n+    <name>JBoss Application Server: Arquillian</name>\n \n     <modules>\n+        <module>common</module>\n         <module>service</module>\n-        <module>container-common</module>\n         <module>container-embedded</module>\n         <module>container-managed</module>\n         <module>container-remote</module>"},{"filename":"arquillian/service/pom.xml","diff":"@@ -36,7 +36,7 @@\n     <artifactId>jboss-as-arquillian-service</artifactId>\n     <version>7.0.0.Alpha2-SNAPSHOT</version>\n \n-    <name>JBoss Application Server: Arquillian: Service</name>\n+    <name>JBoss Application Server: Arquillian Service</name>\n \n     <!--modules>\n         <module>integration</module>\n@@ -46,6 +46,10 @@\n \n     <dependencies>\n         <dependency>\n+            <groupId>org.jboss.as</groupId>\n+            <artifactId>jboss-as-arquillian-common</artifactId>\n+        </dependency>\n+        <dependency>\n             <groupId>org.jboss.arquillian</groupId>\n             <artifactId>arquillian-junit</artifactId>\n         </dependency>\n@@ -65,6 +69,10 @@\n         </dependency>\n         <dependency>\n             <groupId>org.jboss.arquillian.testenricher</groupId>\n+            <artifactId>arquillian-testenricher-jmx</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.arquillian.testenricher</groupId>\n             <artifactId>arquillian-testenricher-msc</artifactId>\n         </dependency>\n         <dependency>"},{"filename":"arquillian/service/src/main/java/org/jboss/as/arquillian/service/ArquillianService.java","diff":"@@ -22,27 +22,31 @@\n \n package org.jboss.as.arquillian.service;\n \n+import java.lang.reflect.Field;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n+import javax.inject.Inject;\n import javax.management.MBeanServer;\n \n import org.jboss.arquillian.context.ContextManager;\n import org.jboss.arquillian.context.ContextManagerBuilder;\n import org.jboss.arquillian.protocol.jmx.JMXTestRunner;\n import org.jboss.arquillian.protocol.jmx.JMXTestRunner.TestClassLoader;\n-import org.jboss.arquillian.spi.TestEnricher;\n import org.jboss.arquillian.spi.TestResult;\n-import org.jboss.arquillian.spi.util.ServiceLoader;\n-import org.jboss.arquillian.testenricher.msc.ServiceContainerInjector;\n+import org.jboss.arquillian.testenricher.msc.ServiceContainerAssociation;\n import org.jboss.arquillian.testenricher.osgi.BundleAssociation;\n import org.jboss.arquillian.testenricher.osgi.BundleContextAssociation;\n import org.jboss.as.jmx.MBeanServerService;\n import org.jboss.as.osgi.deployment.OSGiDeploymentAttachment;\n import org.jboss.as.osgi.service.BundleContextService;\n+import org.jboss.as.server.ServerController;\n+import org.jboss.as.server.Services;\n+import org.jboss.as.server.client.api.deployment.ServerDeploymentManager;\n+import org.jboss.as.server.client.impl.ModelControllerServerDeploymentManager;\n import org.jboss.as.server.deployment.Attachments;\n import org.jboss.as.server.deployment.DeploymentUnit;\n import org.jboss.logging.Logger;\n@@ -51,6 +55,8 @@\n import org.jboss.msc.service.ServiceBuilder;\n import org.jboss.msc.service.ServiceContainer;\n import org.jboss.msc.service.ServiceController;\n+import org.jboss.msc.service.ServiceController.Mode;\n+import org.jboss.msc.service.ServiceController.State;\n import org.jboss.msc.service.ServiceName;\n import org.jboss.msc.service.ServiceTarget;\n import org.jboss.msc.service.StartContext;\n@@ -73,7 +79,7 @@\n     private static final Logger log = Logger.getLogger(\"org.jboss.as.arquillian\");\n \n     private final InjectedValue<MBeanServer> injectedMBeanServer = new InjectedValue<MBeanServer>();\n-    private ServiceContainer serviceContainer;\n+    private final InjectedValue<ServerController> injectedServerController = new InjectedValue<ServerController>();\n     private final Map<String, ArquillianConfig> deployedTests = new HashMap<String, ArquillianConfig>();\n     private final Map<String, CountDownLatch> waitingTests = new HashMap<String, CountDownLatch>();\n     private JMXTestRunner jmxTestRunner;\n@@ -81,6 +87,7 @@\n     public static void addService(final ServiceTarget serviceTarget) {\n         ArquillianService service = new ArquillianService();\n         ServiceBuilder<?> serviceBuilder = serviceTarget.addService(ArquillianService.SERVICE_NAME, service);\n+        serviceBuilder.addDependency(Services.JBOSS_SERVER_CONTROLLER, ServerController.class, service.injectedServerController);\n         serviceBuilder.addDependency(MBeanServerService.SERVICE_NAME, MBeanServer.class, service.injectedMBeanServer);\n         serviceBuilder.install();\n     }\n@@ -91,15 +98,8 @@ public synchronized void start(StartContext context) throws StartException {\n         log.debugf(\"Starting Arquillian Test Runner\");\n \n         final MBeanServer mbeanServer = injectedMBeanServer.getValue();\n-        final TestClassLoader testClassLoader = new TestClassLoaderImpl();\n-\n-        // Inject the ServiceContainer in the enrichers\n-        serviceContainer = context.getController().getServiceContainer();\n-        ServiceLoader<TestEnricher> loader = ServiceLoader.load(TestEnricher.class, testClassLoader.getServiceClassLoader());\n-        for (TestEnricher enricher : loader.getProviders()) {\n-            if (enricher instanceof ServiceContainerInjector)\n-                ((ServiceContainerInjector) enricher).inject(serviceContainer);\n-        }\n+        final ServiceContainer serviceContainer = context.getController().getServiceContainer();\n+        final TestClassLoader testClassLoader = new TestClassLoaderImpl(serviceContainer);\n \n         try {\n             jmxTestRunner = new JMXTestRunner() {\n@@ -112,12 +112,16 @@ public TestResult runTestMethod(String className, String methodName, Map<String,\n                     if (config != null) {\n                         final DeploymentUnit deployment = config.getDeploymentUnitContext();\n                         final Module module = deployment.getAttachment(Attachments.MODULE);\n-                        builder.add(new TCCLSetup(module.getClassLoader()));\n+                        if (module != null) {\n+                            builder.add(new TCCLSetup(module.getClassLoader()));\n+                        }\n                         builder.addAll(deployment);\n                     }\n+\n                     Map<String, Object> properties = Collections.<String, Object> singletonMap(TEST_CLASS_PROPERTY, className);\n                     ContextManager contextManager = builder.build();\n                     contextManager.setup(properties);\n+\n                     try {\n                         // actually run the tests\n                         return super.runTestMethod(className, methodName, props);\n@@ -202,31 +206,59 @@ private ArquillianConfig getConfig(String className) {\n \n     class TestClassLoaderImpl implements JMXTestRunner.TestClassLoader {\n \n+        private ServiceContainer serviceContainer;\n+        private ServerDeploymentManager deploymentManager;\n+\n+        TestClassLoaderImpl(ServiceContainer serviceContainer) {\n+            this.serviceContainer = serviceContainer;\n+            this.deploymentManager = new ModelControllerServerDeploymentManager(injectedServerController.getValue());\n+        }\n+\n         @Override\n         public Class<?> loadTestClass(String className) throws ClassNotFoundException {\n+\n             ArquillianConfig arqConfig = getConfig(className);\n-            if (arqConfig != null) {\n-\n-                if (arqConfig.getTestClasses().contains(className)) {\n-                    DeploymentUnit depunit = arqConfig.getDeploymentUnitContext();\n-                    Module module = depunit.getAttachment(Attachments.MODULE);\n-                    Deployment osgidep = OSGiDeploymentAttachment.getDeployment(depunit);\n-                    if (module != null && osgidep != null)\n-                        throw new IllegalStateException(\"Found MODULE attachment for Bundle deployment: \" + depunit);\n-\n-                    if (module != null)\n-                        return module.getClassLoader().loadClass(className);\n-\n-                    if (osgidep != null) {\n-                        Bundle bundle = osgidep.getAttachment(Bundle.class);\n-                        BundleAssociation.setBundle(bundle);\n-                        BundleContext sysContext = getSystemBundleContext();\n-                        BundleContextAssociation.setBundleContext(sysContext);\n-                        return bundle.loadClass(className);\n-                    }\n+            if (arqConfig == null)\n+                throw new ClassNotFoundException(className);\n+\n+            if (arqConfig.getTestClasses().contains(className) == false)\n+                throw new ClassNotFoundException(className);\n+\n+            DeploymentUnit depunit = arqConfig.getDeploymentUnitContext();\n+            Module module = depunit.getAttachment(Attachments.MODULE);\n+            Deployment osgidep = OSGiDeploymentAttachment.getDeployment(depunit);\n+            if (module != null && osgidep != null)\n+                throw new IllegalStateException(\"Found MODULE attachment for Bundle deployment: \" + depunit);\n+\n+            Class<?> testClass = null;\n+            if (module != null) {\n+                ServiceContainerAssociation.setServiceContainer(serviceContainer);\n+                ServerDeploymentManagerAssociation.setServerDeploymentManager(deploymentManager);\n+                testClass = module.getClassLoader().loadClass(className);\n+            }\n+\n+            else if (osgidep != null) {\n+                Bundle bundle = osgidep.getAttachment(Bundle.class);\n+                BundleAssociation.setBundle(bundle);\n+                ServiceContainerAssociation.setServiceContainer(serviceContainer);\n+                ServerDeploymentManagerAssociation.setServerDeploymentManager(deploymentManager);\n+                testClass = bundle.loadClass(className);\n+            }\n+\n+            if (testClass == null)\n+                throw new ClassNotFoundException(className);\n+\n+            // [TODO] Move the startup of the OSGi subsystem to a {@link SetupAction}\n+            if (isOSGiSubsystemRequired(testClass)) {\n+                ServiceController<?> controller = serviceContainer.getRequiredService(BundleContextService.SERVICE_NAME);\n+                if (controller.getState() != State.UP) {\n+                    controller.setMode(Mode.ACTIVE);\n+                    assertServiceState(BundleContextService.SERVICE_NAME, State.UP, 5000);\n                 }\n+                BundleContextAssociation.setBundleContext((BundleContext) controller.getValue());\n             }\n-            throw new ClassNotFoundException(className);\n+\n+            return testClass;\n         }\n \n         @Override\n@@ -234,9 +266,35 @@ public ClassLoader getServiceClassLoader() {\n             return ArquillianService.class.getClassLoader();\n         }\n \n-        private BundleContext getSystemBundleContext() {\n-            ServiceController<?> controller = serviceContainer.getService(BundleContextService.SERVICE_NAME);\n-            return (BundleContext) (controller != null ? controller.getValue() : null);\n+        boolean isOSGiSubsystemRequired(Class<?> testClass) {\n+            for (Field field : testClass.getDeclaredFields()) {\n+                Class<?> fieldType = field.getType();\n+                if (field.isAnnotationPresent(Inject.class)) {\n+                    if (fieldType.isAssignableFrom(BundleContext.class)) {\n+                        return true;\n+                    } else if (fieldType.isAssignableFrom(Bundle.class)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n+\n+        void assertServiceState(ServiceName serviceName, State expState, long timeout) {\n+            ServiceController<?> controller = serviceContainer.getService(serviceName);\n+            State state = controller != null ? controller.getState() : null;\n+            while ((state == null || state != expState) && timeout > 0) {\n+                try {\n+                    Thread.sleep(100);\n+                } catch (InterruptedException ex) {\n+                    // ignore\n+                }\n+                controller = serviceContainer.getService(serviceName);\n+                state = controller != null ? controller.getState() : null;\n+                timeout -= 100;\n+            }\n+            if (expState != state)\n+                throw new IllegalArgumentException(serviceName + \" expected: \" + expState + \" but was \" + state);\n         }\n     }\n }"},{"filename":"arquillian/service/src/main/resources/META-INF/services/org.jboss.arquillian.spi.TestEnricher","diff":"@@ -1,5 +1 @@\n-org.jboss.arquillian.testenricher.msc.ServiceContainerEnricher\n-org.jboss.arquillian.testenricher.osgi.OSGiTestEnricher\n-org.jboss.arquillian.testenricher.cdi.CDIInjectionEnricher\n-\n-\n+org.jboss.as.arquillian.service.ArchiveDeployerTestEnricher\n\\ No newline at end of file"},{"filename":"build/build.xml","diff":"@@ -327,6 +327,10 @@\n             <maven-resource group=\"org.jboss.arquillian.testenricher\" artifact=\"arquillian-testenricher-cdi\"/>\n         </module-def>\n \n+        <module-def name=\"org.jboss.arquillian.testenricher.jmx\">\n+            <maven-resource group=\"org.jboss.arquillian.testenricher\" artifact=\"arquillian-testenricher-jmx\"/>\n+        </module-def>\n+\n         <module-def name=\"org.jboss.arquillian.testenricher.msc\">\n             <maven-resource group=\"org.jboss.arquillian.testenricher\" artifact=\"arquillian-testenricher-msc\"/>\n         </module-def>\n@@ -337,6 +341,10 @@\n         \n         <module-def name=\"org.jboss.as.aggregate\" />\n \n+        <module-def name=\"org.jboss.as.arquillian.common\">\n+            <maven-resource group=\"org.jboss.as\" artifact=\"jboss-as-arquillian-common\"/>\n+        </module-def>\n+\n         <module-def name=\"org.jboss.as.arquillian.service\">\n             <maven-resource group=\"org.jboss.as\" artifact=\"jboss-as-arquillian-service\"/>\n         </module-def>"},{"filename":"build/src/main/resources/modules/org/jboss/arquillian/api/main/module.xml","diff":"@@ -28,5 +28,6 @@\n     </resources>\n \n     <dependencies>\n+        <module name=\"org.jboss.shrinkwrap.api\"/>\n     </dependencies>\n </module>"},{"filename":"build/src/main/resources/modules/org/jboss/arquillian/impl/main/module.xml","diff":"@@ -28,6 +28,7 @@\n     </resources>\n \n     <dependencies>\n+        <module name=\"org.jboss.arquillian.api\"/>\n         <module name=\"org.jboss.arquillian.spi\"/>\n         <module name=\"org.jboss.shrinkwrap.impl\"/>\n         <module name=\"org.jboss.shrinkwrap.spi\"/>"},{"filename":"build/src/main/resources/modules/org/jboss/arquillian/protocol/jmx/main/module.xml","diff":"@@ -33,5 +33,7 @@\n         <module name=\"org.jboss.arquillian.junit\"/>\n         <module name=\"org.jboss.arquillian.spi\"/>\n         <module name=\"org.jboss.logging\"/>\n+        <module name=\"org.jboss.shrinkwrap.api\"/>\n+        <module name=\"org.jboss.shrinkwrap.impl\"/>\n     </dependencies>\n </module>"},{"filename":"build/src/main/resources/modules/org/jboss/as/arquillian/service/main/module.xml","diff":"@@ -32,19 +32,22 @@\n         <module name=\"javax.api\"/>\n         <module name=\"javax.enterprise.api\"/>\n         <module name=\"junit.junit\"/>\n+        <module name=\"org.jboss.arquillian.api\"/>\n         <module name=\"org.jboss.arquillian.junit\"/>\n         <module name=\"org.jboss.arquillian.spi\"/>\n         <module name=\"org.jboss.arquillian.protocol.jmx\" />\n-        <module name=\"org.jboss.arquillian.testenricher.cdi\" />\n-        <module name=\"org.jboss.arquillian.testenricher.msc\" />\n-        <module name=\"org.jboss.arquillian.testenricher.osgi\" />\n+        <module name=\"org.jboss.arquillian.testenricher.cdi\" services=\"import\"/>\n+        <module name=\"org.jboss.arquillian.testenricher.jmx\" services=\"import\"/>\n+        <module name=\"org.jboss.arquillian.testenricher.msc\" services=\"import\"/>\n+        <module name=\"org.jboss.arquillian.testenricher.osgi\" services=\"import\"/>\n+        <module name=\"org.jboss.as.arquillian.common\"/>\n         <module name=\"org.jboss.as.controller\"/>\n         <module name=\"org.jboss.as.server\" />\n         <module name=\"org.jboss.as.ee\" />\n-        <module name=\"org.jboss.as.naming\" />\n-        <module name=\"org.jboss.as.server\" />\n         <module name=\"org.jboss.as.jmx\" />\n+        <module name=\"org.jboss.as.naming\" />\n         <module name=\"org.jboss.as.osgi\" />\n+        <module name=\"org.jboss.as.server\" />\n         <module name=\"org.jboss.jandex\"/>\n         <module name=\"org.jboss.logging\" />\n         <module name=\"org.jboss.modules\" />\n@@ -54,4 +57,4 @@\n         <module name=\"org.osgi.core\"/>\n     </dependencies>\n \n-</module>\n\\ No newline at end of file\n+</module>"},{"filename":"build/src/main/resources/standalone/configuration/standalone.xml","diff":"@@ -188,6 +188,7 @@\n                 org.apache.log4j,\n                 org.jboss.arquillian.api,\n                 org.jboss.arquillian.junit,\n+                org.jboss.arquillian.protocol.jmx,\n                 org.jboss.arquillian.protocol.osgi,\n                 org.jboss.arquillian.spi,\n                 org.jboss.as.osgi,\n@@ -208,7 +209,7 @@\n                 org.jboss.osgi.testing;version=1.0,\n                 org.jboss.osgi.vfs;version=1.0,\n \n-                org.jboss.arquillian.api, org.jboss.arquillian.junit, org.jboss.arquillian.osgi,\n+                org.jboss.arquillian.api, org.jboss.arquillian.junit, org.jboss.arquillian.jmx, org.jboss.arquillian.osgi,\n                 org.jboss.shrinkwrap.api, org.jboss.shrinkwrap.api.asset, org.jboss.shrinkwrap.api.spec,\n                 org.jboss.shrinkwrap.impl.base,\n                 org.junit, org.junit.runner, javax.inject"},{"filename":"osgi/service/src/main/java/org/jboss/as/osgi/service/BundleManagerService.java","diff":"@@ -26,12 +26,6 @@\n import java.util.HashMap;\n import java.util.Map;\n \n-import javax.management.MBeanServer;\n-import javax.management.ObjectName;\n-import javax.management.StandardMBean;\n-\n-import org.jboss.as.jmx.MBeanServerService;\n-import org.jboss.as.jmx.ObjectNameFactory;\n import org.jboss.as.osgi.deployment.DeployerServicePluginIntegration;\n import org.jboss.as.osgi.parser.SubsystemState;\n import org.jboss.as.server.ServerController;\n@@ -49,26 +43,27 @@\n import org.jboss.modules.ModuleLoadException;\n import org.jboss.modules.ModuleLoader;\n import org.jboss.modules.ModuleSpec;\n-import org.jboss.modules.filter.PathFilter;\n import org.jboss.modules.filter.PathFilters;\n import org.jboss.msc.service.Service;\n import org.jboss.msc.service.ServiceBuilder;\n import org.jboss.msc.service.ServiceContainer;\n+import org.jboss.msc.service.ServiceController.Mode;\n import org.jboss.msc.service.ServiceName;\n import org.jboss.msc.service.ServiceTarget;\n import org.jboss.msc.service.StartContext;\n import org.jboss.msc.service.StartException;\n import org.jboss.msc.service.StopContext;\n-import org.jboss.msc.service.ServiceController.Mode;\n import org.jboss.msc.value.InjectedValue;\n-import org.jboss.osgi.framework.BundleManagerMBean;\n import org.jboss.osgi.framework.Constants;\n import org.jboss.osgi.framework.bundle.BundleManager;\n import org.jboss.osgi.framework.bundle.BundleManager.IntegrationMode;\n+import org.jboss.osgi.framework.bundle.OSGiModuleLoader;\n+import org.jboss.osgi.framework.bundle.SystemBundle;\n+import org.jboss.osgi.framework.plugin.AbstractPlugin;\n import org.jboss.osgi.framework.plugin.DeployerServicePlugin;\n-import org.jboss.osgi.framework.plugin.SystemPackagesPlugin;\n-import org.osgi.framework.Bundle;\n-import org.osgi.framework.BundleException;\n+import org.jboss.osgi.framework.plugin.ModuleLoaderPlugin;\n+import org.jboss.osgi.framework.plugin.SystemModuleProviderPlugin;\n+import org.jboss.osgi.framework.plugin.internal.AbstractSystemModuleProviderPlugin;\n \n /**\n  * Service responsible for creating and managing the life-cycle of the OSGi {@link BundleManager}.\n@@ -82,10 +77,8 @@\n     public static final ServiceName SERVICE_NAME = ServiceName.JBOSS.append(\"osgi\", \"bundlemanager\");\n     private static final Logger log = Logger.getLogger(\"org.jboss.as.osgi\");\n \n-    private final InjectedValue<MBeanServer> injectedMBeanServer = new InjectedValue<MBeanServer>();\n     private final InjectedValue<ServerEnvironment> injectedEnvironment = new InjectedValue<ServerEnvironment>();\n     private final InjectedValue<ServerController> injectedServerController = new InjectedValue<ServerController>();\n-    private final InjectedValue<ServerDeploymentManager> injectedDeploymentManager = new InjectedValue<ServerDeploymentManager>();\n     private final InjectedValue<ServiceModuleLoader> injectedServiceModuleLoader = new InjectedValue<ServiceModuleLoader>();\n     private final InjectedValue<SocketBinding> osgiHttpServerPortBinding = new InjectedValue<SocketBinding>();\n     private final SubsystemState subsystemState;\n@@ -101,11 +94,8 @@ public static void addService(final ServiceTarget target, final SubsystemState s\n         ServiceBuilder<?> serviceBuilder = target.addService(BundleManagerService.SERVICE_NAME, service);\n         serviceBuilder.addDependency(ServerEnvironmentService.SERVICE_NAME, ServerEnvironment.class, service.injectedEnvironment);\n         serviceBuilder.addDependency(Services.JBOSS_SERVER_CONTROLLER, ServerController.class, service.injectedServerController);\n-        serviceBuilder.addDependency(ServerDeploymentManager.SERVICE_NAME_LOCAL, ServerDeploymentManager.class, service.injectedDeploymentManager);\n-        serviceBuilder.addDependency(Services.JBOSS_SERVICE_MODULE_LOADER, ServiceModuleLoader.class,\n-                service.injectedServiceModuleLoader);\n+        serviceBuilder.addDependency(Services.JBOSS_SERVICE_MODULE_LOADER, ServiceModuleLoader.class, service.injectedServiceModuleLoader);\n         serviceBuilder.addDependency(SocketBinding.JBOSS_BINDING_NAME.append(\"osgi-http\"), SocketBinding.class, service.osgiHttpServerPortBinding);\n-        serviceBuilder.addDependency(MBeanServerService.SERVICE_NAME, MBeanServer.class, service.injectedMBeanServer);\n         serviceBuilder.setInitialMode(Mode.ON_DEMAND);\n         serviceBuilder.install();\n     }\n@@ -126,34 +116,18 @@ public synchronized void start(StartContext context) throws StartException {\n             // Get {@link ModuleLoader} for the OSGi layer\n             bundleManager = new BundleManager(props);\n \n-            // Setup the Framework {@link Module}\n-            Module frameworkModule = new FrameworkModuleLoader(bundleManager).getFrameworkModule();\n-            bundleManager.setProperty(Module.class.getName(), frameworkModule);\n+            // Setup the Framework module provider\n+            bundleManager.addPlugin(SystemModuleProviderPlugin.class, new FrameworkModuleProvider(bundleManager));\n \n             // Setup the {@link DeployerServicePlugin}\n             ServerController serverController = injectedServerController.getValue();\n             ServerDeploymentManager deploymentManager = new ModelControllerServerDeploymentManager(serverController);\n             bundleManager.addPlugin(DeployerServicePlugin.class, new DeployerServicePluginIntegration(bundleManager, deploymentManager));\n \n-            // Register the {@link BundleManagerMBean}\n-            BundleManagerMBean bundleManagerMBean = new BundleManagerMBean() {\n-                @Override\n-                public long installBundle(ModuleIdentifier identifier) throws BundleException, ModuleLoadException {\n-                    Bundle bundle;\n-                    if (identifier.getName().startsWith(ServiceModuleLoader.MODULE_PREFIX)) {\n-                        ModuleLoader moduleLoader = injectedServiceModuleLoader.getValue();\n-                        Module module = moduleLoader.loadModule(identifier);\n-                        bundle = bundleManager.installBundle(module);\n-                    }\n-                    else {\n-                        bundle = bundleManager.installBundle(identifier);\n-                    }\n-                    return bundle.getBundleId();\n-                }\n-            };\n-            StandardMBean mbean = new StandardMBean(bundleManagerMBean, BundleManagerMBean.class);\n-            ObjectName oname = ObjectNameFactory.create(BundleManagerMBean.OBJECT_NAME);\n-            injectedMBeanServer.getValue().registerMBean(mbean, oname);\n+            // Setup the {@link ModuleLoaderPlugin}\n+            ServiceModuleLoader moduleLoader = injectedServiceModuleLoader.getValue();\n+            bundleManager.addPlugin(ModuleLoaderPlugin.class, new ModuleLoaderPluginImpl(bundleManager, moduleLoader));\n+\n         } catch (Throwable t) {\n             throw new StartException(\"Failed to create BundleManager\", t);\n         }\n@@ -200,65 +174,76 @@ public BundleManager getValue() throws IllegalStateException {\n         return bundleManager;\n     }\n \n-    /**\n-     * Provides the Framework module with its dependencies\n-     *\n-     * User defined dependencies can be added by property 'org.jboss.osgi.system.modules' in the configuration\n-     *\n-     * In case there are no user defined system modules, this loader simply returns the default 'org.jboss.osgi.framework'\n-     * module\n-     */\n-    static class FrameworkModuleLoader extends ModuleLoader {\n+    private static class FrameworkModuleProvider extends AbstractSystemModuleProviderPlugin {\n \n-        private static final String EXTENDED_FRAMEWORK_IDENTIFIER = \"org.jboss.osgi.framework.extended\";\n-        private final ModuleSpec moduleSpec;\n+        private Module frameworkModule;\n+\n+        FrameworkModuleProvider(BundleManager bundleManager) {\n+            super(bundleManager);\n+        }\n+\n+        @Override\n+        public void destroyPlugin() {\n+            super.destroyPlugin();\n+            frameworkModule = null;\n+        }\n \n-        FrameworkModuleLoader(BundleManager bundleManager) throws ModuleLoadException {\n+        @Override\n+        public Module getFrameworkModule() {\n+            return frameworkModule;\n+        }\n \n-            ModuleLoader moduleLoader = Module.getBootModuleLoader();\n-            Module frameworkModule = moduleLoader.loadModule(ModuleIdentifier.create(\"org.jboss.osgi.framework\"));\n+        @Override\n+        public Module createFrameworkModule(OSGiModuleLoader osgiLoader, SystemBundle systemBundle) throws ModuleLoadException {\n \n             // Setup the extended framework module spec\n-            ModuleSpec.Builder builder = ModuleSpec.build(ModuleIdentifier.create(EXTENDED_FRAMEWORK_IDENTIFIER));\n-            PathFilter all = PathFilters.acceptAll();\n+            ModuleLoader systemLoader = Module.getBootModuleLoader();\n+            ModuleIdentifier systemIdentifier = getSystemModule().getIdentifier();\n+            ModuleSpec.Builder specBuilder = ModuleSpec.build(ModuleIdentifier.create(Constants.JBOSGI_PREFIX + \".framework\"));\n+            specBuilder.addDependency(DependencySpec.createModuleDependencySpec(PathFilters.acceptAll(), PathFilters.acceptAll(), osgiLoader, systemIdentifier, false));\n \n             // Add a dependency on the default framework module\n-            ModuleIdentifier moduleId = frameworkModule.getIdentifier();\n-            DependencySpec moduleDep = DependencySpec.createModuleDependencySpec(all, all, moduleLoader, moduleId, false);\n-            builder.addDependency(moduleDep);\n+            ModuleIdentifier frameworkIdentifier = ModuleIdentifier.create(\"org.jboss.osgi.framework\");\n+            DependencySpec moduleDep = DependencySpec.createModuleDependencySpec(PathFilters.acceptAll(), PathFilters.acceptAll(), systemLoader, frameworkIdentifier, false);\n+            specBuilder.addDependency(moduleDep);\n \n             // Add the user defined module dependencies\n-            String modulesProps = (String) bundleManager.getProperty(SubsystemState.PROP_JBOSS_OSGI_SYSTEM_MODULES);\n+            String modulesProps = (String) getBundleManager().getProperty(SubsystemState.PROP_JBOSS_OSGI_SYSTEM_MODULES);\n             if (modulesProps != null) {\n                 for (String moduleProp : modulesProps.split(\",\")) {\n-                    moduleId = ModuleIdentifier.create(moduleProp.trim());\n-                    moduleDep = DependencySpec.createModuleDependencySpec(all, all, moduleLoader, moduleId, false);\n-                    builder.addDependency(moduleDep);\n+                    ModuleIdentifier moduleId = ModuleIdentifier.create(moduleProp.trim());\n+                    moduleDep = DependencySpec.createModuleDependencySpec(PathFilters.acceptAll(), PathFilters.acceptAll(), systemLoader, moduleId, false);\n+                    specBuilder.addDependency(moduleDep);\n                 }\n             }\n \n-            // Add a dependency on the system module\n-            PathFilter exp = PathFilters.in(bundleManager.getPlugin(SystemPackagesPlugin.class).getExportedPaths());\n-            moduleDep = DependencySpec.createModuleDependencySpec(all, exp, moduleLoader, ModuleIdentifier.SYSTEM, false);\n-            builder.addDependency(moduleDep);\n-\n-            moduleSpec = builder.create();\n+            ModuleSpec moduleSpec = specBuilder.create();\n+            osgiLoader.addModule(systemBundle.getCurrentRevision(), moduleSpec);\n+            try {\n+                frameworkModule = osgiLoader.loadModule(specBuilder.getIdentifier());\n+                return frameworkModule;\n+            } catch (ModuleLoadException ex) {\n+                throw new IllegalStateException(ex);\n+            }\n         }\n+    }\n \n-        Module getFrameworkModule() throws ModuleLoadException {\n-            return loadModule(moduleSpec.getModuleIdentifier());\n-        }\n+    private static class ModuleLoaderPluginImpl extends AbstractPlugin implements ModuleLoaderPlugin {\n \n-        @Override\n-        protected ModuleSpec findModule(ModuleIdentifier identifier) throws ModuleLoadException {\n-            if (EXTENDED_FRAMEWORK_IDENTIFIER.equals(identifier.getName()) == false)\n-                throw new IllegalArgumentException(\"Unsupported identifier: \" + identifier);\n-            return moduleSpec;\n+        private ServiceModuleLoader moduleLoader;\n+\n+        ModuleLoaderPluginImpl(BundleManager bundleManager, ServiceModuleLoader moduleLoader) {\n+            super(bundleManager);\n+            this.moduleLoader = moduleLoader;\n         }\n \n         @Override\n-        public String toString() {\n-            return \"FrameworkModuleLoader\";\n+        public Module loadModule(ModuleIdentifier identifier) throws ModuleLoadException {\n+            if (identifier.getName().startsWith(ServiceModuleLoader.MODULE_PREFIX)) {\n+                return moduleLoader.loadModule(identifier);\n+            } else {\n+                return Module.getBootModuleLoader().loadModule(identifier);\n+            }\n         }\n     }\n }"},{"filename":"osgi/service/src/main/java/org/jboss/as/osgi/service/FrameworkService.java","diff":"@@ -31,7 +31,9 @@\n import org.jboss.as.osgi.parser.SubsystemState;\n import org.jboss.as.osgi.parser.SubsystemState.OSGiModule;\n import org.jboss.logging.Logger;\n+import org.jboss.modules.Module;\n import org.jboss.modules.ModuleIdentifier;\n+import org.jboss.modules.ModuleLoader;\n import org.jboss.msc.service.Service;\n import org.jboss.msc.service.ServiceBuilder;\n import org.jboss.msc.service.ServiceContainer;\n@@ -114,10 +116,12 @@ public synchronized void start(StartContext context) throws StartException {\n             // Create the list of {@link Deployment}s for the configured modules\n             List<Deployment> deployments = new ArrayList<Deployment>();\n             BundleDeploymentPlugin depPlugin = bundleManager.getPlugin(BundleDeploymentPlugin.class);\n-            for (OSGiModule module : subsystemState.getModules()) {\n-                ModuleIdentifier identifier = module.getIdentifier();\n-                Deployment dep = depPlugin.createDeployment(identifier);\n-                dep.setAutoStart(module.isStart());\n+            for (OSGiModule moduleMetaData : subsystemState.getModules()) {\n+                ModuleIdentifier identifier = moduleMetaData.getIdentifier();\n+                ModuleLoader moduleLoader = Module.getSystemModuleLoader();\n+                Module module = moduleLoader.loadModule(identifier);\n+                Deployment dep = depPlugin.createDeployment(module);\n+                dep.setAutoStart(moduleMetaData.isStart());\n                 deployments.add(dep);\n             }\n "},{"filename":"pom.xml","diff":"@@ -111,11 +111,11 @@\n         <version.org.jboss.netty>3.2.1.Final</version.org.jboss.netty>\n         <version.org.jboss.osgi.common>1.0.6</version.org.jboss.osgi.common>\n         <version.org.jboss.osgi.deployment>1.0.10</version.org.jboss.osgi.deployment>\n-        <version.org.jboss.osgi.framework>1.0.0.Alpha17</version.org.jboss.osgi.framework>\n+        <version.org.jboss.osgi.framework>1.0.0.Alpha20</version.org.jboss.osgi.framework>\n         <version.org.jboss.osgi.jmx>1.0.9</version.org.jboss.osgi.jmx>\n-        <version.org.jboss.osgi.resolver>1.0.7</version.org.jboss.osgi.resolver>\n-        <version.org.jboss.osgi.spi>1.0.22</version.org.jboss.osgi.spi>\n-        <version.org.jboss.osgi.vfs>1.0.5</version.org.jboss.osgi.vfs>\n+        <version.org.jboss.osgi.resolver>1.0.9</version.org.jboss.osgi.resolver>\n+        <version.org.jboss.osgi.spi>1.0.24</version.org.jboss.osgi.spi>\n+        <version.org.jboss.osgi.vfs>1.0.6</version.org.jboss.osgi.vfs>\n         <version.org.jboss.remoting3.jboss-remoting>3.1.0.Beta2</version.org.jboss.remoting3.jboss-remoting>\n         <version.org.jboss.resteasy.resteasy-jaxrs>2.1.0.GA</version.org.jboss.resteasy.resteasy-jaxrs>\n         <version.org.jboss.shrinkwrap.shrinkwrap>1.0.0-alpha-11</version.org.jboss.shrinkwrap.shrinkwrap>\n@@ -345,6 +345,10 @@\n                                             <exclude>jboss.web:el-api</exclude>\n                                             <exclude>jboss.web:jsp-api</exclude>\n                                             <exclude>jboss.web:servlet-api</exclude>\n+                                            \n+                                            <!-- [JBAS-8874] Woodstox dependency causes smoke test failures -->\n+                                            <exclude>org.codehaus.woodstox:woodstox-core-asl</exclude>\n+                                            <exclude>org.codehaus.woodstox:wstx-lgpl</exclude>\n                                         </excludes>\n                                     </bannedDependencies>\n                                 </rules>\n@@ -1642,7 +1646,7 @@\n \n             <dependency>\n                 <groupId>org.jboss.as</groupId>\n-                <artifactId>jboss-as-arquillian-container-common</artifactId>\n+                <artifactId>jboss-as-arquillian-common</artifactId>\n                 <version>${project.version}</version>\n             </dependency>\n \n@@ -2233,6 +2237,13 @@\n \n             <dependency>\n                 <groupId>org.jboss.arquillian.testenricher</groupId>\n+                <artifactId>arquillian-testenricher-jmx</artifactId>\n+                <version>${version.org.jboss.arquillian}</version>\n+            </dependency>\n+\n+\n+            <dependency>\n+                <groupId>org.jboss.arquillian.testenricher</groupId>\n                 <artifactId>arquillian-testenricher-msc</artifactId>\n                 <version>${version.org.jboss.arquillian}</version>\n             </dependency>"},{"filename":"testsuite/smoke/pom.xml","diff":"@@ -125,6 +125,7 @@\n                               <include>org/jboss/as/test/embedded/demos/client/jms/*TestCase.java</include>\n                               <include>org/jboss/as/test/embedded/demos/web/connector/*TestCase.java</include>\n                               <include>org/jboss/as/test/embedded/demos/managedbean/*TestCase.java</include>\n+                              <include>org/jboss/as/test/embedded/osgi/SimpleArquillianTestCase.java</include>\n                               <!--  The other demos don't work -->\n                               <!-- include>org/jboss/as/test/embedded/**/*TestCase.java</include -->\n                            </includes>"},{"filename":"testsuite/smoke/src/test/resources/modules/demos-arquillian-module-def.xml","diff":"@@ -30,7 +30,7 @@\n     -->\n     <test-module-resources>\n         <resource-root path=\"$org.jboss.as:jboss-as-arquillian-container-embedded$\"/>\n-        <resource-root path=\"$org.jboss.as:jboss-as-arquillian-container-common$\"/>\n+        <resource-root path=\"$org.jboss.as:jboss-as-arquillian-common$\"/>\n         <resource-root path=\"$$TEST.CLASSES$$\"/>\n     </test-module-resources>\n        "}],"committed_date":"2011-03-03T06:37:00-08:00","parents":[{"id":"796149c3adda482e0c118e04af763debbfb13231"}],"message":"Rebase and squash of Thomas' OSGi changes to move up to Modules Beta14\n\nAlso includes moving the framework up to MSC Beta6\nAdditionally, contains the following commits:\n  f797255 Update OSGi framework to modules Beta14\n  4d63cb8 Add Arquillian ArchiveDeployer, DeploymentProvider\n  abstraction\n  Remove OSGiContainer abstraction, direct usage of OSGi API is\n  recommended Fix most smo\n  df17467 Remove stale dependency on ServerDeploymentManager\n  9c8ac23 Fix Arquillian ServiceContainer injection and\n  ConfigAdminTestCase\n  e86c74a Restore OSGi and many other smoke tests [JBAS-8874]\n  Woodstox\n  dependency causes smoke test failures\n  9edd0ec Swith to explicit excludes for smoke tests\n  158bedf Update OSGi subsystem. Includes a fix from Stuart\n  a76ab0f Push arquillian setup actions out to the relevant sub\n  systems","removed":["arquillian/container-common/pom.xml","arquillian/container-common/src/main/java/org/jboss/as/arquillian/container/common/AbstractDeployableContainer.java","arquillian/container-common/src/main/java/org/jboss/as/arquillian/container/common/DelegatingApplicationArchiveProcessor.java","arquillian/container-common/src/main/java/org/jboss/as/arquillian/container/common/JBossASDeploymentPackager.java","arquillian/container-common/src/main/java/org/jboss/as/arquillian/container/common/JBossAsContainerConfiguration.java","arquillian/container-common/src/main/java/org/jboss/as/arquillian/container/common/MBeanServerConnectionProvider.java","arquillian/container-common/src/main/java/org/jboss/as/arquillian/container/common/ManifestUtils.java","arquillian/container-common/src/main/java/org/jboss/as/arquillian/container/common/ModuleApplicationArchiveProcessor.java","arquillian/container-common/src/test/java/org/jboss/as/arquillian/container/common/ModuleApplicationProcessorTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/configadmin/ConfigAdminTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/configadmin/ConfiguredService.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/AbstractXServiceTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/BundleAccessesModuleServiceTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/ModuleAccessesBundleServiceTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/SimpleArchiveProviderTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/SimpleArquillianTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/api/Echo.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/bundle/ClientBundleActivator.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/bundle/SimpleActivator.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/bundle/SimpleService.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/bundle/TargetBundleActivator.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/module/ClientModuleActivator.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/module/EchoInvokerService.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/module/EchoService.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/demos/osgi/module/TargetModuleActivator.java","testsuite/smoke/src/test/resources/demos/configadmin-module.jar/META-INF/MANIFEST.MF","testsuite/smoke/src/test/resources/demos/osgi/xservice/client-module/META-INF/MANIFEST.MF","testsuite/smoke/src/test/resources/demos/osgi/xservice/client-module/META-INF/services/org.jboss.msc.service.ServiceActivator","testsuite/smoke/src/test/resources/demos/osgi/xservice/target-module/META-INF/MANIFEST.MF","testsuite/smoke/src/test/resources/demos/osgi/xservice/target-module/META-INF/services/org.jboss.msc.service.ServiceActivator"],"tree":"a344d9bdcb4bd27810e68ce77c66ac404812a8ae","added":["arquillian/common/pom.xml","arquillian/common/src/main/java/org/jboss/as/arquillian/common/ArchiveDeployerImpl.java","arquillian/common/src/main/java/org/jboss/as/arquillian/container/AbstractDeployableContainer.java","arquillian/common/src/main/java/org/jboss/as/arquillian/container/DelegatingApplicationArchiveProcessor.java","arquillian/common/src/main/java/org/jboss/as/arquillian/container/JBossASDeploymentPackager.java","arquillian/common/src/main/java/org/jboss/as/arquillian/container/JBossAsContainerConfiguration.java","arquillian/common/src/main/java/org/jboss/as/arquillian/container/MBeanServerConnectionProvider.java","arquillian/common/src/main/java/org/jboss/as/arquillian/container/ManifestUtils.java","arquillian/common/src/main/java/org/jboss/as/arquillian/container/ModuleApplicationArchiveProcessor.java","arquillian/common/src/test/java/org/jboss/as/arquillian/container/ModuleApplicationProcessorTestCase.java","arquillian/service/src/main/java/org/jboss/as/arquillian/service/ArchiveDeployerTestEnricher.java","arquillian/service/src/main/java/org/jboss/as/arquillian/service/ServerDeploymentManagerAssociation.java","build/src/main/resources/modules/org/jboss/arquillian/testenricher/jmx/main/module.xml","build/src/main/resources/modules/org/jboss/as/arquillian/common/main/module.xml","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/configadmin/ConfigAdminTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/configadmin/ConfiguredService.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/AbstractXServiceTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/BundleAccessesModuleServiceTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/ModuleAccessesBundleServiceTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/SimpleArchiveProviderTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/SimpleArquillianTestCase.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/api/Echo.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/bundle/ClientBundleActivator.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/bundle/SimpleActivator.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/bundle/SimpleService.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/bundle/TargetBundleActivator.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/module/ClientModuleActivator.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/module/EchoInvokerService.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/module/EchoService.java","testsuite/smoke/src/test/java/org/jboss/as/test/embedded/osgi/module/TargetModuleActivator.java","testsuite/smoke/src/test/resources/configadmin.jar/META-INF/MANIFEST.MF","testsuite/smoke/src/test/resources/osgi/xservice/bundle-access-test.jar/META-INF/MANIFEST.MF","testsuite/smoke/src/test/resources/osgi/xservice/client-module/META-INF/MANIFEST.MF","testsuite/smoke/src/test/resources/osgi/xservice/client-module/META-INF/services/org.jboss.msc.service.ServiceActivator","testsuite/smoke/src/test/resources/osgi/xservice/module-access-test.jar/META-INF/MANIFEST.MF","testsuite/smoke/src/test/resources/osgi/xservice/target-module/META-INF/MANIFEST.MF","testsuite/smoke/src/test/resources/osgi/xservice/target-module/META-INF/services/org.jboss.msc.service.ServiceActivator"],"committer":{"login":"dmlloyd","email":"david.lloyd@redhat.com","name":"David M. Lloyd"},"url":"/jbossas/jboss-as/commit/b6590a2152669309842b8e2286371be0617acf2c","id":"b6590a2152669309842b8e2286371be0617acf2c"}}