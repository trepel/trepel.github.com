{"commit":{"author":{"login":"baileyje","name":"John E. Bailey","email":"jbailey@redhat.com"},"url":"/jbossas/jboss-as/commit/22f39b63b2aca0d0ed2fb2a41c93262182eb2664","id":"22f39b63b2aca0d0ed2fb2a41c93262182eb2664","parents":[{"id":"5f25e4c8757c26192a78edf2c07adf5c86f88e59"}],"message":"Execute runtime tasks in a callback after the model operation are complete","tree":"db63737a4586cb5a5b4fbe55ba717bf217a7db2b","modified":[{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.arquillian.parser;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n import org.jboss.as.arquillian.service.ArquillianDeploymentProcessor;\n@@ -58,20 +61,24 @@ private ArquillianSubsystemAdd() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final ModelNode compensatingOperation = Util.getResourceRemoveOperation(operation.require(OP_ADDR));\n         context.getSubModel().setEmptyObject();\n \n         if(context instanceof BootOperationContext) {\n             log.infof(\"Activating Arquillian Subsystem\");\n-                final BootOperationContext bootContext = (BootOperationContext) context;\n-                ArquillianService.addService(context.getRuntimeContext().getServiceTarget());\n-                bootContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_ARQUILLIAN_RUNWITH, new ArquillianRunWithAnnotationProcessor());\n-                bootContext.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_ARQUILLIAN_DEPLOYMENT, new ArquillianDeploymentProcessor());\n-                bootContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_ARQUILLIAN,\n-                        new ArquillianDependencyProcessor());\n-                resultHandler.handleResultComplete();\n+            final BootOperationContext bootContext = (BootOperationContext) context;\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    ArquillianService.addService(context.getServiceTarget());\n+                    bootContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_ARQUILLIAN_RUNWITH, new ArquillianRunWithAnnotationProcessor());\n+                    bootContext.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_ARQUILLIAN_DEPLOYMENT, new ArquillianDeploymentProcessor());\n+                    bootContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_ARQUILLIAN,\n+                            new ArquillianDependencyProcessor());\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"arquillian/service/src/main/java/org/jboss/as/arquillian/parser/ArquillianSubsystemAdd.java"},{"diff":"@@ -28,7 +28,10 @@\n import static org.jboss.as.connector.subsystems.connector.Constants.DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL;\n import static org.jboss.as.connector.subsystems.connector.Constants.DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL;\n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADDRESS;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n@@ -42,7 +45,6 @@\n import org.jboss.as.controller.ResultHandler;\n import org.jboss.dmr.ModelNode;\n import org.jboss.msc.service.ServiceController;\n-import org.jboss.msc.service.ServiceController.Mode;\n \n /**\n  * @author @author <a href=\"mailto:stefano.maestri@redhat.com\">Stefano\n@@ -59,11 +61,16 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         final String name = model.require(NAME).asString();\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry().getService(ConnectorServices.CONNECTOR_CONFIG_SERVICE);\n-            if (controller != null) {\n-                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-                controller.setMode(Mode.REMOVE);\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry().getService(ConnectorServices.CONNECTOR_CONFIG_SERVICE);\n+                    if (controller != null) {\n+                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"connector/src/main/java/org/jboss/as/connector/subsystems/connector/ConnectorSubSystemRemove.java"},{"diff":"@@ -29,7 +29,10 @@\n import static org.jboss.as.connector.subsystems.connector.Constants.DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL;\n import static org.jboss.as.connector.subsystems.connector.Constants.DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL;\n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADDRESS;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n@@ -67,7 +70,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(final OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n         final String shortRunningThreadPool = operation.get(DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL).asString();\n         final String longRunningThreadPool = operation.get(DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL).asString();\n         final boolean beanValidationEnabled = ParamsUtils.parseBooleanParameter(operation, BEAN_VALIDATION_ENABLED, false);\n@@ -100,47 +103,53 @@ public OperationResult execute(final OperationContext context, ModelNode operati\n         }\n \n         if (context instanceof BootOperationContext) {\n-            ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-            WorkManager wm = new WorkManagerImpl();\n-\n-            final WorkManagerService wmService = new WorkManagerService(wm);\n-            serviceTarget\n-                    .addService(ConnectorServices.WORKMANAGER_SERVICE, wmService)\n-                    .addDependency(ThreadsServices.EXECUTOR.append(shortRunningThreadPool), Executor.class,\n-                            wmService.getExecutorShortInjector())\n-                    .addDependency(ThreadsServices.EXECUTOR.append(longRunningThreadPool), Executor.class,\n-                            wmService.getExecutorLongInjector())\n-                    .addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR, JBossXATerminator.class,\n-                            wmService.getXaTerminatorInjector()).setInitialMode(Mode.ACTIVE).install();\n-\n-            CloneableBootstrapContext ctx = new BaseCloneableBootstrapContext();\n-            final DefaultBootStrapContextService defaultBootCtxService = new DefaultBootStrapContextService(ctx);\n-            serviceTarget\n-                    .addService(ConnectorServices.DEFAULT_BOOTSTRAP_CONTEXT_SERVICE, defaultBootCtxService)\n-                    .addDependency(ConnectorServices.WORKMANAGER_SERVICE, WorkManager.class,\n-                            defaultBootCtxService.getWorkManagerValueInjector())\n-                    .addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR, JBossXATerminator.class,\n-                            defaultBootCtxService.getXaTerminatorInjector())\n-                    .addDependency(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER,\n-                            com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,\n-                            defaultBootCtxService.getTxManagerInjector()).setInitialMode(Mode.ACTIVE).install();\n-            final ConnectorSubsystemConfiguration config = new ConnectorSubsystemConfiguration();\n-\n-            config.setArchiveValidation(archiveValidationEnabled);\n-            config.setArchiveValidationFailOnError(failOnError);\n-            config.setArchiveValidationFailOnWarn(failOnWarn);\n-\n-            // FIXME Bean validation currently not used\n-            config.setBeanValidation(false);\n-\n-            final ConnectorConfigService connectorConfigService = new ConnectorConfigService(config);\n-            serviceTarget\n-                    .addService(ConnectorServices.CONNECTOR_CONFIG_SERVICE, connectorConfigService)\n-                    .addDependency(ConnectorServices.DEFAULT_BOOTSTRAP_CONTEXT_SERVICE, CloneableBootstrapContext.class,\n-                            connectorConfigService.getDefaultBootstrapContextInjector()).setInitialMode(Mode.ACTIVE).install();\n-\n-            new RaDeploymentActivator().activate(BootOperationContext.class.cast(context), serviceTarget);\n-            resultHandler.handleResultComplete(); // TODO: Listener\n+            final BootOperationContext bootContext = BootOperationContext.class.cast(context);\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    ServiceTarget serviceTarget = context.getServiceTarget();\n+                    WorkManager wm = new WorkManagerImpl();\n+\n+                    final WorkManagerService wmService = new WorkManagerService(wm);\n+                    serviceTarget\n+                            .addService(ConnectorServices.WORKMANAGER_SERVICE, wmService)\n+                            .addDependency(ThreadsServices.EXECUTOR.append(shortRunningThreadPool), Executor.class,\n+                                    wmService.getExecutorShortInjector())\n+                            .addDependency(ThreadsServices.EXECUTOR.append(longRunningThreadPool), Executor.class,\n+                                    wmService.getExecutorLongInjector())\n+                            .addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR, JBossXATerminator.class,\n+                                    wmService.getXaTerminatorInjector()).setInitialMode(Mode.ACTIVE).install();\n+\n+                    CloneableBootstrapContext ctx = new BaseCloneableBootstrapContext();\n+                    final DefaultBootStrapContextService defaultBootCtxService = new DefaultBootStrapContextService(ctx);\n+                    serviceTarget\n+                            .addService(ConnectorServices.DEFAULT_BOOTSTRAP_CONTEXT_SERVICE, defaultBootCtxService)\n+                            .addDependency(ConnectorServices.WORKMANAGER_SERVICE, WorkManager.class,\n+                                    defaultBootCtxService.getWorkManagerValueInjector())\n+                            .addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR, JBossXATerminator.class,\n+                                    defaultBootCtxService.getXaTerminatorInjector())\n+                            .addDependency(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER,\n+                                    com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,\n+                                    defaultBootCtxService.getTxManagerInjector()).setInitialMode(Mode.ACTIVE).install();\n+                    final ConnectorSubsystemConfiguration config = new ConnectorSubsystemConfiguration();\n+\n+                    config.setArchiveValidation(archiveValidationEnabled);\n+                    config.setArchiveValidationFailOnError(failOnError);\n+                    config.setArchiveValidationFailOnWarn(failOnWarn);\n+\n+                    // FIXME Bean validation currently not used\n+                    config.setBeanValidation(false);\n+\n+                    final ConnectorConfigService connectorConfigService = new ConnectorConfigService(config);\n+                    serviceTarget\n+                            .addService(ConnectorServices.CONNECTOR_CONFIG_SERVICE, connectorConfigService)\n+                            .addDependency(ConnectorServices.DEFAULT_BOOTSTRAP_CONTEXT_SERVICE, CloneableBootstrapContext.class,\n+                                    connectorConfigService.getDefaultBootstrapContextInjector()).setInitialMode(Mode.ACTIVE).install();\n+\n+                    new RaDeploymentActivator().activate(bootContext, serviceTarget);\n+                    resultHandler.handleResultComplete(); // TODO: Listener\n+                }\n+            });\n+\n         } else {\n             resultHandler.handleResultComplete();\n         }\n@@ -149,7 +158,6 @@ public OperationResult execute(final OperationContext context, ModelNode operati\n         final ModelNode compensating = new ModelNode();\n         compensating.get(OP_ADDR).set(operation.require(ADDRESS));\n         compensating.get(OP).set(\"remove\");\n-\n         return new BasicOperationResult(compensating);\n     }\n ","filename":"connector/src/main/java/org/jboss/as/connector/subsystems/connector/ConnectorSubsystemAdd.java"},{"diff":"@@ -69,7 +69,10 @@\n import static org.jboss.as.connector.subsystems.datasources.Constants.XA_DATASOURCES;\n import static org.jboss.as.connector.subsystems.datasources.Constants.XA_RESOURCE_TIMEOUT;\n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n@@ -124,7 +127,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n         // Populate subModel\n         final ModelNode subModel = context.getSubModel();\n         subModel.setEmptyObject();\n@@ -179,15 +182,19 @@ public OperationResult execute(OperationContext context, final ModelNode operati\n \n         if (context instanceof BootOperationContext) {\n             final BootOperationContext updateContext = BootOperationContext.class.cast(context);\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n \n-            DataSources datasources = buildDataSourcesObject(operation);\n-            serviceTarget.addService(ConnectorServices.DATASOURCES_SERVICE, new DataSourcesService(datasources))\n-                    .setInitialMode(Mode.ACTIVE).install();\n+                    DataSources datasources = buildDataSourcesObject(operation);\n+                    serviceTarget.addService(ConnectorServices.DATASOURCES_SERVICE, new DataSourcesService(datasources))\n+                            .setInitialMode(Mode.ACTIVE).install();\n \n-            updateContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_DATA_SOURCES,\n-                    new DataSourcesAttachmentProcessor(datasources));\n-            resultHandler.handleResultComplete();\n+                    updateContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_DATA_SOURCES,\n+                            new DataSourcesAttachmentProcessor(datasources));\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"connector/src/main/java/org/jboss/as/connector/subsystems/datasources/DataSourcesSubsystemAdd.java"},{"diff":"@@ -50,7 +50,10 @@\n import static org.jboss.as.connector.subsystems.resourceadapters.Constants.USE_JAVA_CONTEXT;\n import static org.jboss.as.connector.subsystems.resourceadapters.Constants.XA_RESOURCE_TIMEOUT;\n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n@@ -99,7 +102,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n         // Populate subModel\n         final ModelNode subModel = context.getSubModel();\n         subModel.setEmptyObject();\n@@ -130,14 +133,18 @@ public OperationResult execute(OperationContext context, final ModelNode operati\n \n         if (context instanceof BootOperationContext) {\n             final BootOperationContext updateContext = (BootOperationContext) context;\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n \n-            ResourceAdapters resourceAdapters = buildResourceAdaptersObject(operation);\n-            serviceTarget.addService(ConnectorServices.RESOURCEADAPTERS_SERVICE, new ResourceAdaptersService(resourceAdapters))\n-                    .setInitialMode(Mode.ACTIVE).install();\n+                    ResourceAdapters resourceAdapters = buildResourceAdaptersObject(operation);\n+                    serviceTarget.addService(ConnectorServices.RESOURCEADAPTERS_SERVICE, new ResourceAdaptersService(resourceAdapters))\n+                            .setInitialMode(Mode.ACTIVE).install();\n \n-            updateContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_RESOURCE_ADAPTERS, new ResourceAdaptersAttachingProcessor(resourceAdapters));\n-            resultHandler.handleResultComplete();\n+                    updateContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_RESOURCE_ADAPTERS, new ResourceAdaptersAttachingProcessor(resourceAdapters));\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"connector/src/main/java/org/jboss/as/connector/subsystems/resourceadapters/ResourceAdaptersSubsystemAdd.java"},{"diff":"@@ -186,19 +186,7 @@ public void handleCancellation() {\n                 }\n             } : handler;\n             try {\n-                final OperationResult result = doExecute(context, operation, operationHandler, useHandler);\n-                if(operationHandler instanceof ModelUpdateOperationHandler) {\n-                    final ModelNode model = this.model;\n-                    synchronized (model) {\n-                        if (operationHandler instanceof ModelRemoveOperationHandler) {\n-                            address.remove(model);\n-                        } else {\n-                            address.navigate(model, true).set(subModel);\n-                        }\n-                        persistConfiguration(model);\n-                    }\n-                }\n-                return result;\n+                return doExecute(context, operation, operationHandler, useHandler, address, subModel);\n             } catch (OperationFailedException e) {\n                 useHandler.handleFailed(e.getFailureDescription());\n                 return new BasicOperationResult();\n@@ -258,14 +246,28 @@ protected OperationContext getOperationContext(final ModelNode subModel, final M\n      * method, applying the operation to the relevant submodel.  If this method throws an exception, the result handler\n      * will automatically be notified.  If the operation completes successfully, any configuration change will be persisted.\n      *\n+     *\n      * @param context the context for the operation\n      * @param operation the operation itself\n      * @param operationHandler the operation handler which will run the operation\n      * @param resultHandler the result handler for this operation\n-     * @return a handle which can be used to asynchronously cancel the operation\n+     * @param address\n+     *@param subModel @return a handle which can be used to asynchronously cancel the operation\n      */\n-    protected OperationResult doExecute(final OperationContext context, final ModelNode operation, final OperationHandler operationHandler, final ResultHandler resultHandler) throws OperationFailedException {\n-        return operationHandler.execute(context, operation, resultHandler);\n+    protected OperationResult doExecute(final OperationContext context, final ModelNode operation, final OperationHandler operationHandler, final ResultHandler resultHandler, PathAddress address, ModelNode subModel) throws OperationFailedException {\n+        final OperationResult result = operationHandler.execute(context, operation, resultHandler);\n+        if (operationHandler instanceof ModelUpdateOperationHandler) {\n+            final ModelNode model = this.model;\n+            synchronized (model) {\n+                if (operationHandler instanceof ModelRemoveOperationHandler) {\n+                    address.remove(model);\n+                } else {\n+                    address.navigate(model, true).set(subModel);\n+                }\n+                persistConfiguration(model);\n+            }\n+        }\n+        return result;\n     }\n \n     protected ModelNodeRegistration getRegistry() {","filename":"controller/src/main/java/org/jboss/as/controller/BasicModelController.java"},{"diff":"@@ -54,5 +54,10 @@\n     ModelNode getSubModel() throws IllegalArgumentException;\n \n \n+    /**\n+     * Get access to the runtime context for this operation\n+     *\n+     * @return The runtime context if this operation is running in a runtime capable state, otherwise null.\n+     */\n     RuntimeOperationContext getRuntimeContext();\n }","filename":"controller/src/main/java/org/jboss/as/controller/OperationContext.java"},{"diff":"@@ -30,16 +30,9 @@\n  */\n public interface RuntimeOperationContext {\n     /**\n-     * Get the target to which new services may be added.\n+     * Set the runtime task for this operation.\n      *\n-     * @return the service target\n+     * @param runtimeTask\n      */\n-    ServiceTarget getServiceTarget();\n-\n-    /**\n-     * Get the service registry.\n-     *\n-     * @return the service registry.\n-     */\n-    ServiceRegistry getServiceRegistry();\n+    void setRuntimeTask(final RuntimeTask runtimeTask);\n }","filename":"controller/src/main/java/org/jboss/as/controller/RuntimeOperationContext.java"},{"diff":"@@ -21,10 +21,13 @@\n  */\n package org.jboss.as.controller.operations;\n \n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n import org.jboss.as.controller.RuntimeOperationContext;\n+import org.jboss.as.controller.RuntimeTask;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.COMPENSATING_OPERATION;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n@@ -32,7 +35,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.CountDownLatch;\n \n import org.jboss.as.controller.ModelAddOperationHandler;\n import org.jboss.as.controller.ModelController;\n@@ -85,21 +87,8 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n \n     protected void executeSteps(final CompositeOperationContext context, final List<ModelNode> steps) {\n \n-        final StepHandlerContext stepHandlerContext = new StepHandlerContext(steps.size());\n+        final StepHandlerContext stepHandlerContext = new StepHandlerContext(context, steps.size());\n \n-        executeStepHandlers(context, steps, stepHandlerContext);\n-\n-        final ModelNode results = stepHandlerContext.getResults();\n-\n-        if (stepHandlerContext.hasFailures()) {\n-            context.handleFailures(stepHandlerContext, results);\n-        }\n-        else {\n-            context.handleSuccess(stepHandlerContext, results);\n-        }\n-    }\n-\n-    protected void executeStepHandlers(final CompositeOperationContext context, final List<ModelNode> steps, final StepHandlerContext stepHandlerContext) {\n         for (int i = 0; i < steps.size(); i++) {\n             final ModelNode step = steps.get(i);\n             if (stepHandlerContext.hasFailures()) {\n@@ -108,12 +97,11 @@ protected void executeStepHandlers(final CompositeOperationContext context, fina\n             else {\n                 final PathAddress address = PathAddress.pathAddress(step.require(OP_ADDR));\n                 final String operationName = step.require(OP).asString();\n-                final OperationHandler stepHandler = context.getRegistry().getOperationHandler(address, operationName);\n \n                 final Integer id = Integer.valueOf(i);\n+                final OperationHandler stepHandler = context.getRegistry().getOperationHandler(address, operationName);\n                 final OperationContext stepContext = context.getStepOperationContext(id, address, stepHandler);\n                 final ResultHandler stepResultHandler = new StepResultHandler(id, stepHandlerContext);\n-\n                 try {\n                     final OperationResult result = stepHandler.execute(stepContext, step, stepResultHandler);\n                     stepHandlerContext.setRollbackOp(id, result.getCompensatingOperation());\n@@ -132,10 +120,23 @@ protected void executeStepHandlers(final CompositeOperationContext context, fina\n                 } catch (OperationFailedException e) {\n                     stepResultHandler.handleFailed(e.getFailureDescription());\n                 } catch (Throwable t) {\n-                    stepResultHandler.handleFailed(new ModelNode().set(t.getLocalizedMessage()));\n+                    final String message = t.getLocalizedMessage() != null ? t.getLocalizedMessage() : t.getMessage();\n+                    stepResultHandler.handleFailed(new ModelNode().set(message));\n                 }\n             }\n         }\n+        stepHandlerContext.setModelComplete();\n+\n+        if(!stepHandlerContext.hasFailures() && context.overallContext.getRuntimeContext() != null) {\n+            final RuntimeTask runtimeTask = getRuntimeTasks(context);\n+            if(runtimeTask != null) {\n+                context.overallContext.getRuntimeContext().setRuntimeTask(runtimeTask);\n+            }\n+        }\n+    }\n+\n+    protected RuntimeTask getRuntimeTasks(CompositeOperationContext context) {\n+        return null;\n     }\n \n     protected static class CompositeOperationContext {\n@@ -269,11 +270,15 @@ protected ResultHandler getResultHandler() {\n         private final ModelNode resultsNode = new ModelNode();\n         private final Map<Integer, ModelNode> rollbackOps = new HashMap<Integer, ModelNode>();\n         private boolean hasFailures = false;\n-        private final CountDownLatch latch;\n+        private final AtomicInteger count;\n+        private AtomicBoolean modelComplete = new AtomicBoolean(false);\n+        private final CompositeOperationContext context;\n+\n \n-        private StepHandlerContext(final int count) {\n-            this.latch = new CountDownLatch(count);\n+        private StepHandlerContext(final CompositeOperationContext context, final int count) {\n+            this.count = new AtomicInteger(count);\n             this.resultsNode.setEmptyList();\n+            this.context = context;\n         }\n \n         public void setRollbackOp(final Integer id, final ModelNode compensatingOperation) {\n@@ -289,7 +294,9 @@ public void recordResult(final Integer id, final ModelNode result) {\n                 }\n //            }\n \n-            latch.countDown();\n+            if(count.decrementAndGet() == 0 && modelComplete.get()) {\n+                processComplete();\n+            }\n         }\n \n         public void recordFailure(final Integer id, final ModelNode failureDescription) {\n@@ -298,7 +305,9 @@ public void recordFailure(final Integer id, final ModelNode failureDescription)\n                 resultsNode.get(id).get(FAILURE_DESCRIPTION).set(failureDescription);\n                 hasFailures = true;\n             }\n-            latch.countDown();\n+            if(count.decrementAndGet() == 0 && modelComplete.get()) {\n+                processComplete();\n+            }\n         }\n \n         public void recordCancellation(final Integer id) {\n@@ -308,7 +317,9 @@ public void recordCancellation(final Integer id) {\n                     resultsNode.get(id).get(CANCELLED).set(true);\n                 }\n             }\n-            latch.countDown();\n+            if(count.decrementAndGet() == 0 && modelComplete.get()) {\n+                processComplete();\n+            }\n         }\n \n         public boolean hasFailures() {\n@@ -317,15 +328,12 @@ public boolean hasFailures() {\n             }\n         }\n \n-        private ModelNode getResults() {\n-            try {\n-                latch.await();\n-            }\n-            catch (final InterruptedException e) {\n-                // FIXME cancel, etc\n-                Thread.currentThread().interrupt();\n+        private void processComplete() {\n+            if (hasFailures()) {\n+                context.handleFailures(this, resultsNode);\n+            } else {\n+                context.handleSuccess(this, resultsNode);\n             }\n-            return resultsNode;\n         }\n \n         public ModelNode getCompensatingOperation(final Integer id) {\n@@ -333,6 +341,12 @@ public ModelNode getCompensatingOperation(final Integer id) {\n                 return rollbackOps.get(id);\n             }\n         }\n+\n+        public void setModelComplete() {\n+            if(modelComplete.compareAndSet(false,true) && count.get() == 0) {\n+                processComplete();\n+            }\n+        }\n     }\n \n     private static class StepResultHandler implements ResultHandler {","filename":"controller/src/main/java/org/jboss/as/controller/operations/BaseCompositeOperationHandler.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.server.deployment.scanner;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n@@ -53,7 +56,7 @@ private DeploymentScannerAdd() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n         final String name = address.getLastElement().getValue();\n@@ -77,10 +80,14 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         subModel.get(CommonAttributes.SCAN_INTERVAL).set(interval);\n         if(relativeTo != null) subModel.get(CommonAttributes.RELATIVE_TO).set(relativeTo);\n \n-        if(context.getRuntimeContext() != null) {\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-            DeploymentScannerService.addService(serviceTarget, name, relativeTo, path, interval, TimeUnit.MILLISECONDS, enabled);\n-            resultHandler.handleResultComplete();\n+        if (context.getRuntimeContext() != null) {\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n+                    DeploymentScannerService.addService(serviceTarget, name, relativeTo, path, interval, TimeUnit.MILLISECONDS, enabled);\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"deployment-scanner/src/main/java/org/jboss/as/server/deployment/scanner/DeploymentScannerAdd.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n@@ -51,7 +53,7 @@ private DeploymentScannerDisable() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) throws OperationFailedException {\n \n         final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n         final String name = address.getLastElement().getValue();\n@@ -64,19 +66,23 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         context.getSubModel().get(CommonAttributes.SCAN_ENABLED).set(false);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry()\n-                    .getService(DeploymentScannerService.getServiceName(name));\n-            if (controller == null) {\n-                throw new OperationFailedException(new ModelNode().set(\"scanner not configured\"));\n-            } else {\n-                try {\n-                    final DeploymentScanner scanner = (DeploymentScanner) controller.getValue();\n-                    scanner.stopScanner();\n-                    resultHandler.handleResultComplete();\n-                } catch (Throwable t) {\n-                    throw new OperationFailedException(getFailureResult(t));\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(DeploymentScannerService.getServiceName(name));\n+                    if (controller == null) {\n+                        throw new OperationFailedException(new ModelNode().set(\"scanner not configured\"));\n+                    } else {\n+                        try {\n+                            final DeploymentScanner scanner = (DeploymentScanner) controller.getValue();\n+                            scanner.stopScanner();\n+                            resultHandler.handleResultComplete();\n+                        } catch (Throwable t) {\n+                            throw new OperationFailedException(getFailureResult(t));\n+                        }\n+                    }\n                 }\n-            }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"deployment-scanner/src/main/java/org/jboss/as/server/deployment/scanner/DeploymentScannerDisable.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n@@ -49,7 +51,7 @@ private DeploymentScannerEnable() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) throws OperationFailedException {\n \n         final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n         final String name = address.getLastElement().getValue();\n@@ -60,20 +62,24 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         // update the model\n         context.getSubModel().get(CommonAttributes.SCAN_ENABLED).set(true);\n \n-        if(context.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry().getService(DeploymentScannerService.getServiceName(name));\n-            if (controller == null) {\n-                throw new OperationFailedException(new ModelNode().set(\"scanner not configured\"));\n-            } else {\n-                try {\n-                    final DeploymentScanner scanner = (DeploymentScanner) controller.getValue();\n-                    scanner.startScanner();\n-                    resultHandler.handleResultComplete();\n-                } catch (Throwable t) {\n-                    throw new OperationFailedException(getFailureResult(t));\n+        if (context.getRuntimeContext() != null) {\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry().getService(DeploymentScannerService.getServiceName(name));\n+                    if (controller == null) {\n+                        throw new OperationFailedException(new ModelNode().set(\"scanner not configured\"));\n+                    } else {\n+                        try {\n+                            final DeploymentScanner scanner = (DeploymentScanner) controller.getValue();\n+                            scanner.startScanner();\n+                            resultHandler.handleResultComplete();\n+                        } catch (Throwable t) {\n+                            throw new OperationFailedException(getFailureResult(t));\n+                        }\n+                    }\n                 }\n-            }\n-        }else {\n+            });\n+        } else {\n             resultHandler.handleResultComplete();\n         }\n         return new BasicOperationResult(compensatingOperation);","filename":"deployment-scanner/src/main/java/org/jboss/as/server/deployment/scanner/DeploymentScannerEnable.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.server.deployment.scanner;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n@@ -50,7 +53,7 @@ private DeploymentScannerRemove() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n         final String name = address.getLastElement().getValue();\n@@ -66,13 +69,17 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         compensatingOperation.get(CommonAttributes.RELATIVE_TO).set(subModel.get(CommonAttributes.RELATIVE_TO));\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry()\n-                    .getService(DeploymentScannerService.getServiceName(name));\n-            if (controller != null) {\n-                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(DeploymentScannerService.getServiceName(name));\n+                    if (controller != null) {\n+                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"deployment-scanner/src/main/java/org/jboss/as/server/deployment/scanner/DeploymentScannerRemove.java"},{"diff":"@@ -25,8 +25,11 @@\n \n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationContext;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n import org.jboss.as.controller.ResultHandler;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import org.jboss.as.controller.interfaces.InterfaceCriteria;\n import org.jboss.as.controller.interfaces.ParsedInterfaceCriteria;\n import org.jboss.as.controller.operations.common.InterfaceAddHandler;\n@@ -53,13 +56,17 @@ private SpecifiedInterfaceAddHandler() {\n     }\n \n     @Override\n-    protected OperationResult installInterface(final String name, final ParsedInterfaceCriteria criteria, OperationContext context, ResultHandler resultHandler, ModelNode compensatingOp) {\n+    protected OperationResult installInterface(final String name, final ParsedInterfaceCriteria criteria, final OperationContext context, final ResultHandler resultHandler, final ModelNode compensatingOp) {\n         if (context instanceof HostOperationContext) {\n-            final ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-            ServiceBuilder<NetworkInterfaceBinding> builder = target.addService(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(name), createInterfaceService(name, criteria));\n-            builder.setInitialMode(Mode.ON_DEMAND)\n-                .install();\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget target = context.getServiceTarget();\n+                    ServiceBuilder<NetworkInterfaceBinding> builder = target.addService(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(name), createInterfaceService(name, criteria));\n+                    builder.setInitialMode(Mode.ON_DEMAND)\n+                            .install();\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"host-controller/src/main/java/org/jboss/as/host/controller/operations/SpecifiedInterfaceAddHandler.java"},{"diff":"@@ -20,8 +20,11 @@\n \n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationContext;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n import org.jboss.as.controller.ResultHandler;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import org.jboss.as.controller.operations.common.InterfaceRemoveHandler;\n import org.jboss.as.server.services.net.NetworkInterfaceService;\n import org.jboss.dmr.ModelNode;\n@@ -37,13 +40,19 @@\n     public static SpecifiedInterfaceRemoveHandler INSTANCE = new SpecifiedInterfaceRemoveHandler();\n \n     @Override\n-    protected OperationResult uninstallInterface(final String name, ModelNode criteria, OperationContext context, ResultHandler resultHandler, ModelNode compensatingOp) {\n+    protected OperationResult uninstallInterface(final String name, final ModelNode criteria, final OperationContext context, final ResultHandler resultHandler, final ModelNode compensatingOp) {\n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry()\n-                .getService(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(name));\n-            if (controller != null) {\n-                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(name));\n+                    if (controller != null) {\n+                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"host-controller/src/main/java/org/jboss/as/host/controller/operations/SpecifiedInterfaceRemoveHandler.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.jmx;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n import org.jboss.as.controller.ModelUpdateOperationHandler;\n@@ -50,7 +53,7 @@ private JMXConnectorAdd() {\n      * {@inheritDoc}\n      */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final String serverBinding = operation.require(CommonAttributes.SERVER_BINDING).asString();\n         final String registryBinding = operation.require(CommonAttributes.REGISTRY_BINDING).asString();\n@@ -61,9 +64,13 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         final ModelNode compensatingOperation = Util.getEmptyOperation(JMXConnectorRemove.OPERATION_NAME, operation.require(OP_ADDR));\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-            JMXConnectorService.addService(target, serverBinding, registryBinding);\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget target = context.getServiceTarget();\n+                    JMXConnectorService.addService(target, serverBinding, registryBinding);\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"jmx/src/main/java/org/jboss/as/jmx/JMXConnectorAdd.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.jmx;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n@@ -48,7 +51,7 @@ private JMXConnectorRemove() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final ModelNode subModel = context.getSubModel();\n \n@@ -62,11 +65,16 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         subModel.get(CommonAttributes.REGISTRY_BINDING).clear();\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> service = context.getRuntimeContext().getServiceRegistry()\n-                    .getService(JMXConnectorService.SERVICE_NAME);\n-            if (service != null) {\n-                service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> service = context.getServiceRegistry().getService(JMXConnectorService.SERVICE_NAME);\n+                    if (service != null) {\n+                        service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"jmx/src/main/java/org/jboss/as/jmx/JMXConnectorRemove.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.jmx;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n import org.jboss.as.controller.ModelAddOperationHandler;\n@@ -47,15 +50,19 @@ private JMXSubsystemAdd() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         context.getSubModel().get(CommonAttributes.SERVER_BINDING);\n         context.getSubModel().get(CommonAttributes.REGISTRY_BINDING);\n \n         if(context.getRuntimeContext() != null) {\n-            // Add the MBean service\n-            MBeanServerService.addService(context.getRuntimeContext().getServiceTarget());\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    // Add the MBean service\n+                    MBeanServerService.addService(context.getServiceTarget());\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"jmx/src/main/java/org/jboss/as/jmx/JMXSubsystemAdd.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n@@ -86,31 +88,34 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         subModel.get(OVERFLOW_ACTION).set(operation.get(OVERFLOW_ACTION));\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-            try {\n-                final AsyncHandlerService service = new AsyncHandlerService();\n-                final ServiceBuilder<Handler> serviceBuilder = serviceTarget.addService(LogServices.handlerName(name), service);\n-                final List<InjectedValue<Handler>> list = new ArrayList<InjectedValue<Handler>>();\n-                for (final ModelNode handlerName : operation.get(SUBHANDLERS).asList()) {\n-                    final InjectedValue<Handler> injectedValue = new InjectedValue<Handler>();\n-                    serviceBuilder.addDependency(LogServices.handlerName(handlerName.asString()), Handler.class, injectedValue);\n-                    list.add(injectedValue);\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n+                    try {\n+                        final AsyncHandlerService service = new AsyncHandlerService();\n+                        final ServiceBuilder<Handler> serviceBuilder = serviceTarget.addService(LogServices.handlerName(name), service);\n+                        final List<InjectedValue<Handler>> list = new ArrayList<InjectedValue<Handler>>();\n+                        for (final ModelNode handlerName : operation.get(SUBHANDLERS).asList()) {\n+                            final InjectedValue<Handler> injectedValue = new InjectedValue<Handler>();\n+                            serviceBuilder.addDependency(LogServices.handlerName(handlerName.asString()), Handler.class, injectedValue);\n+                            list.add(injectedValue);\n+                        }\n+                        service.addHandlers(list);\n+                        if (operation.hasDefined(QUEUE_LENGTH))\n+                            service.setQueueLength(operation.get(QUEUE_LENGTH).asInt());\n+                        service.setLevel(Level.parse(operation.get(LEVEL).asString()));\n+                        service.setOverflowAction(OverflowAction.valueOf(operation.get(OVERFLOW_ACTION).asString()));\n+                        serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);\n+                        serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                        serviceBuilder.install();\n+                    } catch (Throwable t) {\n+                        throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n+                    }\n                 }\n-                service.addHandlers(list);\n-                if (operation.hasDefined(QUEUE_LENGTH))\n-                    service.setQueueLength(operation.get(QUEUE_LENGTH).asInt());\n-                service.setLevel(Level.parse(operation.get(LEVEL).asString()));\n-                service.setOverflowAction(OverflowAction.valueOf(operation.get(OVERFLOW_ACTION).asString()));\n-                serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);\n-                serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n-                serviceBuilder.install();\n-            } catch (Throwable t) {\n-                throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n-            }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }\n-\n         return new BasicOperationResult(compensatingOperation);\n     }\n ","filename":"logging/src/main/java/org/jboss/as/logging/AsyncHandlerAdd.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n@@ -83,21 +85,25 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         subModel.get(QUEUE_LENGTH).set(operation.get(QUEUE_LENGTH));\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-            try {\n-                final ConsoleHandlerService service = new ConsoleHandlerService();\n-                final ServiceBuilder<Handler> serviceBuilder = serviceTarget.addService(LogServices.handlerName(name), service);\n-                service.setLevel(Level.parse(operation.get(LEVEL).asString()));\n-                final Boolean autoFlush = operation.get(AUTOFLUSH).asBoolean();\n-                if (autoFlush != null) service.setAutoflush(autoFlush.booleanValue());\n-                if (operation.hasDefined(ENCODING)) service.setEncoding(operation.get(ENCODING).asString());\n-                if (operation.hasDefined(FORMATTER)) service.setFormatterSpec(createFormatterSpec(operation));\n-                serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);\n-                serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n-                serviceBuilder.install();\n-            } catch (Throwable t) {\n-                throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n+                    try {\n+                        final ConsoleHandlerService service = new ConsoleHandlerService();\n+                        final ServiceBuilder<Handler> serviceBuilder = serviceTarget.addService(LogServices.handlerName(name), service);\n+                        service.setLevel(Level.parse(operation.get(LEVEL).asString()));\n+                        final Boolean autoFlush = operation.get(AUTOFLUSH).asBoolean();\n+                        if (autoFlush != null) service.setAutoflush(autoFlush.booleanValue());\n+                        if (operation.hasDefined(ENCODING)) service.setEncoding(operation.get(ENCODING).asString());\n+                        if (operation.hasDefined(FORMATTER)) service.setFormatterSpec(createFormatterSpec(operation));\n+                        serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);\n+                        serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                        serviceBuilder.install();\n+                    } catch (Throwable t) {\n+                        throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"logging/src/main/java/org/jboss/as/logging/ConsoleHandlerAdd.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n@@ -89,27 +91,31 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n \n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-            try {\n-                final FileHandlerService service = new FileHandlerService();\n-                final ServiceBuilder<Handler> serviceBuilder = serviceTarget.addService(LogServices.handlerName(name), service);\n-                if (operation.hasDefined(FILE)) {\n-                    if (operation.get(FILE).hasDefined(RELATIVE_TO)) {\n-                        serviceBuilder.addDependency(AbstractPathService.pathNameOf(operation.get(FILE, RELATIVE_TO).asString()), String.class, service.getRelativeToInjector());\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n+                    try {\n+                        final FileHandlerService service = new FileHandlerService();\n+                        final ServiceBuilder<Handler> serviceBuilder = serviceTarget.addService(LogServices.handlerName(name), service);\n+                        if (operation.hasDefined(FILE)) {\n+                            if (operation.get(FILE).hasDefined(RELATIVE_TO)) {\n+                                serviceBuilder.addDependency(AbstractPathService.pathNameOf(operation.get(FILE, RELATIVE_TO).asString()), String.class, service.getRelativeToInjector());\n+                            }\n+                            service.setPath(operation.get(FILE, PATH).asString());\n+                        }\n+                        service.setLevel(Level.parse(operation.get(LEVEL).asString()));\n+                        final Boolean autoFlush = operation.get(AUTOFLUSH).asBoolean();\n+                        if (autoFlush != null) service.setAutoflush(autoFlush.booleanValue());\n+                        if (operation.hasDefined(ENCODING)) service.setEncoding(operation.get(ENCODING).asString());\n+                        if (operation.hasDefined(FORMATTER)) service.setFormatterSpec(createFormatterSpec(operation));\n+                        serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);\n+                        serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                        serviceBuilder.install();\n+                    } catch (Throwable t) {\n+                        throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n                     }\n-                    service.setPath(operation.get(FILE, PATH).asString());\n                 }\n-                service.setLevel(Level.parse(operation.get(LEVEL).asString()));\n-                final Boolean autoFlush = operation.get(AUTOFLUSH).asBoolean();\n-                if (autoFlush != null) service.setAutoflush(autoFlush.booleanValue());\n-                if (operation.hasDefined(ENCODING)) service.setEncoding(operation.get(ENCODING).asString());\n-                if (operation.hasDefined(FORMATTER)) service.setFormatterSpec(createFormatterSpec(operation));\n-                serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);\n-                serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n-                serviceBuilder.install();\n-            } catch (Throwable t) {\n-                throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n-            }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"logging/src/main/java/org/jboss/as/logging/FileHandlerAdd.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n@@ -66,27 +68,31 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         subModel.get(CommonAttributes.HANDLERS).set(handlers);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-            final String loggerName = name;\n-            try {\n-                // Install logger service\n-                final LoggerService service = new LoggerService(loggerName);\n-                service.setLevel(Level.parse(level));\n-                target.addService(LogServices.loggerName(loggerName), service)\n-                        .setInitialMode(ServiceController.Mode.ACTIVE)\n-                        .install();\n-            } catch (Throwable t) {\n-                throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n-            }\n-            try {\n-                // install logger handler services\n-                if (handlers.isDefined()) {\n-                    LogServices.installLoggerHandlers(target, loggerName, handlers);\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget target = context.getServiceTarget();\n+                    final String loggerName = name;\n+                    try {\n+                        // Install logger service\n+                        final LoggerService service = new LoggerService(loggerName);\n+                        service.setLevel(Level.parse(level));\n+                        target.addService(LogServices.loggerName(loggerName), service)\n+                                .setInitialMode(ServiceController.Mode.ACTIVE)\n+                                .install();\n+                    } catch (Throwable t) {\n+                        throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n+                    }\n+                    try {\n+                        // install logger handler services\n+                        if (handlers.isDefined()) {\n+                            LogServices.installLoggerHandlers(target, loggerName, handlers);\n+                        }\n+                    } catch (Throwable t) {\n+                        throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n+                    }\n+                    resultHandler.handleResultComplete();\n                 }\n-            } catch (Throwable t) {\n-                throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n-            }\n-            resultHandler.handleResultComplete();\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"logging/src/main/java/org/jboss/as/logging/LoggerAdd.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n@@ -61,15 +63,21 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         }\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceRegistry registry = context.getRuntimeContext().getServiceRegistry();\n-            try {\n-                final ServiceController<?> controller = registry.getService(LogServices.handlerName(name));\n-                if (controller != null) {\n-                    controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceRegistry registry = context.getServiceRegistry();\n+                    try {\n+                        final ServiceController<?> controller = registry.getService(LogServices.handlerName(name));\n+                        if (controller != null) {\n+                            controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                        } else {\n+                            resultHandler.handleResultComplete();\n+                        }\n+                    } catch (Throwable t) {\n+                        throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n+                    }\n                 }\n-            } catch (Throwable t) {\n-                throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n-            }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"logging/src/main/java/org/jboss/as/logging/LoggerHandlerRemove.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.logging;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n@@ -56,15 +59,19 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         compensatingOperation.get(CommonAttributes.HANDLERS).set(subModel.get(CommonAttributes.HANDLERS));\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceRegistry registry = context.getRuntimeContext().getServiceRegistry();\n-            final ServiceController<?> controller = registry.getService(LogServices.loggerName(name));\n-            if (controller != null) {\n-                controller.setMode(ServiceController.Mode.REMOVE);\n-            }\n-            if (subModel.has(CommonAttributes.HANDLERS)) {\n-                LogServices.uninstallLoggerHandlers(registry, name, subModel.get(CommonAttributes.HANDLERS));\n-            }\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceRegistry registry = context.getServiceRegistry();\n+                    final ServiceController<?> controller = registry.getService(LogServices.loggerName(name));\n+                    if (controller != null) {\n+                        controller.setMode(ServiceController.Mode.REMOVE);\n+                    }\n+                    if (subModel.has(CommonAttributes.HANDLERS)) {\n+                        LogServices.uninstallLoggerHandlers(registry, name, subModel.get(CommonAttributes.HANDLERS));\n+                    }\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"logging/src/main/java/org/jboss/as/logging/LoggerRemove.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n@@ -90,28 +92,32 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         subModel.get(SUFFIX).set(operation.get(SUFFIX));\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-            try {\n-                final PeriodicRotatingFileHandlerService service = new PeriodicRotatingFileHandlerService();\n-                final ServiceBuilder<Handler> serviceBuilder = serviceTarget.addService(LogServices.handlerName(name), service);\n-                if (operation.hasDefined(FILE)) {\n-                    if (operation.get(FILE).hasDefined(RELATIVE_TO)) {\n-                        serviceBuilder.addDependency(AbstractPathService.pathNameOf(operation.get(FILE, RELATIVE_TO).asString()), String.class, service.getRelativeToInjector());\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n+                    try {\n+                        final PeriodicRotatingFileHandlerService service = new PeriodicRotatingFileHandlerService();\n+                        final ServiceBuilder<Handler> serviceBuilder = serviceTarget.addService(LogServices.handlerName(name), service);\n+                        if (operation.hasDefined(FILE)) {\n+                            if (operation.get(FILE).hasDefined(RELATIVE_TO)) {\n+                                serviceBuilder.addDependency(AbstractPathService.pathNameOf(operation.get(FILE, RELATIVE_TO).asString()), String.class, service.getRelativeToInjector());\n+                            }\n+                            service.setPath(operation.get(FILE, PATH).asString());\n+                        }\n+                        service.setLevel(Level.parse(operation.get(LEVEL).asString()));\n+                        final Boolean autoFlush = operation.get(AUTOFLUSH).asBoolean();\n+                        if (autoFlush != null) service.setAutoflush(autoFlush.booleanValue());\n+                        if (operation.hasDefined(SUFFIX)) service.setSuffix(operation.get(SUFFIX).asString());\n+                        if (operation.hasDefined(ENCODING)) service.setEncoding(operation.get(ENCODING).asString());\n+                        if (operation.hasDefined(FORMATTER)) service.setFormatterSpec(createFormatterSpec(operation));\n+                        serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);\n+                        serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                        serviceBuilder.install();\n+                    } catch (Throwable t) {\n+                        throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n                     }\n-                    service.setPath(operation.get(FILE, PATH).asString());\n                 }\n-                service.setLevel(Level.parse(operation.get(LEVEL).asString()));\n-                final Boolean autoFlush = operation.get(AUTOFLUSH).asBoolean();\n-                if (autoFlush != null) service.setAutoflush(autoFlush.booleanValue());\n-                if (operation.hasDefined(SUFFIX)) service.setSuffix(operation.get(SUFFIX).asString());\n-                if (operation.hasDefined(ENCODING)) service.setEncoding(operation.get(ENCODING).asString());\n-                if (operation.hasDefined(FORMATTER)) service.setFormatterSpec(createFormatterSpec(operation));\n-                serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);\n-                serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n-                serviceBuilder.install();\n-            } catch (Throwable t) {\n-                throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n-            }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"logging/src/main/java/org/jboss/as/logging/PeriodicRotatingFileHandlerAdd.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n@@ -64,25 +66,29 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         subModel.get(CommonAttributes.ROOT_LOGGER, CommonAttributes.HANDLERS).set(handlers);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-            try {\n-                final RootLoggerService service = new RootLoggerService();\n-                service.setLevel(Level.parse(level));\n-                target.addService(LogServices.ROOT_LOGGER, service)\n-                        .setInitialMode(ServiceController.Mode.ACTIVE)\n-                        .install();\n-            } catch (Throwable t) {\n-                throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n-            }\n-            try {\n-                // install logger handler services\n-                if (handlers.getType() != ModelType.UNDEFINED) {\n-                    LogServices.installLoggerHandlers(target, \"\", handlers);\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget target = context.getServiceTarget();\n+                    try {\n+                        final RootLoggerService service = new RootLoggerService();\n+                        service.setLevel(Level.parse(level));\n+                        target.addService(LogServices.ROOT_LOGGER, service)\n+                                .setInitialMode(ServiceController.Mode.ACTIVE)\n+                                .install();\n+                    } catch (Throwable t) {\n+                        throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n+                    }\n+                    try {\n+                        // install logger handler services\n+                        if (handlers.getType() != ModelType.UNDEFINED) {\n+                            LogServices.installLoggerHandlers(target, \"\", handlers);\n+                        }\n+                        resultHandler.handleResultComplete();\n+                    } catch (Throwable t) {\n+                        throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n+                    }\n                 }\n-                resultHandler.handleResultComplete();\n-            } catch (Throwable t) {\n-                throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n-            }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"logging/src/main/java/org/jboss/as/logging/RootLoggerAdd.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.logging;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n@@ -46,7 +49,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final ModelNode subModel = context.getSubModel();\n         final ModelNode compensatingOperation = new ModelNode();\n@@ -58,15 +61,19 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         subModel.get(CommonAttributes.ROOT_LOGGER).clear();\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceRegistry registry = context.getRuntimeContext().getServiceRegistry();\n-            final ServiceController<?> controller = registry.getService(LogServices.ROOT_LOGGER);\n-            if (controller != null) {\n-                controller.setMode(ServiceController.Mode.REMOVE);\n-            }\n-            if (subModel.get(CommonAttributes.ROOT_LOGGER).has(CommonAttributes.HANDLERS)) {\n-                LogServices.uninstallLoggerHandlers(registry, \"\", subModel.get(CommonAttributes.ROOT_LOGGER, CommonAttributes.HANDLERS));\n-            }\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceRegistry registry = context.getServiceRegistry();\n+                    final ServiceController<?> controller = registry.getService(LogServices.ROOT_LOGGER);\n+                    if (controller != null) {\n+                        controller.setMode(ServiceController.Mode.REMOVE);\n+                    }\n+                    if (subModel.get(CommonAttributes.ROOT_LOGGER).has(CommonAttributes.HANDLERS)) {\n+                        LogServices.uninstallLoggerHandlers(registry, \"\", subModel.get(CommonAttributes.ROOT_LOGGER, CommonAttributes.HANDLERS));\n+                    }\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"logging/src/main/java/org/jboss/as/logging/RootLoggerRemove.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n@@ -92,31 +94,35 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         subModel.get(ROTATE_SIZE).set(operation.get(ROTATE_SIZE));\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-            try {\n-                final SizeRotatingFileHandlerService service = new SizeRotatingFileHandlerService();\n-                final ServiceBuilder<Handler> serviceBuilder = serviceTarget.addService(LogServices.handlerName(name), service);\n-                if (operation.has(FILE)) {\n-                    if (operation.get(FILE).has(RELATIVE_TO)) {\n-                        serviceBuilder.addDependency(AbstractPathService.pathNameOf(operation.get(FILE, RELATIVE_TO).asString()), String.class, service.getRelativeToInjector());\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n+                    try {\n+                        final SizeRotatingFileHandlerService service = new SizeRotatingFileHandlerService();\n+                        final ServiceBuilder<Handler> serviceBuilder = serviceTarget.addService(LogServices.handlerName(name), service);\n+                        if (operation.has(FILE)) {\n+                            if (operation.get(FILE).has(RELATIVE_TO)) {\n+                                serviceBuilder.addDependency(AbstractPathService.pathNameOf(operation.get(FILE, RELATIVE_TO).asString()), String.class, service.getRelativeToInjector());\n+                            }\n+                            service.setPath(operation.get(FILE, PATH).asString());\n+                        }\n+                        service.setLevel(Level.parse(operation.get(LEVEL).asString()));\n+                        final Boolean autoFlush = operation.get(AUTOFLUSH).asBoolean();\n+                        if (autoFlush != null) service.setAutoflush(autoFlush.booleanValue());\n+                        if (operation.has(ENCODING)) service.setEncoding(operation.get(ENCODING).asString());\n+                        if (operation.has(FORMATTER)) service.setFormatterSpec(createFormatterSpec(operation));\n+                        if (operation.has(MAX_BACKUP_INDEX))\n+                            service.setMaxBackupIndex(operation.get(MAX_BACKUP_INDEX).asInt());\n+                        if (operation.has(ROTATE_SIZE))\n+                            service.setRotateSize(operation.get(ROTATE_SIZE).asLong(DEFAULT_ROTATE_SIZE));\n+                        serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);\n+                        serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                        serviceBuilder.install();\n+                    } catch (Throwable t) {\n+                        throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n                     }\n-                    service.setPath(operation.get(FILE, PATH).asString());\n                 }\n-                service.setLevel(Level.parse(operation.get(LEVEL).asString()));\n-                final Boolean autoFlush = operation.get(AUTOFLUSH).asBoolean();\n-                if (autoFlush != null) service.setAutoflush(autoFlush.booleanValue());\n-                if (operation.has(ENCODING)) service.setEncoding(operation.get(ENCODING).asString());\n-                if (operation.has(FORMATTER)) service.setFormatterSpec(createFormatterSpec(operation));\n-                if (operation.has(MAX_BACKUP_INDEX))\n-                    service.setMaxBackupIndex(operation.get(MAX_BACKUP_INDEX).asInt());\n-                if (operation.has(ROTATE_SIZE))\n-                    service.setRotateSize(operation.get(ROTATE_SIZE).asLong(DEFAULT_ROTATE_SIZE));\n-                serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);\n-                serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n-                serviceBuilder.install();\n-            } catch (Throwable t) {\n-                throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n-            }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"logging/src/main/java/org/jboss/as/logging/SizeRotatingFileHandlerAdd.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.messaging;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.PATH;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RELATIVE_TO;\n@@ -146,7 +149,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final ModelNode compensatingOperation = Util.getResourceRemoveOperation(operation.require(OP_ADDR));\n \n@@ -161,41 +164,45 @@ public OperationResult execute(OperationContext context, final ModelNode operati\n         subModel.get(QUEUE);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-            // Create the HornetQ Service\n-            final HornetQService hqService = new HornetQService();\n-            // Transform the configuration\n-            final Configuration configuration = transformConfig(operation);\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n+                    // Create the HornetQ Service\n+                    final HornetQService hqService = new HornetQService();\n+                    // Transform the configuration\n+                    final Configuration configuration = transformConfig(operation);\n \n-            // Add the HornetQ Service\n-            final ServiceBuilder<HornetQServer> serviceBuilder = serviceTarget.addService(MessagingServices.JBOSS_MESSAGING, hqService)\n-                    .addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"mbean\", \"server\"), MBeanServer.class, hqService.getMBeanServer());\n-            // Create path services\n-            serviceBuilder.addDependency(createDirectoryService(DEFAULT_BINDINGS_DIR, operation.get(BINDINGS_DIRECTORY), serviceTarget),\n-                    String.class, hqService.getPathInjector(DEFAULT_BINDINGS_DIR));\n-            serviceBuilder.addDependency(createDirectoryService(DEFAULT_JOURNAL_DIR, operation.get(JOURNAL_DIRECTORY), serviceTarget),\n-                    String.class, hqService.getPathInjector(DEFAULT_JOURNAL_DIR));\n-            serviceBuilder.addDependency(createDirectoryService(DEFAULT_LARGE_MESSSAGE_DIR, operation.get(LARGE_MESSAGES_DIRECTORY), serviceTarget),\n-                    String.class, hqService.getPathInjector(DEFAULT_LARGE_MESSSAGE_DIR));\n-            serviceBuilder.addDependency(createDirectoryService(DEFAULT_PAGING_DIR, operation.get(PAGING_DIRECTORY), serviceTarget),\n-                    String.class, hqService.getPathInjector(DEFAULT_PAGING_DIR));\n+                    // Add the HornetQ Service\n+                    final ServiceBuilder<HornetQServer> serviceBuilder = serviceTarget.addService(MessagingServices.JBOSS_MESSAGING, hqService)\n+                            .addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"mbean\", \"server\"), MBeanServer.class, hqService.getMBeanServer());\n+                    // Create path services\n+                    serviceBuilder.addDependency(createDirectoryService(DEFAULT_BINDINGS_DIR, operation.get(BINDINGS_DIRECTORY), serviceTarget),\n+                            String.class, hqService.getPathInjector(DEFAULT_BINDINGS_DIR));\n+                    serviceBuilder.addDependency(createDirectoryService(DEFAULT_JOURNAL_DIR, operation.get(JOURNAL_DIRECTORY), serviceTarget),\n+                            String.class, hqService.getPathInjector(DEFAULT_JOURNAL_DIR));\n+                    serviceBuilder.addDependency(createDirectoryService(DEFAULT_LARGE_MESSSAGE_DIR, operation.get(LARGE_MESSAGES_DIRECTORY), serviceTarget),\n+                            String.class, hqService.getPathInjector(DEFAULT_LARGE_MESSSAGE_DIR));\n+                    serviceBuilder.addDependency(createDirectoryService(DEFAULT_PAGING_DIR, operation.get(PAGING_DIRECTORY), serviceTarget),\n+                            String.class, hqService.getPathInjector(DEFAULT_PAGING_DIR));\n \n-            // Proccess acceptors and connectors\n-            final Set<String> socketBindings = new HashSet<String>();\n-            processAcceptors(configuration, operation, socketBindings);\n-            processConnectors(configuration, operation, socketBindings);\n-            for (final String socketBinding : socketBindings) {\n-                final ServiceName socketName = SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);\n-                serviceBuilder.addDependency(socketName, SocketBinding.class, hqService.getSocketBindingInjector(socketBinding));\n-            }\n-            hqService.setConfiguration(configuration);\n+                    // Proccess acceptors and connectors\n+                    final Set<String> socketBindings = new HashSet<String>();\n+                    processAcceptors(configuration, operation, socketBindings);\n+                    processConnectors(configuration, operation, socketBindings);\n+                    for (final String socketBinding : socketBindings) {\n+                        final ServiceName socketName = SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);\n+                        serviceBuilder.addDependency(socketName, SocketBinding.class, hqService.getSocketBindingInjector(socketBinding));\n+                    }\n+                    hqService.setConfiguration(configuration);\n \n-            // Install the HornetQ Service\n-            serviceBuilder.install();\n+                    // Install the HornetQ Service\n+                    serviceBuilder.install();\n \n-            // TODO this should be added by the jms subsystem itself\n-            JMSService.addService(serviceTarget);\n-            resultHandler.handleResultComplete();\n+                    // TODO this should be added by the jms subsystem itself\n+                    JMSService.addService(serviceTarget);\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"messaging/src/main/java/org/jboss/as/messaging/MessagingSubsystemAdd.java"},{"diff":"@@ -6,6 +6,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n@@ -63,7 +65,7 @@ private QueueAdd() {\n     }\n \n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) throws OperationFailedException {\n \n         String failure = validator.validate(operation);\n         if (failure == null) {\n@@ -87,12 +89,16 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n                 model.get(DURABLE).set(durable);\n             }\n             if (context.getRuntimeContext() != null) {\n-                final QueueService service = new QueueService(queueAddress, name, filter, durable != null ? durable : true, false);\n-                context.getRuntimeContext().getServiceTarget().addService(MessagingServices.CORE_QUEUE_BASE.append(name), service)\n-                        .addDependency(MessagingServices.JBOSS_MESSAGING, HornetQServer.class, service.getHornetQService())\n-                        .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n-                        .setInitialMode(Mode.ACTIVE)\n-                        .install();\n+                context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                    public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                        final QueueService service = new QueueService(queueAddress, name, filter, durable != null ? durable : true, false);\n+                        context.getServiceTarget().addService(MessagingServices.CORE_QUEUE_BASE.append(name), service)\n+                                .addDependency(MessagingServices.JBOSS_MESSAGING, HornetQServer.class, service.getHornetQService())\n+                                .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n+                                .setInitialMode(Mode.ACTIVE)\n+                                .install();\n+                    }\n+                });\n             } else {\n                 resultHandler.handleResultComplete();\n             }","filename":"messaging/src/main/java/org/jboss/as/messaging/QueueAdd.java"},{"diff":"@@ -4,7 +4,10 @@\n package org.jboss.as.messaging;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n \n@@ -34,18 +37,22 @@ private QueueRemove() {\n     }\n \n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n         ModelNode opAddr = operation.require(OP_ADDR);\n         ModelNode compensatingOp = QueueAdd.getOperation(opAddr, context.getSubModel());\n         PathAddress address = PathAddress.pathAddress(opAddr);\n         final String name = address.getLastElement().getValue();\n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> service = context.getRuntimeContext().getServiceRegistry().getService(MessagingServices.CORE_QUEUE_BASE.append(name));\n-            if (service != null) {\n-                service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> service = context.getServiceRegistry().getService(MessagingServices.CORE_QUEUE_BASE.append(name));\n+                    if (service != null) {\n+                        service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"messaging/src/main/java/org/jboss/as/messaging/QueueRemove.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.messaging.jms;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n@@ -110,14 +113,18 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         }\n \n         if (context.getRuntimeContext() != null) {\n-            final ConnectionFactoryConfiguration configuration = createConfiguration(name, operation);\n-            final ConnectionFactoryService service = new ConnectionFactoryService(configuration);\n-            final ServiceName serviceName = JMSServices.JMS_CF_BASE.append(name);\n-            context.getRuntimeContext().getServiceTarget().addService(serviceName, service)\n-                    .addDependency(JMSServices.JMS_MANAGER, JMSServerManager.class, service.getJmsServer())\n-                    .setInitialMode(Mode.ACTIVE)\n-                    .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n-                    .install();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ConnectionFactoryConfiguration configuration = createConfiguration(name, operation);\n+                    final ConnectionFactoryService service = new ConnectionFactoryService(configuration);\n+                    final ServiceName serviceName = JMSServices.JMS_CF_BASE.append(name);\n+                    context.getServiceTarget().addService(serviceName, service)\n+                            .addDependency(JMSServices.JMS_MANAGER, JMSServerManager.class, service.getJmsServer())\n+                            .setInitialMode(Mode.ACTIVE)\n+                            .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n+                            .install();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"messaging/src/main/java/org/jboss/as/messaging/jms/ConnectionFactoryAdd.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.messaging.jms;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n import org.jboss.as.controller.ModelRemoveOperationHandler;\n@@ -45,7 +48,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(final OperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final ModelNode operationAddress = operation.require(OP_ADDR);\n         final PathAddress address = PathAddress.pathAddress(operationAddress);\n@@ -55,12 +58,16 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         final ModelNode compensatingOperation = ConnectionFactoryAdd.getAddOperation(operationAddress, subModel);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> service = context.getRuntimeContext().getServiceRegistry().getService(JMSServices.JMS_CF_BASE.append(name));\n-            if (service != null) {\n-                service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> service = context.getServiceRegistry().getService(JMSServices.JMS_CF_BASE.append(name));\n+                    if (service != null) {\n+                        service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"messaging/src/main/java/org/jboss/as/messaging/jms/ConnectionFactoryRemove.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.messaging.jms;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.messaging.jms.CommonAttributes.DURABLE;\n@@ -73,7 +76,7 @@ static ModelNode getOperation(ModelNode address, ModelNode existing) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(final OperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         ModelNode opAddr = operation.require(OP_ADDR);\n         final PathAddress address = PathAddress.pathAddress(opAddr);\n@@ -97,14 +100,18 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         }\n \n         if (context.getRuntimeContext() != null) {\n-            final JMSQueueService service = new JMSQueueService(name, selector,\n-                    operation.get(DURABLE).asBoolean(true), jndiBindings(operation));\n-            final ServiceName serviceName = JMSServices.JMS_QUEUE_BASE.append(name);\n-            context.getRuntimeContext().getServiceTarget().addService(serviceName, service)\n-                    .addDependency(JMSServices.JMS_MANAGER, JMSServerManager.class, service.getJmsServer())\n-                    .setInitialMode(Mode.ACTIVE)\n-                    .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n-                    .install();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final JMSQueueService service = new JMSQueueService(name, selector,\n+                            operation.get(DURABLE).asBoolean(true), jndiBindings(operation));\n+                    final ServiceName serviceName = JMSServices.JMS_QUEUE_BASE.append(name);\n+                    context.getServiceTarget().addService(serviceName, service)\n+                            .addDependency(JMSServices.JMS_MANAGER, JMSServerManager.class, service.getJmsServer())\n+                            .setInitialMode(Mode.ACTIVE)\n+                            .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n+                            .install();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"messaging/src/main/java/org/jboss/as/messaging/jms/JMSQueueAdd.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.messaging.jms;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n import org.jboss.as.controller.ModelRemoveOperationHandler;\n@@ -45,7 +48,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(final OperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         ModelNode opAddr = operation.require(OP_ADDR);\n         final PathAddress address = PathAddress.pathAddress(opAddr);\n@@ -55,12 +58,16 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         final ModelNode compensatingOperation = JMSQueueAdd.getOperation(opAddr, subModel);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> service = context.getRuntimeContext().getServiceRegistry().getService(JMSServices.JMS_QUEUE_BASE.append(name));\n-            if (service != null) {\n-                service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> service = context.getServiceRegistry().getService(JMSServices.JMS_QUEUE_BASE.append(name));\n+                    if (service != null) {\n+                        service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"messaging/src/main/java/org/jboss/as/messaging/jms/JMSQueueRemove.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.messaging.jms;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n import org.jboss.as.controller.ModelAddOperationHandler;\n@@ -43,11 +46,16 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final ModelNode compensatingOperation = Util.getResourceRemoveOperation(operation.require(OP_ADDR));\n \n         if(context.getRuntimeContext() != null) {\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+\n+                }\n+            });\n             // FIXME the JMSServer is started as part of the messaging subsystem for now\n             // final RuntimeOperationContext runtimeContext = (RuntimeOperationContext) context;\n             // final BatchBuilder builder = runtimeContext.getBatchBuilder();","filename":"messaging/src/main/java/org/jboss/as/messaging/jms/JMSSubsystemAdd.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.messaging.jms;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.messaging.jms.CommonAttributes.ENTRIES;\n@@ -65,7 +68,7 @@ static ModelNode getOperation(ModelNode address, ModelNode existing) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(final OperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         ModelNode opAddr = operation.require(OP_ADDR);\n         final PathAddress address = PathAddress.pathAddress(opAddr);\n@@ -78,13 +81,17 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         }\n \n         if (context.getRuntimeContext() != null) {\n-            final JMSTopicService service = new JMSTopicService(name, jndiBindings(operation));\n-            final ServiceName serviceName = JMSServices.JMS_TOPIC_BASE.append(name);\n-            context.getRuntimeContext().getServiceTarget().addService(serviceName, service)\n-                    .addDependency(JMSServices.JMS_MANAGER, JMSServerManager.class, service.getJmsServer())\n-                    .setInitialMode(Mode.ACTIVE)\n-                    .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n-                    .install();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final JMSTopicService service = new JMSTopicService(name, jndiBindings(operation));\n+                    final ServiceName serviceName = JMSServices.JMS_TOPIC_BASE.append(name);\n+                    context.getServiceTarget().addService(serviceName, service)\n+                            .addDependency(JMSServices.JMS_MANAGER, JMSServerManager.class, service.getJmsServer())\n+                            .setInitialMode(Mode.ACTIVE)\n+                            .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n+                            .install();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"messaging/src/main/java/org/jboss/as/messaging/jms/JMSTopicAdd.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.messaging.jms;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n import org.jboss.as.controller.ModelRemoveOperationHandler;\n@@ -45,7 +48,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(final OperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         ModelNode opAddr = operation.require(OP_ADDR);\n         final PathAddress address = PathAddress.pathAddress(opAddr);\n@@ -55,12 +58,16 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         final ModelNode compensatingOperation = JMSTopicAdd.getOperation(opAddr, subModel);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> service = context.getRuntimeContext().getServiceRegistry().getService(JMSServices.JMS_TOPIC_BASE.append(name));\n-            if (service != null) {\n-                service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> service = context.getServiceRegistry().getService(JMSServices.JMS_TOPIC_BASE.append(name));\n+                    if (service != null) {\n+                        service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"messaging/src/main/java/org/jboss/as/messaging/jms/JMSTopicRemove.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.naming.service;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n import javax.management.MBeanServer;\n@@ -67,41 +70,46 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n \n         if (context instanceof BootOperationContext) {\n             final BootOperationContext updateContext = (BootOperationContext) context;\n-            updateContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_NAMING, new NamingDependencyProcessor());\n \n-            log.info(\"Activating Naming Subsystem\");\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    updateContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_NAMING, new NamingDependencyProcessor());\n \n-            ObjectFactoryBuilder.INSTANCE.setServiceRegistry(context.getRuntimeContext().getServiceRegistry());\n+                    log.info(\"Activating Naming Subsystem\");\n \n-            NamingContext.initializeNamingManager();\n+                    ObjectFactoryBuilder.INSTANCE.setServiceRegistry(context.getServiceRegistry());\n \n-            // Create the Naming Service\n-            final ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-            target.addService(NamingService.SERVICE_NAME, new NamingService(true)).install();\n+                    NamingContext.initializeNamingManager();\n \n-            // Create java: context service\n-            final JavaContextService javaContextService = new JavaContextService();\n-            target.addService(JavaContextService.SERVICE_NAME, javaContextService)\n-                    .addDependency(NamingService.SERVICE_NAME)\n-                    .install();\n+                    // Create the Naming Service\n+                    final ServiceTarget target = context.getServiceTarget();\n+                    target.addService(NamingService.SERVICE_NAME, new NamingService(true)).install();\n \n-            final ContextService globalContextService = new ContextService(\"global\");\n-            target.addService(JavaContextService.SERVICE_NAME.append(\"global\"), globalContextService)\n-                    .addDependency(JavaContextService.SERVICE_NAME, Context.class, globalContextService.getParentContextInjector())\n-                    .install();\n+                    // Create java: context service\n+                    final JavaContextService javaContextService = new JavaContextService();\n+                    target.addService(JavaContextService.SERVICE_NAME, javaContextService)\n+                            .addDependency(NamingService.SERVICE_NAME)\n+                            .install();\n \n-            addContextFactory(target, \"app\");\n-            addContextFactory(target, \"module\");\n-            addContextFactory(target, \"comp\");\n+                    final ContextService globalContextService = new ContextService(\"global\");\n+                    target.addService(JavaContextService.SERVICE_NAME.append(\"global\"), globalContextService)\n+                            .addDependency(JavaContextService.SERVICE_NAME, Context.class, globalContextService.getParentContextInjector())\n+                            .install();\n \n-            // Provide the {@link InitialContext} as OSGi service\n-            InitialContextFactoryService.addService(target);\n+                    addContextFactory(target, \"app\");\n+                    addContextFactory(target, \"module\");\n+                    addContextFactory(target, \"comp\");\n \n-            final JndiView jndiView = new JndiView();\n-            target.addService(ServiceName.JBOSS.append(\"naming\", \"jndi\", \"view\"), jndiView)\n-                    .addDependency(ServiceBuilder.DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"mbean\", \"server\"), MBeanServer.class, jndiView.getMBeanServerInjector())\n-                    .install();\n-            resultHandler.handleResultComplete();\n+                    // Provide the {@link InitialContext} as OSGi service\n+                    InitialContextFactoryService.addService(target);\n+\n+                    final JndiView jndiView = new JndiView();\n+                    target.addService(ServiceName.JBOSS.append(\"naming\", \"jndi\", \"view\"), jndiView)\n+                            .addDependency(ServiceBuilder.DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"mbean\", \"server\"), MBeanServer.class, jndiView.getMBeanServerInjector())\n+                            .install();\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"naming/src/main/java/org/jboss/as/naming/service/NamingSubsystemAdd.java"},{"diff":"@@ -22,7 +22,10 @@\n package org.jboss.as.osgi.parser;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n@@ -76,7 +79,7 @@ private OSGiSubsystemAdd() {\n     }\n \n     @Override\n-    public OperationResult execute(OperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n         log.infof(\"Activating OSGi Subsystem\");\n \n         populateSubModel(context.getSubModel(), operation);\n@@ -84,28 +87,32 @@ public OperationResult execute(OperationContext context, final ModelNode operati\n         if (context instanceof BootOperationContext) {\n             log.infof(\"Activating OSGi Subsystem\");\n             final BootOperationContext updateContext = (BootOperationContext) context;\n-            final ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-\n-            SubsystemState subsystemState = createSubsystemState(operation);\n-\n-            // TODO: Hack, which registers the framework module with the {@link ModularURLStreamHandlerFactory}\n-            // TODO - use an actually secure sys prop security action method\n-            String value = SecurityActions.getSystemProperty(\"jboss.protocol.handler.modules\", \"org.jboss.osgi.framework\");\n-            if (!value.equals(\"org.jboss.osgi.framework\"))\n-                value = value + \"|org.jboss.osgi.framework\";\n-            SecurityActions.setSystemProperty(\"jboss.protocol.handler.modules\", value);\n-\n-            Activation policy = subsystemState.getActivationPolicy();\n-            BundleManagerService.addService(target, subsystemState);\n-            FrameworkService.addService(target, subsystemState);\n-            BundleContextService.addService(target, policy);\n-            PackageAdminService.addService(target);\n-            StartLevelService.addService(target);\n-\n-            ConfigAdminServiceImpl.addService(target, subsystemState);\n-\n-            new OSGiDeploymentActivator().activate(updateContext);\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget target = context.getServiceTarget();\n+\n+                    SubsystemState subsystemState = createSubsystemState(operation);\n+\n+                    // TODO: Hack, which registers the framework module with the {@link ModularURLStreamHandlerFactory}\n+                    // TODO - use an actually secure sys prop security action method\n+                    String value = SecurityActions.getSystemProperty(\"jboss.protocol.handler.modules\", \"org.jboss.osgi.framework\");\n+                    if (!value.equals(\"org.jboss.osgi.framework\"))\n+                        value = value + \"|org.jboss.osgi.framework\";\n+                    SecurityActions.setSystemProperty(\"jboss.protocol.handler.modules\", value);\n+\n+                    Activation policy = subsystemState.getActivationPolicy();\n+                    BundleManagerService.addService(target, subsystemState);\n+                    FrameworkService.addService(target, subsystemState);\n+                    BundleContextService.addService(target, policy);\n+                    PackageAdminService.addService(target);\n+                    StartLevelService.addService(target);\n+\n+                    ConfigAdminServiceImpl.addService(target, subsystemState);\n+\n+                    new OSGiDeploymentActivator().activate(updateContext);\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"osgi/service/src/main/java/org/jboss/as/osgi/parser/OSGiSubsystemAdd.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.remoting.CommonAttributes.AUTHENTICATION_PROVIDER;\n import static org.jboss.as.remoting.CommonAttributes.FORWARD_SECRECY;\n@@ -76,7 +78,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, final ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) throws OperationFailedException {\n \n         final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n         final String name = address.getLastElement().getValue();\n@@ -86,25 +88,29 @@ public OperationResult execute(OperationContext context, final ModelNode operati\n \n         // Create the service.\n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-\n-            final ConnectorService connectorService = new ConnectorService();\n-            connectorService.setOptionMap(createOptionMap(operation));\n-\n-            // Register the service with the container and inject dependencies.\n-            final ServiceName connectorName = RemotingServices.connectorServiceName(name);\n-            try {\n-                target.addService(connectorName, connectorService)\n-                        .addDependency(connectorName.append(\"auth-provider\"), ServerAuthenticationProvider.class, connectorService.getAuthenticationProviderInjector())\n-                        .addDependency(RemotingServices.ENDPOINT, Endpoint.class, connectorService.getEndpointInjector())\n-                        .setInitialMode(ServiceController.Mode.ACTIVE)\n-                        .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n-                        .install();\n-\n-                // TODO create XNIO connector service from socket-binding, with dependency on connectorName\n-            } catch (ServiceRegistryException e) {\n-                throw new OperationFailedException(new ModelNode().set(e.getLocalizedMessage()));\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget target = context.getServiceTarget();\n+\n+                    final ConnectorService connectorService = new ConnectorService();\n+                    connectorService.setOptionMap(createOptionMap(operation));\n+\n+                    // Register the service with the container and inject dependencies.\n+                    final ServiceName connectorName = RemotingServices.connectorServiceName(name);\n+                    try {\n+                        target.addService(connectorName, connectorService)\n+                                .addDependency(connectorName.append(\"auth-provider\"), ServerAuthenticationProvider.class, connectorService.getAuthenticationProviderInjector())\n+                                .addDependency(RemotingServices.ENDPOINT, Endpoint.class, connectorService.getEndpointInjector())\n+                                .setInitialMode(ServiceController.Mode.ACTIVE)\n+                                .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n+                                .install();\n+\n+                        // TODO create XNIO connector service from socket-binding, with dependency on connectorName\n+                    } catch (ServiceRegistryException e) {\n+                        throw new OperationFailedException(new ModelNode().set(e.getLocalizedMessage()));\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"remoting/src/main/java/org/jboss/as/remoting/ConnectorAdd.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.remoting;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n@@ -69,13 +72,17 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         // connector.clear();\n \n         if (context.getRuntimeContext() != null) {\n-            ServiceName connectorServiceName = RemotingServices.connectorServiceName(name);\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry().getService(connectorServiceName);\n-            if (controller != null) {\n-                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    ServiceName connectorServiceName = RemotingServices.connectorServiceName(name);\n+                    final ServiceController<?> controller = context.getServiceRegistry().getService(connectorServiceName);\n+                    if (controller != null) {\n+                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"remoting/src/main/java/org/jboss/as/remoting/ConnectorRemove.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.remoting;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.remoting.CommonAttributes.CONNECTOR;\n import static org.jboss.as.remoting.CommonAttributes.THREAD_POOL;\n@@ -54,7 +57,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(final OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final String threadPoolName = operation.require(THREAD_POOL).asString();\n         context.getSubModel().get(THREAD_POOL).set(threadPoolName);\n@@ -65,17 +68,21 @@ public OperationResult execute(final OperationContext context, ModelNode operati\n         final ModelNode compensating = Util.getResourceRemoveOperation(operation.require(OP_ADDR));\n \n         if (context.getRuntimeContext() != null) {\n-            // create endpoint\n-            final EndpointService endpointService = new EndpointService();\n-            // todo configure option map\n-            endpointService.setOptionMap(OptionMap.EMPTY);\n-            final Injector<Executor> executorInjector = endpointService.getExecutorInjector();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    // create endpoint\n+                    final EndpointService endpointService = new EndpointService();\n+                    // todo configure option map\n+                    endpointService.setOptionMap(OptionMap.EMPTY);\n+                    final Injector<Executor> executorInjector = endpointService.getExecutorInjector();\n \n-            context.getRuntimeContext().getServiceTarget().addService(RemotingServices.ENDPOINT, endpointService)\n-                    .addDependency(ThreadsServices.executorName(threadPoolName), new CastingInjector<Executor>(executorInjector, Executor.class))\n-                    .setInitialMode(ServiceController.Mode.ACTIVE)\n-                    .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n-                    .install();\n+                    context.getServiceTarget().addService(RemotingServices.ENDPOINT, endpointService)\n+                            .addDependency(ThreadsServices.executorName(threadPoolName), new CastingInjector<Executor>(executorInjector, Executor.class))\n+                            .setInitialMode(ServiceController.Mode.ACTIVE)\n+                            .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n+                            .install();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"remoting/src/main/java/org/jboss/as/remoting/RemotingSubsystemAdd.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n@@ -47,10 +49,6 @@\n import org.jboss.as.controller.ResultHandler;\n import org.jboss.as.controller.operations.common.Util;\n import org.jboss.as.security.service.JaasConfigurationService;\n-import org.jboss.as.server.RuntimeOperationContext;\n-import org.jboss.as.server.RuntimeOperationHandler;\n-import org.jboss.as.server.RuntimeTask;\n-import org.jboss.as.server.RuntimeTaskContext;\n import org.jboss.dmr.ModelNode;\n import org.jboss.dmr.Property;\n import org.jboss.msc.service.ServiceController;\n@@ -80,7 +78,7 @@\n  * @author <a href=\"mailto:mmoyses@redhat.com\">Marcus Moyses</a>\n  * @author Brian Stansberry\n  */\n-class SecurityDomainAdd implements ModelAddOperationHandler, RuntimeOperationHandler {\n+class SecurityDomainAdd implements ModelAddOperationHandler {\n \n     static final String OPERATION_NAME = ADD;\n \n@@ -95,7 +93,7 @@ private SecurityDomainAdd() {\n     }\n \n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n         ModelNode opAddr = operation.require(OP_ADDR);\n         PathAddress address = PathAddress.pathAddress(opAddr);\n         String securityDomain = address.getLastElement().getValue();\n@@ -104,16 +102,15 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n \n         final ApplicationPolicy applicationPolicy = createApplicationPolicy(securityDomain, operation);\n \n-        if (context instanceof RuntimeOperationContext) {\n-            final RuntimeOperationContext updateContext = (RuntimeOperationContext) context;\n-            updateContext.executeRuntimeTask(new RuntimeTask() {\n-                public void execute(RuntimeTaskContext context, ResultHandler resultHandler) throws OperationFailedException {\n+        if (context.getRuntimeContext() != null) {\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n                     // add parsed security domain to the Configuration\n                     final ApplicationPolicyRegistration loginConfig = getConfiguration(context.getServiceRegistry());\n                     loginConfig.addApplicationPolicy(applicationPolicy.getName(), applicationPolicy);\n                     resultHandler.handleResultComplete();\n                 }\n-            }, resultHandler);\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"security/src/main/java/org/jboss/as/security/SecurityDomainAdd.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.security;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n \n@@ -53,7 +56,7 @@ private SecurityDomainRemove() {\n     }\n \n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         ModelNode opAddr = operation.require(OP_ADDR);\n         PathAddress address = PathAddress.pathAddress(opAddr);\n@@ -63,14 +66,18 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         final ModelNode compensatingOperation = SecurityDomainAdd.getRecreateOperation(opAddr, context.getSubModel());\n \n         if (context.getRuntimeContext() != null) {\n-            // remove security domain\n-            final ServiceController<?> jaasConfigurationService = context.getRuntimeContext().getServiceRegistry().getService(\n-                    JaasConfigurationService.SERVICE_NAME);\n-            if (jaasConfigurationService != null) {\n-                ApplicationPolicyRegistration config = (ApplicationPolicyRegistration) jaasConfigurationService.getValue();\n-                config.removeApplicationPolicy(securityDomain);\n-            }\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    // remove security domain\n+                    final ServiceController<?> jaasConfigurationService = context.getServiceRegistry().getService(\n+                            JaasConfigurationService.SERVICE_NAME);\n+                    if (jaasConfigurationService != null) {\n+                        ApplicationPolicyRegistration config = (ApplicationPolicyRegistration) jaasConfigurationService.getValue();\n+                        config.removeApplicationPolicy(securityDomain);\n+                    }\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"security/src/main/java/org/jboss/as/security/SecurityDomainRemove.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.security;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.security.CommonAttributes.AUDIT_MANAGER_CLASS_NAME;\n import static org.jboss.as.security.CommonAttributes.AUTHENTICATION_MANAGER_CLASS_NAME;\n@@ -107,10 +110,9 @@ private SecuritySubsystemAdd() {\n     }\n \n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n         String authenticationManagerClassName = \"default\";\n         String callbackHandlerClassName = \"default\";\n-        boolean deepCopySubject = DEFAULT_DEEP_COPY_OPERATION_MODE;\n         String subjectFactoryClassName = \"default\";\n         String authorizationManagerClassName = \"default\";\n         String auditManagerClassName = \"default\";\n@@ -122,6 +124,7 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n             authenticationManagerClassName = operation.get(AUTHENTICATION_MANAGER_CLASS_NAME).asString();\n             subModel.get(AUTHENTICATION_MANAGER_CLASS_NAME).set(authenticationManagerClassName);\n         }\n+        final boolean deepCopySubject;\n         if (operation.hasDefined(DEEP_COPY_SUBJECT_MODE)) {\n             deepCopySubject = operation.get(DEEP_COPY_SUBJECT_MODE).asBoolean();\n             subModel.get(DEEP_COPY_SUBJECT_MODE).set(deepCopySubject);\n@@ -157,64 +160,91 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         }\n         subModel.get(SECURITY_DOMAIN).setEmptyObject();\n \n+        // add security management service\n+        final String resolvedAuthenticationManagerClassName;\n+        if (\"default\".equals(authenticationManagerClassName)) {\n+            resolvedAuthenticationManagerClassName = AUTHENTICATION_MANAGER;\n+        } else {\n+            resolvedAuthenticationManagerClassName  = authenticationManagerClassName;\n+        }\n+        final String resolvedCallbackHandlerClassName;\n+        if (\"default\".equals(callbackHandlerClassName)) {\n+            resolvedCallbackHandlerClassName = CALLBACK_HANDLER;\n+        } else {\n+            resolvedCallbackHandlerClassName= callbackHandlerClassName;\n+        }\n+        final String resolvedAuthorizationManagerClassName;\n+        if (\"default\".equals(authorizationManagerClassName)) {\n+            resolvedAuthorizationManagerClassName = AUTHORIZATION_MANAGER;\n+        } else {\n+            resolvedAuthorizationManagerClassName= authorizationManagerClassName;\n+        }\n+        final String resolvedAuditManagerClassName;\n+        if (\"default\".equals(auditManagerClassName)) {\n+            resolvedAuditManagerClassName = AUDIT_MANAGER;\n+        } else {\n+            resolvedAuditManagerClassName  = auditManagerClassName;\n+        }\n+        final String resolvedIdentityTrustManagerClassName;\n+        if (\"default\".equals(identityTrustManagerClassName)) {\n+            resolvedIdentityTrustManagerClassName = IDENTITY_TRUST_MANAGER;\n+        } else {\n+             resolvedIdentityTrustManagerClassName = identityTrustManagerClassName;\n+        }\n+        final String resolvedMappingManagerClassName;\n+        if (\"default\".equals(mappingManagerClassName)) {\n+            resolvedMappingManagerClassName = MAPPING_MANAGER;\n+        } else {\n+            resolvedMappingManagerClassName = mappingManagerClassName;\n+        }\n+        final String resolvedSubjectFactoryClassName;\n+        if (\"default\".equals(subjectFactoryClassName)) {\n+            resolvedSubjectFactoryClassName = SUBJECT_FACTORY;\n+        } else {\n+            resolvedSubjectFactoryClassName = subjectFactoryClassName;\n+        }\n+\n         if (context instanceof BootOperationContext) {\n             final BootOperationContext updateContext = (BootOperationContext) context;\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    updateContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_MODULE,\n+                            new SecurityDependencyProcessor());\n \n-            updateContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_MODULE,\n-                    new SecurityDependencyProcessor());\n-\n-            final ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-\n-            // add bootstrap service\n-            final SecurityBootstrapService bootstrapService = new SecurityBootstrapService();\n-            target.addService(SecurityBootstrapService.SERVICE_NAME, bootstrapService).setInitialMode(\n-                    ServiceController.Mode.ACTIVE).install();\n-\n-            // add service to bind SecurityDomainObjectFactory to JNDI\n-            final Reference reference = SecurityDomainObjectFactory.createReference(\"JSM\");\n-            final JaasBinderService binderService = new JaasBinderService(Values.immediateValue(reference));\n-            target.addService(JaasBinderService.SERVICE_NAME, binderService).addDependency(JavaContextService.SERVICE_NAME,\n-                    Context.class, binderService.getContextInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();\n-\n-            // add security management service\n-            if (\"default\".equals(authenticationManagerClassName)) {\n-                authenticationManagerClassName = AUTHENTICATION_MANAGER;\n-            }\n-            if (\"default\".equals(callbackHandlerClassName)) {\n-                callbackHandlerClassName = CALLBACK_HANDLER;\n-            }\n-            if (\"default\".equals(authorizationManagerClassName)) {\n-                authorizationManagerClassName = AUTHORIZATION_MANAGER;\n-            }\n-            if (\"default\".equals(auditManagerClassName)) {\n-                auditManagerClassName = AUDIT_MANAGER;\n-            }\n-            if (\"default\".equals(identityTrustManagerClassName)) {\n-                identityTrustManagerClassName = IDENTITY_TRUST_MANAGER;\n-            }\n-            if (\"default\".equals(mappingManagerClassName)) {\n-                mappingManagerClassName = MAPPING_MANAGER;\n-            }\n-\n-            final SecurityManagementService securityManagementService = new SecurityManagementService(\n-                    authenticationManagerClassName, deepCopySubject, callbackHandlerClassName, authorizationManagerClassName,\n-                    auditManagerClassName, identityTrustManagerClassName, mappingManagerClassName);\n-            target.addService(SecurityManagementService.SERVICE_NAME, securityManagementService).setInitialMode(\n-                    ServiceController.Mode.ACTIVE).install();\n-\n-            final SubjectFactoryService subjectFactoryService = new SubjectFactoryService(subjectFactoryClassName);\n-            target.addService(SubjectFactoryService.SERVICE_NAME, subjectFactoryService).addDependency(\n-                    SecurityManagementService.SERVICE_NAME, ISecurityManagement.class,\n-                    subjectFactoryService.getSecurityManagementInjector()).setInitialMode(ServiceController.Mode.ACTIVE)\n-                    .install();\n-\n-            // add jaas configuration service\n-            Configuration loginConfig = XMLLoginConfigImpl.getInstance();\n-            final JaasConfigurationService jaasConfigurationService = new JaasConfigurationService(loginConfig);\n-            target.addService(JaasConfigurationService.SERVICE_NAME, jaasConfigurationService).setInitialMode(\n-                    ServiceController.Mode.ACTIVE).install();\n+                    final ServiceTarget target = context.getServiceTarget();\n \n-            resultHandler.handleResultComplete();\n+                    // add bootstrap service\n+                    final SecurityBootstrapService bootstrapService = new SecurityBootstrapService();\n+                    target.addService(SecurityBootstrapService.SERVICE_NAME, bootstrapService).setInitialMode(\n+                            ServiceController.Mode.ACTIVE).install();\n+\n+                    // add service to bind SecurityDomainObjectFactory to JNDI\n+                    final Reference reference = SecurityDomainObjectFactory.createReference(\"JSM\");\n+                    final JaasBinderService binderService = new JaasBinderService(Values.immediateValue(reference));\n+                    target.addService(JaasBinderService.SERVICE_NAME, binderService).addDependency(JavaContextService.SERVICE_NAME,\n+                            Context.class, binderService.getContextInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();\n+\n+                    final SecurityManagementService securityManagementService = new SecurityManagementService(\n+                            resolvedAuthenticationManagerClassName, deepCopySubject, resolvedCallbackHandlerClassName, resolvedAuthorizationManagerClassName,\n+                            resolvedAuditManagerClassName, resolvedIdentityTrustManagerClassName, resolvedMappingManagerClassName);\n+                    target.addService(SecurityManagementService.SERVICE_NAME, securityManagementService).setInitialMode(\n+                            ServiceController.Mode.ACTIVE).install();\n+\n+                    final SubjectFactoryService subjectFactoryService = new SubjectFactoryService(resolvedSubjectFactoryClassName);\n+                    target.addService(SubjectFactoryService.SERVICE_NAME, subjectFactoryService).addDependency(\n+                            SecurityManagementService.SERVICE_NAME, ISecurityManagement.class,\n+                            subjectFactoryService.getSecurityManagementInjector()).setInitialMode(ServiceController.Mode.ACTIVE)\n+                            .install();\n+\n+                    // add jaas configuration service\n+                    Configuration loginConfig = XMLLoginConfigImpl.getInstance();\n+                    final JaasConfigurationService jaasConfigurationService = new JaasConfigurationService(loginConfig);\n+                    target.addService(JaasConfigurationService.SERVICE_NAME, jaasConfigurationService).setInitialMode(\n+                            ServiceController.Mode.ACTIVE).install();\n+\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"security/src/main/java/org/jboss/as/security/SecuritySubsystemAdd.java"},{"diff":"@@ -22,9 +22,13 @@\n \n package org.jboss.as.server;\n \n-import java.util.concurrent.Executor;\n-import java.util.concurrent.Executors;\n+import org.jboss.as.controller.OperationFailedException;\n+import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.ResultHandler;\n import org.jboss.as.controller.RuntimeOperationContext;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.EXTENSION;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.HTTP_API;\n@@ -109,7 +113,6 @@\n import org.jboss.msc.service.ServiceContainer;\n import org.jboss.msc.service.ServiceRegistry;\n import org.jboss.msc.service.ServiceTarget;\n-import org.jboss.threads.OrderedExecutor;\n \n /**\n  * @author <a href=\"mailto:david.lloyd@redhat.com\">David M. Lloyd</a>\n@@ -286,6 +289,25 @@ protected OperationContext getOperationContext(final ModelNode subModel, final M\n         }\n     }\n \n+    protected OperationResult doExecute(OperationContext context, ModelNode operation, OperationHandler operationHandler, ResultHandler resultHandler, PathAddress address, ModelNode subModel) throws OperationFailedException {\n+        final OperationResult result = super.doExecute(context, operation, operationHandler, resultHandler, address, subModel);\n+        if(context instanceof ServerOperationContextImpl) {\n+            final ServerOperationContextImpl serverOperationContext = ServerOperationContextImpl.class.cast(context);\n+            if(serverOperationContext.getRuntimeTask() != null) {\n+                serverOperationContext.getRuntimeTask().execute(new RuntimeTaskContext() {\n+                    public ServiceTarget getServiceTarget() {\n+                        return serviceTarget;\n+                    }\n+\n+                    public ServiceRegistry getServiceRegistry() {\n+                        return serviceRegistry;\n+                    }\n+                });\n+            }\n+        }\n+        return result;\n+    }\n+\n     /** {@inheritDoc} */\n     @Override\n     protected void persistConfiguration(final ModelNode model) {\n@@ -299,6 +321,7 @@ protected void persistConfiguration(final ModelNode model) {\n         // -1 as initial value ensures the CAS in revertRestartRequired()\n         // will never succeed unless restartRequired() is called\n         private int ourStamp = -1;\n+        private RuntimeTask runtimeTask;\n \n         public ServerOperationContextImpl(ModelController controller, ModelNodeRegistration registry, ModelNode subModel) {\n             super(controller, registry, subModel);\n@@ -338,12 +361,12 @@ public RuntimeOperationContext getRuntimeContext() {\n             return this;\n         }\n \n-        public ServiceTarget getServiceTarget() {\n-            return serviceTarget;\n+        public RuntimeTask getRuntimeTask() {\n+            return runtimeTask;\n         }\n \n-        public ServiceRegistry getServiceRegistry() {\n-            return serviceRegistry;\n+        public void setRuntimeTask(RuntimeTask runtimeTask) {\n+            this.runtimeTask = runtimeTask;\n         }\n     }\n \n@@ -369,14 +392,6 @@ public void addDeploymentProcessor(final Phase phase, final int priority, final\n             }\n             deployers.get(phase).add(new RegisteredProcessor(priority, processor));\n         }\n-\n-        public ServiceTarget getServiceTarget() {\n-            return serviceTarget;\n-        }\n-\n-        public ServiceRegistry getServiceRegistry() {\n-            return serviceRegistry;\n-        }\n     }\n \n     static final class RegisteredProcessor implements Comparable<RegisteredProcessor> {","filename":"server/src/main/java/org/jboss/as/server/ServerControllerImpl.java"},{"diff":"@@ -66,7 +66,7 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         ModelNode model = context.getSubModel();\n         model.get(START).set(true);\n         ModelNode compensatingOp = DeploymentUndeployHandler.getOperation(operation.get(OP_ADDR));\n-        DeploymentHandlerUtil.deploy(model, context, resultHandler, compensatingOp);\n-        return new BasicOperationResult();\n+        DeploymentHandlerUtil.deploy(model, context, resultHandler);\n+        return new BasicOperationResult(compensatingOp);\n     }\n }","filename":"server/src/main/java/org/jboss/as/server/deployment/DeploymentDeployHandler.java"},{"diff":"@@ -113,7 +113,7 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n             compensatingOp.get(START).set(start);\n \n             if (start) {\n-                DeploymentHandlerUtil.replace(deployNode, name, context, resultHandler, compensatingOp);\n+                DeploymentHandlerUtil.replace(deployNode, name, context, resultHandler);\n             }\n             else {\n                 resultHandler.handleResultComplete();","filename":"server/src/main/java/org/jboss/as/server/deployment/DeploymentFullReplaceHandler.java"},{"diff":"@@ -21,6 +21,8 @@\n import java.util.Map;\n import java.util.Set;\n import org.jboss.as.controller.OperationFailedException;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.HASH;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RUNTIME_NAME;\n@@ -48,69 +50,75 @@\n     private DeploymentHandlerUtil() {\n     }\n \n-    public static void deploy(final ModelNode deploymentModel, OperationContext context, final ResultHandler resultHandler, final ModelNode compensatingOp) throws OperationFailedException {\n+    public static void deploy(final ModelNode deploymentModel, OperationContext context, final ResultHandler resultHandler) throws OperationFailedException {\n         if (context.getRuntimeContext() != null) {\n-            String deploymentUnitName = deploymentModel.require(NAME).asString();\n-            final ServiceName deploymentUnitServiceName = Services.deploymentUnitName(deploymentUnitName);\n-            final ServiceRegistry serviceRegistry = context.getRuntimeContext().getServiceRegistry();\n-            final ServiceController<?> controller = serviceRegistry.getService(deploymentUnitServiceName);\n-            if (controller != null) {\n-                controller.setMode(ServiceController.Mode.ACTIVE);\n-            } else {\n-                final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-                final String runtimeName = deploymentModel.require(RUNTIME_NAME).asString();\n-                final byte[] hash = deploymentModel.require(HASH).asBytes();\n-                final RootDeploymentUnitService service = new RootDeploymentUnitService(deploymentUnitName, runtimeName, hash, null, new AbstractDeploymentUnitService.DeploymentCompletionCallback() {\n-                    public void handleComplete() {\n-                        resultHandler.handleResultComplete();\n-                    }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    String deploymentUnitName = deploymentModel.require(NAME).asString();\n+                    final ServiceName deploymentUnitServiceName = Services.deploymentUnitName(deploymentUnitName);\n+                    final ServiceRegistry serviceRegistry = context.getServiceRegistry();\n+                    final ServiceController<?> controller = serviceRegistry.getService(deploymentUnitServiceName);\n+                    if (controller != null) {\n+                        controller.setMode(ServiceController.Mode.ACTIVE);\n+                    } else {\n+                        final ServiceTarget serviceTarget = context.getServiceTarget();\n+                        final String runtimeName = deploymentModel.require(RUNTIME_NAME).asString();\n+                        final byte[] hash = deploymentModel.require(HASH).asBytes();\n+                        final RootDeploymentUnitService service = new RootDeploymentUnitService(deploymentUnitName, runtimeName, hash, null, new AbstractDeploymentUnitService.DeploymentCompletionCallback() {\n+                            public void handleComplete() {\n+                                resultHandler.handleResultComplete();\n+                            }\n \n-                    public void handleFailure(Map<ServiceName, StartException> startExceptions, Set<ServiceName> failedDependencies) {\n-                        final StringBuilder failure = new StringBuilder(\"Deployment failed.  \");\n-                        if (!startExceptions.isEmpty()) {\n-                            failure.append(\"Service failures: \").append(startExceptions.values());\n-                        }\n-                        if (!failedDependencies.isEmpty()) {\n-                            failure.append(\"Failed Dependencies: \").append(failedDependencies);\n-                        }\n-                        resultHandler.handleFailed(new ModelNode().set(failure.toString()));\n+                            public void handleFailure(Map<ServiceName, StartException> startExceptions, Set<ServiceName> failedDependencies) {\n+                                final StringBuilder failure = new StringBuilder(\"Deployment failed.  \");\n+                                if (!startExceptions.isEmpty()) {\n+                                    failure.append(\"Service failures: \").append(startExceptions.values());\n+                                }\n+                                if (!failedDependencies.isEmpty()) {\n+                                    failure.append(\"Failed Dependencies: \").append(failedDependencies);\n+                                }\n+                                resultHandler.handleFailed(new ModelNode().set(failure.toString()));\n+                            }\n+                        });\n+                        serviceTarget.addService(deploymentUnitServiceName, service)\n+                                .addDependency(Services.JBOSS_DEPLOYMENT_CHAINS, DeployerChains.class, service.getDeployerChainsInjector())\n+                                .addDependency(ServerDeploymentRepository.SERVICE_NAME, ServerDeploymentRepository.class, service.getServerDeploymentRepositoryInjector())\n+                                .setInitialMode(ServiceController.Mode.ACTIVE)\n+                                .install();\n                     }\n-                });\n-                serviceTarget.addService(deploymentUnitServiceName, service)\n-                        .addDependency(Services.JBOSS_DEPLOYMENT_CHAINS, DeployerChains.class, service.getDeployerChainsInjector())\n-                        .addDependency(ServerDeploymentRepository.SERVICE_NAME, ServerDeploymentRepository.class, service.getServerDeploymentRepositoryInjector())\n-                        .setInitialMode(ServiceController.Mode.ACTIVE)\n-                        .install();\n-            }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }\n     }\n \n-    public static void replace(final ModelNode deploymentModel, final String toReplace, final OperationContext operationContext, final ResultHandler resultHandler,\n-        final ModelNode compensatingOp) throws OperationFailedException {\n-\n+    public static void replace(final ModelNode deploymentModel, final String toReplace, final OperationContext operationContext, final ResultHandler resultHandler) throws OperationFailedException {\n         if (operationContext.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = operationContext.getRuntimeContext().getServiceRegistry()\n-                    .getService(Services.JBOSS_DEPLOYMENT_UNIT.append(toReplace));\n-            if (controller != null) {\n-                controller.addListener(new AbstractServiceListener<Object>() {\n+            operationContext.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(Services.JBOSS_DEPLOYMENT_UNIT.append(toReplace));\n+                    if (controller != null) {\n+                        controller.addListener(new AbstractServiceListener<Object>() {\n \n-                    public void listenerAdded(ServiceController<? extends Object> serviceController) {\n-                        controller.setMode(ServiceController.Mode.REMOVE);\n-                    }\n+                            public void listenerAdded(ServiceController<? extends Object> serviceController) {\n+                                controller.setMode(ServiceController.Mode.REMOVE);\n+                            }\n \n-                    public void serviceRemoved(ServiceController<? extends Object> serviceController) {\n-                        try {\n-                            deploy(deploymentModel, operationContext, resultHandler, compensatingOp);\n-                        } catch (OperationFailedException e) {\n-                            throw new RuntimeException(e);\n-                        }\n+                            public void serviceRemoved(ServiceController<? extends Object> serviceController) {\n+                                try {\n+                                    deploy(deploymentModel, operationContext, resultHandler);\n+                                } catch (OperationFailedException e) {\n+                                    throw new RuntimeException(e);\n+                                }\n+                            }\n+                        });\n+                    } else {\n+                        deploy(deploymentModel, operationContext, resultHandler);\n                     }\n-                });\n-            } else {\n-                deploy(deploymentModel, operationContext, resultHandler, compensatingOp);\n-            }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/deployment/DeploymentHandlerUtil.java"},{"diff":"@@ -21,6 +21,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n@@ -73,16 +75,20 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         }\n     }\n \n-    private void redeploy(final ModelNode model, OperationContext context, ResultHandler resultHandler) {\n+    private void redeploy(final ModelNode model, final OperationContext context, final ResultHandler resultHandler) {\n         if (context.getRuntimeContext() != null) {\n-            String deploymentUnitName = model.require(NAME).asString();\n-            final ServiceName deploymentUnitServiceName = Services.deploymentUnitName(deploymentUnitName);\n-            final ServiceRegistry serviceRegistry = context.getRuntimeContext().getServiceRegistry();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    String deploymentUnitName = model.require(NAME).asString();\n+                    final ServiceName deploymentUnitServiceName = Services.deploymentUnitName(deploymentUnitName);\n+                    final ServiceRegistry serviceRegistry = context.getServiceRegistry();\n \n-            final ServiceController<?> controller = serviceRegistry.getService(deploymentUnitServiceName);\n-            controller.setMode(ServiceController.Mode.NEVER);\n-            controller.setMode(ServiceController.Mode.ACTIVE);\n-            controller.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                    final ServiceController<?> controller = serviceRegistry.getService(deploymentUnitServiceName);\n+                    controller.setMode(ServiceController.Mode.NEVER);\n+                    controller.setMode(ServiceController.Mode.ACTIVE);\n+                    controller.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/deployment/DeploymentRedeployHandler.java"},{"diff":"@@ -21,6 +21,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n@@ -61,7 +63,7 @@ public ModelNode getModelDescription(Locale locale) {\n      * {@inheritDoc}\n      */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, final ResultHandler resultHandler) throws OperationFailedException {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) throws OperationFailedException {\n         final ModelNode model = context.getSubModel();\n         final ModelNode compensatingOp = DeploymentAddHandler.getOperation(operation.get(OP_ADDR), model);\n         try {\n@@ -71,15 +73,20 @@ public OperationResult execute(OperationContext context, ModelNode operation, fi\n             }\n             else {\n                 if (context.getRuntimeContext() != null) {\n-                    String deploymentUnitName = model.require(NAME).asString();\n-                    final ServiceName deploymentUnitServiceName = Services.deploymentUnitName(deploymentUnitName);\n-                    final ServiceRegistry serviceRegistry = context.getRuntimeContext().getServiceRegistry();\n-                    final ServiceController<?> controller = serviceRegistry.getService(deploymentUnitServiceName);\n-                    if(controller != null) {\n-                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-                    } else {\n-                        resultHandler.handleResultComplete();\n-                    }\n+                    context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                        public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                            String deploymentUnitName = model.require(NAME).asString();\n+                            final ServiceName deploymentUnitServiceName = Services.deploymentUnitName(deploymentUnitName);\n+                            final ServiceRegistry serviceRegistry = context.getServiceRegistry();\n+                            final ServiceController<?> controller = serviceRegistry.getService(deploymentUnitServiceName);\n+                            if (controller != null) {\n+                                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                            } else {\n+                                resultHandler.handleResultComplete();\n+                            }\n+                        }\n+                    });\n+\n                 } else {\n                     resultHandler.handleResultComplete();\n                 }","filename":"server/src/main/java/org/jboss/as/server/deployment/DeploymentRemoveHandler.java"},{"diff":"@@ -97,7 +97,7 @@ else if (replaceNode == null) {\n                     compensatingOp.get(NAME).set(toReplace);\n                     compensatingOp.get(TO_REPLACE).set(name);\n \n-                    DeploymentHandlerUtil.replace(deployNode, toReplace, context, resultHandler, compensatingOp);\n+                    DeploymentHandlerUtil.replace(deployNode, toReplace, context, resultHandler);\n                 }\n             }\n ","filename":"server/src/main/java/org/jboss/as/server/deployment/DeploymentReplaceHandler.java"},{"diff":"@@ -21,6 +21,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.START;\n@@ -78,13 +80,17 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         }\n     }\n \n-    private void undeploy(final ModelNode model, OperationContext context, ResultHandler resultHandler) {\n+    private void undeploy(final ModelNode model, OperationContext context, final ResultHandler resultHandler) {\n         if (context.getRuntimeContext() != null) {\n-            String deploymentUnitName = model.require(NAME).asString();\n-            final ServiceName deploymentUnitServiceName = Services.deploymentUnitName(deploymentUnitName);\n-            final ServiceRegistry serviceRegistry = context.getRuntimeContext().getServiceRegistry();\n-            final ServiceController<?> controller = serviceRegistry.getService(deploymentUnitServiceName);\n-            controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    String deploymentUnitName = model.require(NAME).asString();\n+                    final ServiceName deploymentUnitServiceName = Services.deploymentUnitName(deploymentUnitName);\n+                    final ServiceRegistry serviceRegistry = context.getServiceRegistry();\n+                    final ServiceController<?> controller = serviceRegistry.getService(deploymentUnitServiceName);\n+                    controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/deployment/DeploymentUndeployHandler.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.server.operations;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n@@ -71,21 +74,25 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         subModel.get(ModelDescriptionConstants.PORT).set(port);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n \n-            Logger.getLogger(\"org.jboss.as\").infof(\"creating http management service using network interface (%s) port (%s)\", interfaceName, port);\n+                    Logger.getLogger(\"org.jboss.as\").infof(\"creating http management service using network interface (%s) port (%s)\", interfaceName, port);\n \n-            final HttpManagementService service = new HttpManagementService();\n-            serviceTarget.addService(HttpManagementService.SERVICE_NAME, service)\n-                    .addDependency(\n-                            NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(interfaceName),\n-                            NetworkInterfaceBinding.class, service.getInterfaceInjector())\n-                    .addDependency(Services.JBOSS_SERVER_CONTROLLER, ModelController.class, service.getModelControllerInjector())\n-                    .addInjection(service.getPortInjector(), port)\n-                    .addInjection(service.getExecutorServiceInjector(), Executors.newCachedThreadPool())\n-                    .setInitialMode(ServiceController.Mode.ACTIVE)\n-                    .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n-                    .install();\n+                    final HttpManagementService service = new HttpManagementService();\n+                    serviceTarget.addService(HttpManagementService.SERVICE_NAME, service)\n+                            .addDependency(\n+                                    NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(interfaceName),\n+                                    NetworkInterfaceBinding.class, service.getInterfaceInjector())\n+                            .addDependency(Services.JBOSS_SERVER_CONTROLLER, ModelController.class, service.getModelControllerInjector())\n+                            .addInjection(service.getPortInjector(), port)\n+                            .addInjection(service.getExecutorServiceInjector(), Executors.newCachedThreadPool())\n+                            .setInitialMode(ServiceController.Mode.ACTIVE)\n+                            .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n+                            .install();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/operations/HttpManagementAddHandler.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.server.operations;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n@@ -70,27 +73,31 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         subModel.get(ModelDescriptionConstants.PORT).set(port);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-\n-            Logger.getLogger(\"org.jboss.as\").infof(\"creating native management service using network interface (%s) port (%s)\", interfaceName, port);\n-\n-            final ManagementCommunicationService managementCommunicationService = new ManagementCommunicationService();\n-            serviceTarget.addService(ManagementCommunicationService.SERVICE_NAME, managementCommunicationService)\n-                    .addDependency(\n-                            NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(interfaceName),\n-                            NetworkInterfaceBinding.class, managementCommunicationService.getInterfaceInjector())\n-                    .addInjection(managementCommunicationService.getPortInjector(), port)\n-                    .addInjection(managementCommunicationService.getExecutorServiceInjector(), Executors.newCachedThreadPool())\n-                    .addInjection(managementCommunicationService.getThreadFactoryInjector(), Executors.defaultThreadFactory())\n-                    .setInitialMode(ServiceController.Mode.ACTIVE)\n-                    .install();\n-\n-            ServerControllerOperationHandlerService operationHandlerService = new ServerControllerOperationHandlerService();\n-            serviceTarget.addService(ServerControllerOperationHandlerService.SERVICE_NAME, operationHandlerService)\n-                    .addDependency(ManagementCommunicationService.SERVICE_NAME, ManagementCommunicationService.class, operationHandlerService.getManagementCommunicationServiceValue())\n-                    .addDependency(Services.JBOSS_SERVER_CONTROLLER, ModelController.class, operationHandlerService.getModelControllerValue())\n-                    .setInitialMode(ServiceController.Mode.ACTIVE)\n-                    .install();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n+\n+                    Logger.getLogger(\"org.jboss.as\").infof(\"creating native management service using network interface (%s) port (%s)\", interfaceName, port);\n+\n+                    final ManagementCommunicationService managementCommunicationService = new ManagementCommunicationService();\n+                    serviceTarget.addService(ManagementCommunicationService.SERVICE_NAME, managementCommunicationService)\n+                            .addDependency(\n+                                    NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(interfaceName),\n+                                    NetworkInterfaceBinding.class, managementCommunicationService.getInterfaceInjector())\n+                            .addInjection(managementCommunicationService.getPortInjector(), port)\n+                            .addInjection(managementCommunicationService.getExecutorServiceInjector(), Executors.newCachedThreadPool())\n+                            .addInjection(managementCommunicationService.getThreadFactoryInjector(), Executors.defaultThreadFactory())\n+                            .setInitialMode(ServiceController.Mode.ACTIVE)\n+                            .install();\n+\n+                    ServerControllerOperationHandlerService operationHandlerService = new ServerControllerOperationHandlerService();\n+                    serviceTarget.addService(ServerControllerOperationHandlerService.SERVICE_NAME, operationHandlerService)\n+                            .addDependency(ManagementCommunicationService.SERVICE_NAME, ManagementCommunicationService.class, operationHandlerService.getManagementCommunicationServiceValue())\n+                            .addDependency(Services.JBOSS_SERVER_CONTROLLER, ModelController.class, operationHandlerService.getModelControllerValue())\n+                            .setInitialMode(ServiceController.Mode.ACTIVE)\n+                            .install();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/operations/NativeManagementAddHandler.java"},{"diff":"@@ -22,10 +22,13 @@\n package org.jboss.as.server.operations;\n \n import java.util.ArrayDeque;\n+import java.util.Deque;\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n import org.jboss.as.controller.RuntimeOperationContext;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n@@ -49,8 +52,6 @@\n import org.jboss.as.server.ServerOperationContext;\n import org.jboss.as.server.controller.descriptions.ServerRootDescription;\n import org.jboss.dmr.ModelNode;\n-import org.jboss.msc.service.ServiceRegistry;\n-import org.jboss.msc.service.ServiceTarget;\n \n /**\n  * Handler for multi-step operations that have to be performed atomically.\n@@ -202,12 +203,29 @@ public void handleCancellation() {\n         }\n     }\n \n+    protected RuntimeTask getRuntimeTasks(final CompositeOperationContext context) {\n+        if(context instanceof RuntimeCompositeOperationContext) {\n+            final RuntimeCompositeOperationContext runtimeCompositeContext = RuntimeCompositeOperationContext.class.cast(context);\n+            if(!runtimeCompositeContext.runtimeTasks.isEmpty()) {\n+                return new RuntimeTask() {\n+                    public void execute(final RuntimeTaskContext context) throws OperationFailedException {\n+                        for(RuntimeTask runtimeTask : runtimeCompositeContext.runtimeTasks) {\n+                            runtimeTask.execute(context);\n+                        }\n+                    }\n+                };\n+            }\n+        }\n+        return null;\n+    }\n+\n     private static class RuntimeCompositeOperationContext extends CompositeOperationContext {\n \n         private final boolean rollbackOnRuntimeFailure;\n         private final ServerOperationContext overallRuntimeContext;\n         private boolean modelOnly = false;\n         private final Map<Integer, Boolean> modelOnlyStates = new HashMap<Integer, Boolean>();\n+        private Deque<RuntimeTask> runtimeTasks = new ArrayDeque<RuntimeTask>();\n \n         private RuntimeCompositeOperationContext(final ServerOperationContext overallContext, final ResultHandler resultHandler,\n                 final boolean rollbackOnRuntimeFailure) {\n@@ -241,7 +259,7 @@ private OperationContext getRuntimeOperationContext(final ModelNode stepModel) {\n             return new StepRuntimeOperationContext(stepModel);\n         }\n \n-        private class StepRuntimeOperationContext implements ServerOperationContext {\n+        private class StepRuntimeOperationContext implements ServerOperationContext, RuntimeOperationContext {\n             private ModelNode stepModel;\n \n             private StepRuntimeOperationContext(ModelNode stepModel) {\n@@ -274,7 +292,11 @@ public void revertRestartRequired() {\n             }\n \n             public RuntimeOperationContext getRuntimeContext() {\n-                return overallRuntimeContext.getRuntimeContext();\n+                return this;\n+            }\n+\n+            public void setRuntimeTask(RuntimeTask runtimeTask) {\n+                runtimeTasks.push(runtimeTask);\n             }\n         }\n ","filename":"server/src/main/java/org/jboss/as/server/operations/ServerCompositeOperationHandler.java"},{"diff":"@@ -21,6 +21,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FIXED_PORT;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.INTERFACE;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.MULTICAST_ADDRESS;\n@@ -70,38 +72,42 @@ private ServerSocketBindingAddHandler() {\n     }\n \n     @Override\n-    protected OperationResult installSocketBinding(final String name, final ModelNode operation, OperationContext context, ResultHandler resultHandler, ModelNode compensatingOp) throws OperationFailedException {\n+    protected OperationResult installSocketBinding(final String name, final ModelNode operation, final OperationContext context, final ResultHandler resultHandler, final ModelNode compensatingOp) throws OperationFailedException {\n         if (context.getRuntimeContext() != null) {\n-            // Resolve any expressions and re-validate\n-            final ModelNode resolvedOp = operation.resolve();\n-            final String failure = runtimeValidator.validate(resolvedOp);\n-            if (failure != null) {\n-                throw new OperationFailedException(new ModelNode().set(failure));\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    // Resolve any expressions and re-validate\n+                    final ModelNode resolvedOp = operation.resolve();\n+                    final String failure = runtimeValidator.validate(resolvedOp);\n+                    if (failure != null) {\n+                        throw new OperationFailedException(new ModelNode().set(failure));\n+                    }\n \n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n \n-            final String intf = resolvedOp.get(INTERFACE).isDefined() ? resolvedOp.get(INTERFACE).asString() : null;\n-            final int port = resolvedOp.get(PORT).asInt();\n-            final boolean fixedPort = resolvedOp.get(FIXED_PORT).asBoolean(false);\n-            final String mcastAddr = resolvedOp.get(MULTICAST_ADDRESS).isDefined() ? resolvedOp.get(MULTICAST_ADDRESS).asString() : null;\n-            final int mcastPort = resolvedOp.get(MULTICAST_PORT).isDefined() ? resolvedOp.get(MULTICAST_PORT).asInt() : 0;\n-            try {\n-                InetAddress mcastInet = mcastAddr == null ? null : InetAddress.getByName(mcastAddr);\n+                    final String intf = resolvedOp.get(INTERFACE).isDefined() ? resolvedOp.get(INTERFACE).asString() : null;\n+                    final int port = resolvedOp.get(PORT).asInt();\n+                    final boolean fixedPort = resolvedOp.get(FIXED_PORT).asBoolean(false);\n+                    final String mcastAddr = resolvedOp.get(MULTICAST_ADDRESS).isDefined() ? resolvedOp.get(MULTICAST_ADDRESS).asString() : null;\n+                    final int mcastPort = resolvedOp.get(MULTICAST_PORT).isDefined() ? resolvedOp.get(MULTICAST_PORT).asInt() : 0;\n+                    try {\n+                        InetAddress mcastInet = mcastAddr == null ? null : InetAddress.getByName(mcastAddr);\n \n-                final SocketBindingService service = new SocketBindingService(name, port, fixedPort, mcastInet, mcastPort);\n-                final ServiceBuilder<SocketBinding> builder = serviceTarget.addService(SocketBinding.JBOSS_BINDING_NAME.append(name), service);\n-                if (intf != null) {\n-                    builder.addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(intf), NetworkInterfaceBinding.class, service.getInterfaceBinding());\n-                }\n-                builder.addDependency(SocketBindingManager.SOCKET_BINDING_MANAGER, SocketBindingManager.class, service.getSocketBindings())\n-                        .setInitialMode(Mode.ON_DEMAND)\n-                        .install();\n+                        final SocketBindingService service = new SocketBindingService(name, port, fixedPort, mcastInet, mcastPort);\n+                        final ServiceBuilder<SocketBinding> builder = serviceTarget.addService(SocketBinding.JBOSS_BINDING_NAME.append(name), service);\n+                        if (intf != null) {\n+                            builder.addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(intf), NetworkInterfaceBinding.class, service.getInterfaceBinding());\n+                        }\n+                        builder.addDependency(SocketBindingManager.SOCKET_BINDING_MANAGER, SocketBindingManager.class, service.getSocketBindings())\n+                                .setInitialMode(Mode.ON_DEMAND)\n+                                .install();\n \n-                resultHandler.handleResultComplete();\n-            } catch (UnknownHostException e) {\n-                throw new OperationFailedException(new ModelNode().set(e.getLocalizedMessage()));\n-            }\n+                        resultHandler.handleResultComplete();\n+                    } catch (UnknownHostException e) {\n+                        throw new OperationFailedException(new ModelNode().set(e.getLocalizedMessage()));\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/operations/ServerSocketBindingAddHandler.java"},{"diff":"@@ -20,8 +20,11 @@\n \n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationContext;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n import org.jboss.as.controller.ResultHandler;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import org.jboss.as.controller.operations.common.SocketBindingRemoveHandler;\n import org.jboss.as.server.services.net.SocketBinding;\n import org.jboss.dmr.ModelNode;\n@@ -41,16 +44,19 @@ private ServerSocketBindingRemoveHandler() {\n     }\n \n     @Override\n-    protected OperationResult uninstallSocketBinding(final String name, ModelNode model, OperationContext context,\n-            ResultHandler resultHandler, ModelNode compensatingOp) {\n+    protected OperationResult uninstallSocketBinding(final String name, final ModelNode model, final OperationContext context, final ResultHandler resultHandler, final ModelNode compensatingOp) {\n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry()\n-                    .getService(SocketBinding.JBOSS_BINDING_NAME.append(name));\n-            if (controller != null) {\n-                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(SocketBinding.JBOSS_BINDING_NAME.append(name));\n+                    if (controller != null) {\n+                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/operations/ServerSocketBindingRemoveHandler.java"},{"diff":"@@ -21,6 +21,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEFAULT_INTERFACE;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.PORT_OFFSET;\n@@ -93,25 +95,29 @@ protected void populateModel(ModelNode model, ModelNode operation) {\n     }\n \n     @Override\n-    protected OperationResult installSocketBindingGroup(String name, final ModelNode operation, final OperationContext context,\n-            ResultHandler resultHandler, ModelNode compensatingOp) throws OperationFailedException {\n+    protected OperationResult installSocketBindingGroup(final String name, final ModelNode operation, final OperationContext context,\n+            final ResultHandler resultHandler, final ModelNode compensatingOp) throws OperationFailedException {\n         if (context.getRuntimeContext() != null) {\n-            // Resolve any expressions and re-validate\n-            ModelNode resolvedOp = operation.resolve();\n-            String failure = runtimeValidator.validate(resolvedOp);\n-            if (failure != null) {\n-                throw new OperationFailedException(new ModelNode().set(failure));\n-            }\n-            int portOffset = resolvedOp.get(PORT_OFFSET).isDefined() ? resolvedOp.get(PORT_OFFSET).asInt() : 0;\n-            String defaultInterface = resolvedOp.require(DEFAULT_INTERFACE).asString();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    // Resolve any expressions and re-validate\n+                    ModelNode resolvedOp = operation.resolve();\n+                    String failure = runtimeValidator.validate(resolvedOp);\n+                    if (failure != null) {\n+                        throw new OperationFailedException(new ModelNode().set(failure));\n+                    }\n+                    int portOffset = resolvedOp.get(PORT_OFFSET).isDefined() ? resolvedOp.get(PORT_OFFSET).asInt() : 0;\n+                    String defaultInterface = resolvedOp.require(DEFAULT_INTERFACE).asString();\n \n-            SocketBindingManagerService service = new SocketBindingManagerService(portOffset);\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-            serviceTarget.addService(SocketBindingManager.SOCKET_BINDING_MANAGER, service)\n-                    .setInitialMode(ServiceController.Mode.ON_DEMAND)\n-                    .addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(defaultInterface), NetworkInterfaceBinding.class, service.getDefaultInterfaceBinding())\n-                    .install();\n-            resultHandler.handleResultComplete();\n+                    SocketBindingManagerService service = new SocketBindingManagerService(portOffset);\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n+                    serviceTarget.addService(SocketBindingManager.SOCKET_BINDING_MANAGER, service)\n+                            .setInitialMode(ServiceController.Mode.ON_DEMAND)\n+                            .addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(defaultInterface), NetworkInterfaceBinding.class, service.getDefaultInterfaceBinding())\n+                            .install();\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/operations/SocketBindingGroupAddHandler.java"},{"diff":"@@ -20,8 +20,11 @@\n \n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationContext;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n import org.jboss.as.controller.ResultHandler;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import org.jboss.as.controller.interfaces.ParsedInterfaceCriteria;\n import org.jboss.as.controller.operations.common.InterfaceAddHandler;\n import org.jboss.as.server.services.net.NetworkInterfaceBinding;\n@@ -46,13 +49,17 @@ private SpecifiedInterfaceAddHandler() {\n     }\n \n     @Override\n-    protected OperationResult installInterface(final String name, final ParsedInterfaceCriteria criteria, OperationContext context, ResultHandler resultHandler, ModelNode compensatingOp) {\n+    protected OperationResult installInterface(final String name, final ParsedInterfaceCriteria criteria, final OperationContext context, final ResultHandler resultHandler, final ModelNode compensatingOp) {\n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-            ServiceBuilder<NetworkInterfaceBinding> builder = target.addService(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(name), createInterfaceService(name, criteria));\n-            builder.setInitialMode(Mode.ON_DEMAND)\n-                    .install();\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget target = context.getServiceTarget();\n+                    ServiceBuilder<NetworkInterfaceBinding> builder = target.addService(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(name), createInterfaceService(name, criteria));\n+                    builder.setInitialMode(Mode.ON_DEMAND)\n+                            .install();\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/operations/SpecifiedInterfaceAddHandler.java"},{"diff":"@@ -20,9 +20,12 @@\n \n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationContext;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n import org.jboss.as.controller.ResultHandler;\n import org.jboss.as.controller.RuntimeOperationContext;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import org.jboss.as.controller.operations.common.InterfaceRemoveHandler;\n import org.jboss.as.server.services.net.NetworkInterfaceService;\n import org.jboss.dmr.ModelNode;\n@@ -38,16 +41,20 @@\n     public static SpecifiedInterfaceRemoveHandler INSTANCE = new SpecifiedInterfaceRemoveHandler();\n \n     @Override\n-    protected OperationResult uninstallInterface(final String name, ModelNode criteria, OperationContext context, ResultHandler resultHandler, ModelNode compensatingOp) {\n+    protected OperationResult uninstallInterface(final String name, final ModelNode criteria, final OperationContext context, final ResultHandler resultHandler, final ModelNode compensatingOp) {\n         if (context.getRuntimeContext() != null) {\n-            RuntimeOperationContext runtimeContext = (RuntimeOperationContext) context;\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry()\n-                    .getService(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(name));\n-            if (controller != null) {\n-                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    RuntimeOperationContext runtimeContext = (RuntimeOperationContext) context;\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(name));\n+                    if (controller != null) {\n+                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/operations/SpecifiedInterfaceRemoveHandler.java"},{"diff":"@@ -20,8 +20,11 @@\n \n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationContext;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n import org.jboss.as.controller.ResultHandler;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import org.jboss.as.controller.operations.common.PathAddHandler;\n import org.jboss.as.server.services.path.AbsolutePathService;\n import org.jboss.as.server.services.path.RelativePathService;\n@@ -42,16 +45,20 @@ private SpecifiedPathAddHandler() {\n     }\n \n     @Override\n-    protected OperationResult installPath(final String name, final String path, final String relativeTo, OperationContext context, ResultHandler resultHandler, ModelNode compensatingOp) {\n+    protected OperationResult installPath(final String name, final String path, final String relativeTo, final OperationContext context, final ResultHandler resultHandler, final ModelNode compensatingOp) {\n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget target = context.getRuntimeContext().getServiceTarget().subTarget();\n-            target.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n-            if (relativeTo == null) {\n-                AbsolutePathService.addService(name, path, target);\n-            } else {\n-                RelativePathService.addService(name, path, relativeTo, target);\n-            }\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget target = context.getServiceTarget().subTarget();\n+                    target.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                    if (relativeTo == null) {\n+                        AbsolutePathService.addService(name, path, target);\n+                    } else {\n+                        RelativePathService.addService(name, path, relativeTo, target);\n+                    }\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/operations/SpecifiedPathAddHandler.java"},{"diff":"@@ -20,8 +20,11 @@\n \n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationContext;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n import org.jboss.as.controller.ResultHandler;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import org.jboss.as.controller.operations.common.PathRemoveHandler;\n import org.jboss.as.server.services.path.AbstractPathService;\n import org.jboss.dmr.ModelNode;\n@@ -37,15 +40,19 @@\n     public static SpecifiedPathRemoveHandler INSTANCE = new SpecifiedPathRemoveHandler();\n \n     @Override\n-    protected OperationResult uninstallPath(final String name, String path, String relativeTo, OperationContext context, ResultHandler resultHandler, ModelNode compensatingOp) {\n+    protected OperationResult uninstallPath(final String name, final String path, final String relativeTo, final OperationContext context, final ResultHandler resultHandler, final ModelNode compensatingOp) {\n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry()\n-                    .getService(AbstractPathService.pathNameOf(name));\n-            if (controller != null) {\n-                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(AbstractPathService.pathNameOf(name));\n+                    if (controller != null) {\n+                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/operations/SpecifiedPathRemoveHandler.java"},{"diff":"@@ -20,8 +20,11 @@\n \n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationContext;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n import org.jboss.as.controller.ResultHandler;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import org.jboss.dmr.ModelNode;\n \n /**\n@@ -39,10 +42,14 @@ private SystemPropertyAddHandler() {\n     }\n \n     @Override\n-    protected OperationResult updateSystemProperty(final String name, final String value, OperationContext context, ResultHandler resultHandler, ModelNode compensating) {\n+    protected OperationResult updateSystemProperty(final String name, final String value, final OperationContext context, final ResultHandler resultHandler, final ModelNode compensating) {\n         if (context.getRuntimeContext() != null) {\n-            System.setProperty(name, value);\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    System.setProperty(name, value);\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/operations/SystemPropertyAddHandler.java"},{"diff":"@@ -20,8 +20,11 @@\n \n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationContext;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n import org.jboss.as.controller.ResultHandler;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import org.jboss.dmr.ModelNode;\n \n /**\n@@ -37,10 +40,15 @@ private SystemPropertyRemoveHandler() {\n     }\n \n     @Override\n-    protected OperationResult removeSystemProperty(final String name, OperationContext context, ResultHandler resultHandler, ModelNode compensating) {\n+    protected OperationResult removeSystemProperty(final String name, OperationContext context, final ResultHandler resultHandler, final ModelNode compensating) {\n         if (context.getRuntimeContext() != null) {\n-            System.clearProperty(name);\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    System.clearProperty(name);\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n+\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"server/src/main/java/org/jboss/as/server/operations/SystemPropertyRemoveHandler.java"},{"diff":"@@ -22,7 +22,10 @@\n package org.jboss.as.threads;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n import static org.jboss.as.threads.CommonAttributes.ALLOW_CORE_TIMEOUT;\n import static org.jboss.as.threads.CommonAttributes.BLOCKING;\n@@ -95,22 +98,26 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         final ModelNode compensating = Util.getResourceRemoveOperation(params.getAddress());\n \n         if (context.getRuntimeContext() != null) {\n-            ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-            final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n-            final BoundedQueueThreadPoolService service = new BoundedQueueThreadPoolService(\n-                    params.getCoreThreads().getScaledCount(),\n-                    params.getMaxThreads().getScaledCount(),\n-                    params.getQueueLength().getScaledCount(),\n-                    params.isBlocking(),\n-                    params.getKeepAliveTime(),\n-                    params.isAllowCoreTimeout());\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    ServiceTarget target = context.getServiceTarget();\n+                    final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n+                    final BoundedQueueThreadPoolService service = new BoundedQueueThreadPoolService(\n+                            params.getCoreThreads().getScaledCount(),\n+                            params.getMaxThreads().getScaledCount(),\n+                            params.getQueueLength().getScaledCount(),\n+                            params.isBlocking(),\n+                            params.getKeepAliveTime(),\n+                            params.isAllowCoreTimeout());\n \n-            //TODO add the handoffExceutor injection\n+                    //TODO add the handoffExceutor injection\n \n-            final ServiceBuilder<Executor> serviceBuilder = target.addService(serviceName, service);\n-            ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target);\n-            serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n-            serviceBuilder.install();\n+                    final ServiceBuilder<Executor> serviceBuilder = target.addService(serviceName, service);\n+                    ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target);\n+                    serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                    serviceBuilder.install();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/BoundedQueueThreadPoolAdd.java"},{"diff":"@@ -22,7 +22,10 @@\n package org.jboss.as.threads;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.threads.CommonAttributes.ALLOW_CORE_TIMEOUT;\n@@ -93,13 +96,17 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         }\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry()\n-                .getService(ThreadsServices.threadFactoryName(name));\n-            if (controller != null) {\n-                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(ThreadsServices.threadFactoryName(name));\n+                    if (controller != null) {\n+                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/BoundedQueueThreadPoolRemove.java"},{"diff":"@@ -22,7 +22,10 @@\n package org.jboss.as.threads;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n import static org.jboss.as.threads.CommonAttributes.BLOCKING;\n import static org.jboss.as.threads.CommonAttributes.HANDOFF_EXECUTOR;\n@@ -79,16 +82,20 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         }\n \n         if (context.getRuntimeContext() != null) {\n-            ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-            final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n-            final QueuelessThreadPoolService service = new QueuelessThreadPoolService(params.getMaxThreads().getScaledCount(), params.isBlocking(), params.getKeepAliveTime());\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    ServiceTarget target = context.getServiceTarget();\n+                    final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n+                    final QueuelessThreadPoolService service = new QueuelessThreadPoolService(params.getMaxThreads().getScaledCount(), params.isBlocking(), params.getKeepAliveTime());\n \n-            //TODO add the handoffExceutor injection\n+                    //TODO add the handoffExceutor injection\n \n-            final ServiceBuilder<ExecutorService> serviceBuilder = target.addService(serviceName, service);\n-            ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target);\n-            serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n-            serviceBuilder.install();\n+                    final ServiceBuilder<ExecutorService> serviceBuilder = target.addService(serviceName, service);\n+                    ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target);\n+                    serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                    serviceBuilder.install();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/QueuelessThreadPoolAdd.java"},{"diff":"@@ -22,7 +22,10 @@\n package org.jboss.as.threads;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.threads.CommonAttributes.BLOCKING;\n@@ -60,13 +63,17 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         final String name = address.getLastElement().getValue();\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry()\n-                    .getService(ThreadsServices.threadFactoryName(name));\n-            if (controller != null) {\n-                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(ThreadsServices.threadFactoryName(name));\n+                    if (controller != null) {\n+                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/QueuelessThreadPoolRemove.java"},{"diff":"@@ -22,7 +22,10 @@\n package org.jboss.as.threads;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n import static org.jboss.as.threads.CommonAttributes.KEEPALIVE_TIME;\n import static org.jboss.as.threads.CommonAttributes.MAX_THREADS;\n@@ -74,13 +77,17 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         }\n \n         if (context.getRuntimeContext() != null) {\n-            ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-            final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n-            final ScheduledThreadPoolService service = new ScheduledThreadPoolService(params.getMaxThreads().getScaledCount(), params.getKeepAliveTime());\n-            final ServiceBuilder<ScheduledExecutorService> serviceBuilder = target.addService(serviceName, service);\n-            ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target);\n-            serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n-            serviceBuilder.install();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    ServiceTarget target = context.getServiceTarget();\n+                    final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n+                    final ScheduledThreadPoolService service = new ScheduledThreadPoolService(params.getMaxThreads().getScaledCount(), params.getKeepAliveTime());\n+                    final ServiceBuilder<ScheduledExecutorService> serviceBuilder = target.addService(serviceName, service);\n+                    ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target);\n+                    serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                    serviceBuilder.install();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/ScheduledThreadPoolAdd.java"},{"diff":"@@ -22,7 +22,10 @@\n package org.jboss.as.threads;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.threads.CommonAttributes.KEEPALIVE_TIME;\n@@ -56,13 +59,17 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         final String name = address.getLastElement().getValue();\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry()\n-                .getService(ThreadsServices.threadFactoryName(name));\n-            if (controller != null) {\n-                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(ThreadsServices.threadFactoryName(name));\n+                    if (controller != null) {\n+                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/ScheduledThreadPoolRemove.java"},{"diff":"@@ -24,6 +24,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.threads.CommonAttributes.GROUP_NAME;\n@@ -84,20 +86,24 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         }\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-            final ThreadFactoryService service = new ThreadFactoryService();\n-            service.setNamePattern(threadNamePattern);\n-            service.setPriority(priority);\n-            service.setThreadGroupName(groupName);\n-            //TODO What about the properties?\n-            try {\n-                target.addService(ThreadsServices.threadFactoryName(name), service)\n-                        .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n-                        .setInitialMode(ServiceController.Mode.ACTIVE)\n-                        .install();\n-            } catch (ServiceRegistryException e) {\n-                throw new OperationFailedException(new ModelNode().set(e.getMessage()));\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget target = context.getServiceTarget();\n+                    final ThreadFactoryService service = new ThreadFactoryService();\n+                    service.setNamePattern(threadNamePattern);\n+                    service.setPriority(priority);\n+                    service.setThreadGroupName(groupName);\n+                    //TODO What about the properties?\n+                    try {\n+                        target.addService(ThreadsServices.threadFactoryName(name), service)\n+                                .addListener(new ResultHandler.ServiceStartListener(resultHandler))\n+                                .setInitialMode(ServiceController.Mode.ACTIVE)\n+                                .install();\n+                    } catch (ServiceRegistryException e) {\n+                        throw new OperationFailedException(new ModelNode().set(e.getMessage()));\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/ThreadFactoryAdd.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.VALUE;\n \n@@ -83,15 +85,19 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         model.get(CommonAttributes.GROUP_NAME).set(newValue);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> service = context.getRuntimeContext().getServiceRegistry()\n-                .getService(ThreadsServices.threadFactoryName(name));\n-            if (service == null) {\n-                throw new OperationFailedException(notConfigured(name));\n-            } else {\n-                final ThreadFactoryService threadFactoryService = (ThreadFactoryService) service.getValue();\n-                threadFactoryService.setThreadGroupName(newGroupName);\n-            }\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> service = context.getServiceRegistry()\n+                            .getService(ThreadsServices.threadFactoryName(name));\n+                    if (service == null) {\n+                        throw new OperationFailedException(notConfigured(name));\n+                    } else {\n+                        final ThreadFactoryService threadFactoryService = (ThreadFactoryService) service.getValue();\n+                        threadFactoryService.setThreadGroupName(newGroupName);\n+                    }\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/ThreadFactoryGroupNameUpdate.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.VALUE;\n \n@@ -82,15 +84,19 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         model.get(CommonAttributes.PRIORITY).set(newValue);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> service = context.getRuntimeContext().getServiceRegistry()\n-                .getService(ThreadsServices.threadFactoryName(name));\n-            if (service == null) {\n-                throw new OperationFailedException(notConfigured(name));\n-            } else {\n-                final ThreadFactoryService threadFactoryService = (ThreadFactoryService) service.getValue();\n-                threadFactoryService.setPriority(newPriority);\n-            }\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> service = context.getServiceRegistry()\n+                            .getService(ThreadsServices.threadFactoryName(name));\n+                    if (service == null) {\n+                        throw new OperationFailedException(notConfigured(name));\n+                    } else {\n+                        final ThreadFactoryService threadFactoryService = (ThreadFactoryService) service.getValue();\n+                        threadFactoryService.setPriority(newPriority);\n+                    }\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/ThreadFactoryPriorityUpdate.java"},{"diff":"@@ -22,7 +22,10 @@\n package org.jboss.as.threads;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.threads.CommonAttributes.GROUP_NAME;\n@@ -64,13 +67,17 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         threadFactory.clear();\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry()\n-                .getService(ThreadsServices.threadFactoryName(name));\n-            if (controller != null) {\n-                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(ThreadsServices.threadFactoryName(name));\n+                    if (controller != null) {\n+                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/ThreadFactoryRemove.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.VALUE;\n \n@@ -84,15 +86,19 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         model.get(CommonAttributes.THREAD_NAME_PATTERN).set(newValue);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> service = context.getRuntimeContext().getServiceRegistry()\n-                .getService(ThreadsServices.threadFactoryName(name));\n-            if (service == null) {\n-                throw new OperationFailedException(notConfigured(name));\n-            } else {\n-                final ThreadFactoryService threadFactoryService = (ThreadFactoryService) service.getValue();\n-                threadFactoryService.setNamePattern(newNamePattern);\n-            }\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> service = context.getServiceRegistry()\n+                            .getService(ThreadsServices.threadFactoryName(name));\n+                    if (service == null) {\n+                        throw new OperationFailedException(notConfigured(name));\n+                    } else {\n+                        final ThreadFactoryService threadFactoryService = (ThreadFactoryService) service.getValue();\n+                        threadFactoryService.setNamePattern(newNamePattern);\n+                    }\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/ThreadFactoryThreadNamePatternUpdate.java"},{"diff":"@@ -22,7 +22,10 @@\n package org.jboss.as.threads;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n import static org.jboss.as.threads.CommonAttributes.KEEPALIVE_TIME;\n import static org.jboss.as.threads.CommonAttributes.MAX_THREADS;\n@@ -74,13 +77,17 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         }\n \n         if (context.getRuntimeContext() != null) {\n-            ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-            final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n-            final UnboundedQueueThreadPoolService service = new UnboundedQueueThreadPoolService(params.getMaxThreads().getScaledCount(), params.getKeepAliveTime());\n-            final ServiceBuilder<ExecutorService> serviceBuilder = target.addService(serviceName, service);\n-            ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target);\n-            serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n-            serviceBuilder.install();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    ServiceTarget target = context.getServiceTarget();\n+                    final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n+                    final UnboundedQueueThreadPoolService service = new UnboundedQueueThreadPoolService(params.getMaxThreads().getScaledCount(), params.getKeepAliveTime());\n+                    final ServiceBuilder<ExecutorService> serviceBuilder = target.addService(serviceName, service);\n+                    ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target);\n+                    serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                    serviceBuilder.install();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/UnboundedQueueThreadPoolAdd.java"},{"diff":"@@ -22,7 +22,10 @@\n package org.jboss.as.threads;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.threads.CommonAttributes.KEEPALIVE_TIME;\n@@ -57,13 +60,17 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n         final String name = address.getLastElement().getValue();\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry()\n-                .getService(ThreadsServices.threadFactoryName(name));\n-            if (controller != null) {\n-                controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(ThreadsServices.threadFactoryName(name));\n+                    if (controller != null) {\n+                        controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"threads/src/main/java/org/jboss/as/threads/UnboundedQueueThreadPoolRemove.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.txn;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.txn.CommonAttributes.BINDING;\n import static org.jboss.as.txn.CommonAttributes.COORDINATOR_ENVIRONMENT;\n@@ -65,7 +68,7 @@ private TransactionSubsystemAdd() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final ModelNode compensatingOperation = Util.getResourceRemoveOperation(operation.require(OP_ADDR));\n \n@@ -88,28 +91,32 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n \n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget target = context.getRuntimeContext().getServiceTarget();\n-\n-            // XATerminator has no deps, so just add it in there\n-            final XATerminatorService xaTerminatorService = new XATerminatorService();\n-            target.addService(TxnServices.JBOSS_TXN_XA_TERMINATOR, xaTerminatorService).setInitialMode(Mode.ACTIVE).install();\n-\n-            final ArjunaTransactionManagerService transactionManagerService = new ArjunaTransactionManagerService(nodeIdentifier, maxPorts, coordinatorEnableStatistics, coordinatorDefaultTimeout);\n-            target.addService(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER, transactionManagerService)\n-                    .addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"iiop\", \"orb\"), ORB.class, transactionManagerService.getOrbInjector())\n-                    .addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR, JBossXATerminator.class, transactionManagerService.getXaTerminatorInjector())\n-                    .addDependency(SocketBinding.JBOSS_BINDING_NAME.append(recoveryBindingName), SocketBinding.class, transactionManagerService.getRecoveryBindingInjector())\n-                    .addDependency(SocketBinding.JBOSS_BINDING_NAME.append(recoveryStatusBindingName), SocketBinding.class, transactionManagerService.getStatusBindingInjector())\n-                    .addDependency(SocketBinding.JBOSS_BINDING_NAME.append(bindingName), SocketBinding.class, transactionManagerService.getSocketProcessBindingInjector())\n-                    .addDependency(AbstractPathService.pathNameOf(INTERNAL_OBJECTSTORE_PATH), String.class, transactionManagerService.getPathInjector())\n-                    .setInitialMode(Mode.ACTIVE)\n-                    .install();\n-\n-            TransactionManagerService.addService(target);\n-            UserTransactionService.addService(target);\n-\n-            RelativePathService.addService(INTERNAL_OBJECTSTORE_PATH, objectStorePath, objectStorePathRef, target);\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget target = context.getServiceTarget();\n+\n+                    // XATerminator has no deps, so just add it in there\n+                    final XATerminatorService xaTerminatorService = new XATerminatorService();\n+                    target.addService(TxnServices.JBOSS_TXN_XA_TERMINATOR, xaTerminatorService).setInitialMode(Mode.ACTIVE).install();\n+\n+                    final ArjunaTransactionManagerService transactionManagerService = new ArjunaTransactionManagerService(nodeIdentifier, maxPorts, coordinatorEnableStatistics, coordinatorDefaultTimeout);\n+                    target.addService(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER, transactionManagerService)\n+                            .addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"iiop\", \"orb\"), ORB.class, transactionManagerService.getOrbInjector())\n+                            .addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR, JBossXATerminator.class, transactionManagerService.getXaTerminatorInjector())\n+                            .addDependency(SocketBinding.JBOSS_BINDING_NAME.append(recoveryBindingName), SocketBinding.class, transactionManagerService.getRecoveryBindingInjector())\n+                            .addDependency(SocketBinding.JBOSS_BINDING_NAME.append(recoveryStatusBindingName), SocketBinding.class, transactionManagerService.getStatusBindingInjector())\n+                            .addDependency(SocketBinding.JBOSS_BINDING_NAME.append(bindingName), SocketBinding.class, transactionManagerService.getSocketProcessBindingInjector())\n+                            .addDependency(AbstractPathService.pathNameOf(INTERNAL_OBJECTSTORE_PATH), String.class, transactionManagerService.getPathInjector())\n+                            .setInitialMode(Mode.ACTIVE)\n+                            .install();\n+\n+                    TransactionManagerService.addService(target);\n+                    UserTransactionService.addService(target);\n+\n+                    RelativePathService.addService(INTERNAL_OBJECTSTORE_PATH, objectStorePath, objectStorePathRef, target);\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"transactions/src/main/java/org/jboss/as/txn/TransactionSubsystemAdd.java"},{"diff":"@@ -24,7 +24,10 @@\n \n import org.apache.catalina.connector.Connector;\n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.web.CommonAttributes.ENABLED;\n@@ -85,7 +88,7 @@ private WebConnectorAdd() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         ModelNode opAddr = operation.require(OP_ADDR);\n         final PathAddress address = PathAddress.pathAddress(opAddr);\n@@ -109,30 +112,34 @@ public OperationResult execute(OperationContext context, final ModelNode operati\n         if(operation.hasDefined(MAX_SAVE_POST_SIZE)) subModel.get(MAX_SAVE_POST_SIZE).set(operation.get(MAX_SAVE_POST_SIZE).asInt());\n \n         if (context.getRuntimeContext() != null) {\n-            final boolean enabled = operation.hasDefined(ENABLED) ? operation.get(ENABLED).asBoolean() : true;\n-            final WebConnectorService service = new WebConnectorService(operation.require(PROTOCOL).asString(), operation.get(SCHEME).asString());\n-            if (operation.hasDefined(SECURE)) service.setSecure(operation.get(SECURE).asBoolean());\n-            if (operation.hasDefined(ENABLE_LOOKUPS))\n-                service.setEnableLookups(operation.get(ENABLE_LOOKUPS).asBoolean());\n-            if (operation.hasDefined(PROXY_NAME)) service.setProxyName(operation.get(PROXY_NAME).asString());\n-            if (operation.hasDefined(PROXY_PORT)) service.setProxyPort(operation.get(PROXY_PORT).asInt());\n-            if (operation.hasDefined(REDIRECT_PORT))\n-                service.setRedirectPort(operation.get(REDIRECT_PORT).asInt());\n-            if (operation.hasDefined(MAX_POST_SIZE))\n-                service.setMaxPostSize(operation.get(MAX_POST_SIZE).asInt());\n-            if (operation.hasDefined(MAX_SAVE_POST_SIZE))\n-                service.setMaxSavePostSize(operation.get(MAX_SAVE_POST_SIZE).asInt());\n-            final ServiceBuilder<Connector> serviceBuilder = context.getRuntimeContext().getServiceTarget().addService(WebSubsystemServices.JBOSS_WEB_CONNECTOR.append(name), service)\n-                    .addDependency(WebSubsystemServices.JBOSS_WEB, WebServer.class, service.getServer())\n-                    .addDependency(SocketBinding.JBOSS_BINDING_NAME.append(bindingRef), SocketBinding.class, service.getBinding())\n-                    .setInitialMode(enabled ? Mode.ACTIVE : Mode.NEVER);\n-            if(enabled) {\n-                serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n-                serviceBuilder.install();\n-            } else {\n-                serviceBuilder.install();\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final boolean enabled = operation.hasDefined(ENABLED) ? operation.get(ENABLED).asBoolean() : true;\n+                    final WebConnectorService service = new WebConnectorService(operation.require(PROTOCOL).asString(), operation.get(SCHEME).asString());\n+                    if (operation.hasDefined(SECURE)) service.setSecure(operation.get(SECURE).asBoolean());\n+                    if (operation.hasDefined(ENABLE_LOOKUPS))\n+                        service.setEnableLookups(operation.get(ENABLE_LOOKUPS).asBoolean());\n+                    if (operation.hasDefined(PROXY_NAME)) service.setProxyName(operation.get(PROXY_NAME).asString());\n+                    if (operation.hasDefined(PROXY_PORT)) service.setProxyPort(operation.get(PROXY_PORT).asInt());\n+                    if (operation.hasDefined(REDIRECT_PORT))\n+                        service.setRedirectPort(operation.get(REDIRECT_PORT).asInt());\n+                    if (operation.hasDefined(MAX_POST_SIZE))\n+                        service.setMaxPostSize(operation.get(MAX_POST_SIZE).asInt());\n+                    if (operation.hasDefined(MAX_SAVE_POST_SIZE))\n+                        service.setMaxSavePostSize(operation.get(MAX_SAVE_POST_SIZE).asInt());\n+                    final ServiceBuilder<Connector> serviceBuilder = context.getServiceTarget().addService(WebSubsystemServices.JBOSS_WEB_CONNECTOR.append(name), service)\n+                            .addDependency(WebSubsystemServices.JBOSS_WEB, WebServer.class, service.getServer())\n+                            .addDependency(SocketBinding.JBOSS_BINDING_NAME.append(bindingRef), SocketBinding.class, service.getBinding())\n+                            .setInitialMode(enabled ? Mode.ACTIVE : Mode.NEVER);\n+                    if (enabled) {\n+                        serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                        serviceBuilder.install();\n+                    } else {\n+                        serviceBuilder.install();\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"web/src/main/java/org/jboss/as/web/WebConnectorAdd.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n@@ -61,24 +63,28 @@\n     public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) throws OperationFailedException {\n \n         if (context.getRuntimeContext() != null) {\n-            final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n-            final String name = address.getLastElement().getValue();\n-            final String attributeName = operation.require(NAME).asString();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n+                    final String name = address.getLastElement().getValue();\n+                    final String attributeName = operation.require(NAME).asString();\n \n-            final ServiceController<?> controller = context.getRuntimeContext().getServiceRegistry()\n-                .getService(WebSubsystemServices.JBOSS_WEB_CONNECTOR.append(name));\n-            if (controller != null) {\n-                try {\n-                    final Connector connector = (Connector) controller.getValue();\n-                    final int port = connector.getPort();\n-                    final ModelNode result = new ModelNode();\n-                    result.set(\"\" + getAttribute(\"http-\" + port, attributeName));\n-                    resultHandler.handleResultFragment(new String[0], result);\n-                    resultHandler.handleResultComplete();\n-                } catch (Exception e) {\n-                    throw new OperationFailedException(new ModelNode().set(\"failed to get metrics\" + e.getMessage()));\n+                    final ServiceController<?> controller = context.getServiceRegistry()\n+                            .getService(WebSubsystemServices.JBOSS_WEB_CONNECTOR.append(name));\n+                    if (controller != null) {\n+                        try {\n+                            final Connector connector = (Connector) controller.getValue();\n+                            final int port = connector.getPort();\n+                            final ModelNode result = new ModelNode();\n+                            result.set(\"\" + getAttribute(\"http-\" + port, attributeName));\n+                            resultHandler.handleResultFragment(new String[0], result);\n+                            resultHandler.handleResultComplete();\n+                        } catch (Exception e) {\n+                            throw new OperationFailedException(new ModelNode().set(\"failed to get metrics\" + e.getMessage()));\n+                        }\n+                    }\n                 }\n-            }\n+            });\n         } else {\n             resultHandler.handleResultFragment(NO_LOCATION, new ModelNode().set(\"no metrics available\"));\n             resultHandler.handleResultComplete();","filename":"web/src/main/java/org/jboss/as/web/WebConnectorMetrics.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.web;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n import org.jboss.as.controller.ModelRemoveOperationHandler;\n@@ -48,7 +51,7 @@ private WebConnectorRemove() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         ModelNode opAddr = operation.require(OP_ADDR);\n         final PathAddress address = PathAddress.pathAddress(opAddr);\n@@ -58,13 +61,17 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         final ModelNode compensatingOperation = WebConnectorAdd.getRecreateOperation(opAddr, subModel);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> service = context.getRuntimeContext().getServiceRegistry()\n-                .getService(WebSubsystemServices.JBOSS_WEB_HOST.append(name));\n-            if (service != null) {\n-                service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> service = context.getServiceRegistry()\n+                            .getService(WebSubsystemServices.JBOSS_WEB_HOST.append(name));\n+                    if (service != null) {\n+                        service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"web/src/main/java/org/jboss/as/web/WebConnectorRemove.java"},{"diff":"@@ -25,6 +25,8 @@\n import org.jboss.as.controller.BasicOperationResult;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\n@@ -71,7 +73,7 @@ private WebSubsystemAdd() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext updateContext, final ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n+    public OperationResult execute(final OperationContext updateContext, final ModelNode operation, final ResultHandler resultHandler) throws OperationFailedException {\n         final ModelNode config = operation.get(CommonAttributes.CONTAINER_CONFIG);\n \n         final ModelNode subModel = updateContext.getSubModel();\n@@ -81,36 +83,39 @@ public OperationResult execute(OperationContext updateContext, final ModelNode o\n \n         if (updateContext instanceof BootOperationContext) {\n             final BootOperationContext ctx = (BootOperationContext) updateContext;\n-\n-            final String defaultHost = operation.has(CommonAttributes.DEFAULT_HOST) ?\n-                    operation.get(CommonAttributes.DEFAULT_HOST).asString() : DEFAULT_HOST;\n-\n-            try {\n-                final WebServerService service = new WebServerService(defaultHost);\n-                updateContext.getRuntimeContext().getServiceTarget().addService(WebSubsystemServices.JBOSS_WEB, service)\n-                        .addDependency(AbstractPathService.pathNameOf(TEMP_DIR), String.class, service.getPathInjector())\n-                        .addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"mbean\", \"server\"), MBeanServer.class, service.getMbeanServer())\n-                        .setInitialMode(Mode.ON_DEMAND)\n-                        .install();\n-            } catch (Throwable t) {\n-                throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n-            }\n-\n-            final SharedWebMetaDataBuilder sharedWebBuilder = new SharedWebMetaDataBuilder(config.clone());\n-            final SharedTldsMetaDataBuilder sharedTldsBuilder = new SharedTldsMetaDataBuilder(config.clone());\n-\n-            ctx.addDeploymentProcessor(Phase.STRUCTURE, Phase.STRUCTURE_WAR_DEPLOYMENT_INIT, new WarDeploymentInitializingProcessor());\n-            ctx.addDeploymentProcessor(Phase.STRUCTURE, Phase.STRUCTURE_WAR, new WarStructureDeploymentProcessor(sharedWebBuilder.create(), sharedTldsBuilder.create()));\n-            ctx.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_DEPLOYMENT, new WebParsingDeploymentProcessor());\n-            ctx.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_DEPLOYMENT_FRAGMENT, new WebFragmentParsingDeploymentProcessor());\n-            ctx.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JBOSS_WEB_DEPLOYMENT, new JBossWebParsingDeploymentProcessor());\n-            ctx.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_TLD_DEPLOYMENT, new TldParsingDeploymentProcessor());\n-            ctx.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_WAR_MODULE, new WarClassloadingDependencyProcessor());\n-            ctx.addDeploymentProcessor(Phase.POST_MODULE, Phase.POST_MODULE_ANNOTATION_WAR, new WarAnnotationDeploymentProcessor());\n-            ctx.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_SERVLET_INIT_DEPLOYMENT, new ServletContainerInitializerDeploymentProcessor());\n-            ctx.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_WAR_METADATA, new WarMetaDataProcessor());\n-            ctx.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_WAR_DEPLOYMENT, new WarDeploymentProcessor(defaultHost));\n-            resultHandler.handleResultComplete();\n+            updateContext.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final String defaultHost = operation.has(CommonAttributes.DEFAULT_HOST) ?\n+                            operation.get(CommonAttributes.DEFAULT_HOST).asString() : DEFAULT_HOST;\n+\n+                    try {\n+                        final WebServerService service = new WebServerService(defaultHost);\n+                        context.getServiceTarget().addService(WebSubsystemServices.JBOSS_WEB, service)\n+                                .addDependency(AbstractPathService.pathNameOf(TEMP_DIR), String.class, service.getPathInjector())\n+                                .addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"mbean\", \"server\"), MBeanServer.class, service.getMbeanServer())\n+                                .setInitialMode(Mode.ON_DEMAND)\n+                                .install();\n+                    } catch (Throwable t) {\n+                        throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));\n+                    }\n+\n+                    final SharedWebMetaDataBuilder sharedWebBuilder = new SharedWebMetaDataBuilder(config.clone());\n+                    final SharedTldsMetaDataBuilder sharedTldsBuilder = new SharedTldsMetaDataBuilder(config.clone());\n+\n+                    ctx.addDeploymentProcessor(Phase.STRUCTURE, Phase.STRUCTURE_WAR_DEPLOYMENT_INIT, new WarDeploymentInitializingProcessor());\n+                    ctx.addDeploymentProcessor(Phase.STRUCTURE, Phase.STRUCTURE_WAR, new WarStructureDeploymentProcessor(sharedWebBuilder.create(), sharedTldsBuilder.create()));\n+                    ctx.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_DEPLOYMENT, new WebParsingDeploymentProcessor());\n+                    ctx.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_DEPLOYMENT_FRAGMENT, new WebFragmentParsingDeploymentProcessor());\n+                    ctx.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JBOSS_WEB_DEPLOYMENT, new JBossWebParsingDeploymentProcessor());\n+                    ctx.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_TLD_DEPLOYMENT, new TldParsingDeploymentProcessor());\n+                    ctx.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_WAR_MODULE, new WarClassloadingDependencyProcessor());\n+                    ctx.addDeploymentProcessor(Phase.POST_MODULE, Phase.POST_MODULE_ANNOTATION_WAR, new WarAnnotationDeploymentProcessor());\n+                    ctx.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_SERVLET_INIT_DEPLOYMENT, new ServletContainerInitializerDeploymentProcessor());\n+                    ctx.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_WAR_METADATA, new WarMetaDataProcessor());\n+                    ctx.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_WAR_DEPLOYMENT, new WarDeploymentProcessor(defaultHost));\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"web/src/main/java/org/jboss/as/web/WebSubsystemAdd.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.web;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n@@ -59,7 +62,7 @@ private WebVirtualHostAdd() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n         final String name = address.getLastElement().getValue();\n@@ -74,23 +77,27 @@ public OperationResult execute(OperationContext context, final ModelNode operati\n         subModel.get(CommonAttributes.REWRITE).set(operation.get(CommonAttributes.REWRITE));\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-            final WebVirtualHostService service = new WebVirtualHostService(name, aliases(operation));\n-            final ServiceBuilder<?> serviceBuilder = serviceTarget.addService(WebSubsystemServices.JBOSS_WEB_HOST.append(name), service)\n-                    .addDependency(AbstractPathService.pathNameOf(TEMP_DIR), String.class, service.getTempPathInjector())\n-                    .addDependency(WebSubsystemServices.JBOSS_WEB, WebServer.class, service.getWebServer());\n-            if (operation.hasDefined(CommonAttributes.ACCESS_LOG)) {\n-                final ModelNode accessLog = operation.get(CommonAttributes.ACCESS_LOG);\n-                service.setAccessLog(accessLog.clone());\n-                // Create the access log service\n-                accessLogService(name, accessLog, serviceTarget);\n-                serviceBuilder.addDependency(WebSubsystemServices.JBOSS_WEB_HOST.append(name, CommonAttributes.ACCESS_LOG), String.class, service.getAccessLogPathInjector());\n-            }\n-            if (operation.hasDefined(CommonAttributes.REWRITE)) {\n-                service.setRewrite(operation.get(CommonAttributes.REWRITE).clone());\n-            }\n-            serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n-            serviceBuilder.install();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceTarget serviceTarget = context.getServiceTarget();\n+                    final WebVirtualHostService service = new WebVirtualHostService(name, aliases(operation));\n+                    final ServiceBuilder<?> serviceBuilder = serviceTarget.addService(WebSubsystemServices.JBOSS_WEB_HOST.append(name), service)\n+                            .addDependency(AbstractPathService.pathNameOf(TEMP_DIR), String.class, service.getTempPathInjector())\n+                            .addDependency(WebSubsystemServices.JBOSS_WEB, WebServer.class, service.getWebServer());\n+                    if (operation.hasDefined(CommonAttributes.ACCESS_LOG)) {\n+                        final ModelNode accessLog = operation.get(CommonAttributes.ACCESS_LOG);\n+                        service.setAccessLog(accessLog.clone());\n+                        // Create the access log service\n+                        accessLogService(name, accessLog, serviceTarget);\n+                        serviceBuilder.addDependency(WebSubsystemServices.JBOSS_WEB_HOST.append(name, CommonAttributes.ACCESS_LOG), String.class, service.getAccessLogPathInjector());\n+                    }\n+                    if (operation.hasDefined(CommonAttributes.REWRITE)) {\n+                        service.setRewrite(operation.get(CommonAttributes.REWRITE).clone());\n+                    }\n+                    serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));\n+                    serviceBuilder.install();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"web/src/main/java/org/jboss/as/web/WebVirtualHostAdd.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.web;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n import org.jboss.as.controller.ModelRemoveOperationHandler;\n@@ -46,7 +49,7 @@ private WebVirtualHostRemove() {\n \n     /** {@inheritDoc} */\n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n \n         final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n         final String name = address.getLastElement().getValue();\n@@ -55,13 +58,17 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n         final ModelNode compensatingOperation = WebVirtualHostAdd.getAddOperation(operation.require(OP_ADDR), subModel);\n \n         if (context.getRuntimeContext() != null) {\n-            final ServiceController<?> service = context.getRuntimeContext().getServiceRegistry()\n-                .getService(WebSubsystemServices.JBOSS_WEB_HOST.append(name));\n-            if (service != null) {\n-                service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n-            } else {\n-                resultHandler.handleResultComplete();\n-            }\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    final ServiceController<?> service = context.getServiceRegistry()\n+                            .getService(WebSubsystemServices.JBOSS_WEB_HOST.append(name));\n+                    if (service != null) {\n+                        service.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));\n+                    } else {\n+                        resultHandler.handleResultComplete();\n+                    }\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"web/src/main/java/org/jboss/as/web/WebVirtualHostRemove.java"},{"diff":"@@ -22,7 +22,10 @@\n package org.jboss.as.webservices;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n import static org.jboss.as.webservices.CommonAttributes.CONFIGURATION;\n import static org.jboss.as.webservices.CommonAttributes.MODIFY_SOAP_ADDRESS;\n@@ -81,7 +84,7 @@ private WSSubsystemAdd() {\n     }\n \n     @Override\n-    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n+    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n         operationValidator.validate(operation);\n         final ModelNode config = operation.require(CONFIGURATION);\n         configValidator.validate(config);\n@@ -91,16 +94,20 @@ public OperationResult execute(OperationContext context, ModelNode operation, Re\n \n         if (context instanceof BootOperationContext) {\n             final BootOperationContext updateContext = (BootOperationContext) context;\n-            log.info(\"Activating WebServices Extension\");\n-            WSServices.saveContainerRegistry(context.getRuntimeContext().getServiceRegistry());\n-\n-            ServiceTarget serviceTarget = context.getRuntimeContext().getServiceTarget();\n-            addConfigService(serviceTarget, config);\n-            addRegistryService(serviceTarget);\n-\n-            //add the DUP for dealing with WS deployments\n-            WSDeploymentActivator.activate(updateContext);\n-            resultHandler.handleResultComplete();\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    log.info(\"Activating WebServices Extension\");\n+                    WSServices.saveContainerRegistry(context.getServiceRegistry());\n+\n+                    ServiceTarget serviceTarget = context.getServiceTarget();\n+                    addConfigService(serviceTarget, config);\n+                    addRegistryService(serviceTarget);\n+\n+                    //add the DUP for dealing with WS deployments\n+                    WSDeploymentActivator.activate(updateContext);\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"webservices/server-integration/src/main/java/org/jboss/as/webservices/WSSubsystemAdd.java"},{"diff":"@@ -23,7 +23,10 @@\n package org.jboss.as.weld;\n \n import org.jboss.as.controller.BasicOperationResult;\n+import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.OperationResult;\n+import org.jboss.as.controller.RuntimeTask;\n+import org.jboss.as.controller.RuntimeTaskContext;\n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n \n import org.jboss.as.controller.ModelAddOperationHandler;\n@@ -63,18 +66,21 @@ public OperationResult execute(final OperationContext context, final ModelNode o\n \n         if (context instanceof BootOperationContext) {\n             final BootOperationContext bootContext = (BootOperationContext) context;\n+            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n+                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n+                    bootContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_WELD, new WeldDependencyProcessor());\n+                    bootContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WELD_DEPLOYMENT, new BeansXmlProcessor());\n+                    bootContext.addDeploymentProcessor(Phase.POST_MODULE, Phase.POST_MODULE_WELD_WEB_INTEGRATION, new WebIntegrationProcessor());\n+                    bootContext.addDeploymentProcessor(Phase.POST_MODULE, Phase.POST_MODULE_WELD_BEAN_ARCHIVE, new BeanArchiveProcessor());\n+                    bootContext.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_WELD_DEPLOYMENT, new WeldDeploymentProcessor());\n+                    bootContext.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_WELD_BEAN_MANAGER, new WeldBeanManagerServiceProcessor());\n \n-            bootContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_WELD, new WeldDependencyProcessor());\n-            bootContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WELD_DEPLOYMENT, new BeansXmlProcessor());\n-            bootContext.addDeploymentProcessor(Phase.POST_MODULE, Phase.POST_MODULE_WELD_WEB_INTEGRATION, new WebIntegrationProcessor());\n-            bootContext.addDeploymentProcessor(Phase.POST_MODULE, Phase.POST_MODULE_WELD_BEAN_ARCHIVE, new BeanArchiveProcessor());\n-            bootContext.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_WELD_DEPLOYMENT, new WeldDeploymentProcessor());\n-            bootContext.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_WELD_BEAN_MANAGER, new WeldBeanManagerServiceProcessor());\n-\n-            TCCLSingletonService singleton = new TCCLSingletonService();\n-            context.getRuntimeContext().getServiceTarget().addService(TCCLSingletonService.SERVICE_NAME, singleton).setInitialMode(\n-                    Mode.ON_DEMAND).install();\n-            resultHandler.handleResultComplete();\n+                    TCCLSingletonService singleton = new TCCLSingletonService();\n+                    context.getServiceTarget().addService(TCCLSingletonService.SERVICE_NAME, singleton).setInitialMode(\n+                            Mode.ON_DEMAND).install();\n+                    resultHandler.handleResultComplete();\n+                }\n+            });\n         } else {\n             resultHandler.handleResultComplete();\n         }","filename":"weld/src/main/java/org/jboss/as/weld/WeldSubsystemAdd.java"}],"committer":{"login":"baileyje","name":"John E. Bailey","email":"jbailey@redhat.com"},"committed_date":"2011-02-18T13:56:57-08:00","added":["controller/src/main/java/org/jboss/as/controller/RuntimeTask.java","controller/src/main/java/org/jboss/as/controller/RuntimeTaskContext.java"],"authored_date":"2011-02-18T12:27:04-08:00"}}