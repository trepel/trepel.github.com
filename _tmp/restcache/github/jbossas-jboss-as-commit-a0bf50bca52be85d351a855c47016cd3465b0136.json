{"commit":{"committer":{"email":"brian.stansberry@redhat.com","login":"bstansberry","name":"bstansberry@jboss.com"},"authored_date":"2011-06-22T06:12:56-07:00","id":"a0bf50bca52be85d351a855c47016cd3465b0136","message":"[AS7-1047] Additional switch to support anonymous SASL by default.","committed_date":"2011-06-22T14:51:51-07:00","url":"/jbossas/jboss-as/commit/a0bf50bca52be85d351a855c47016cd3465b0136","parents":[{"id":"81049aa0fb0908295d676b51a33c6221f79a624c"}],"tree":"22ba27752b48da1b69840b15bd08e0c36cce411f","modified":[{"diff":"@@ -72,6 +72,10 @@\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n+        <groupId>org.jboss.sasl</groupId>\n+        <artifactId>jboss-sasl</artifactId>\n+    </dependency>\n+    <dependency>\n       <groupId>org.jboss.as</groupId>\n       <artifactId>jboss-as-build</artifactId>\n       <version>${project.version}</version>","filename":"arquillian/container-managed-domain/pom.xml"},{"diff":"@@ -31,6 +31,8 @@\n import java.net.UnknownHostException;\n import java.security.AccessController;\n import java.security.PrivilegedAction;\n+import java.security.Provider;\n+import java.security.Security;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -52,6 +54,7 @@\n import org.jboss.as.controller.client.helpers.domain.ServerIdentity;\n import org.jboss.as.controller.client.helpers.domain.ServerStatus;\n import org.jboss.dmr.ModelNode;\n+import org.jboss.sasl.JBossSaslProvider;\n \n /**\n  * Utility for controlling the lifecycle of a domain.\n@@ -66,6 +69,7 @@\n \n     private Process process;\n     private Thread shutdownThread;\n+    private Provider saslProvider = new JBossSaslProvider();\n \n     private final JBossAsManagedConfiguration configuration;\n     private DomainClient domainClient;\n@@ -81,6 +85,7 @@ public DomainLifecycleUtil(final JBossAsManagedConfiguration configuration) {\n     }\n \n     public void start() {\n+        Security.addProvider(saslProvider);\n         try {\n             configuration.validate();\n \n@@ -277,6 +282,7 @@ public void stop() {\n                 executor = null;\n             }\n         }\n+        Security.removeProvider(saslProvider.getName());\n     }\n \n     public Future<Void> stopAsync() {","filename":"arquillian/container-managed-domain/src/main/java/org/jboss/as/arquillian/container/domain/managed/DomainLifecycleUtil.java"},{"diff":"@@ -61,6 +61,10 @@\n             <artifactId>arquillian-junit-core</artifactId>\n         </dependency>\n         <dependency>\n+            <groupId>org.jboss.sasl</groupId>\n+            <artifactId>jboss-sasl</artifactId>\n+        </dependency>\n+        <dependency>\n             <groupId>javax.inject</groupId>\n             <artifactId>javax.inject</artifactId>\n         </dependency>","filename":"arquillian/container-managed/pom.xml"},{"diff":"@@ -30,6 +30,8 @@\n import java.io.InputStreamReader;\n import java.security.AccessController;\n import java.security.PrivilegedAction;\n+import java.security.Provider;\n+import java.security.Security;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.TimeoutException;\n@@ -45,6 +47,7 @@\n import org.jboss.as.controller.PathAddress;\n import org.jboss.as.controller.operations.common.Util;\n import org.jboss.dmr.ModelNode;\n+import org.jboss.sasl.JBossSaslProvider;\n \n /**\n  * JBossAsManagedContainer\n@@ -58,6 +61,7 @@\n     private MBeanServerConnectionProvider provider;\n     private Thread shutdownThread;\n     private Process process;\n+    private Provider saslProvider = new JBossSaslProvider();\n \n     @Inject\n     @ContainerScoped\n@@ -87,6 +91,7 @@ public void setup(ManagedContainerConfiguration config) {\n \n     @Override\n     protected void startInternal() throws LifecycleException {\n+        Security.addProvider(saslProvider);\n         try {\n             ManagedContainerConfiguration config = getContainerConfiguration();\n             final String jbossHomeDir = config.getJbossHome();\n@@ -173,6 +178,7 @@ protected void stopInternal() throws LifecycleException {\n         } catch (Exception e) {\n             throw new LifecycleException(\"Could not stop container\", e);\n         }\n+        Security.removeProvider(saslProvider.getName());\n     }\n \n     @Override","filename":"arquillian/container-managed/src/main/java/org/jboss/as/arquillian/container/managed/ManagedDeployableContainer.java"},{"diff":"@@ -50,6 +50,7 @@\n         <module name=\"org.jboss.modules\"/>\n         <module name=\"org.jboss.msc\"/>\n         <module name=\"org.jboss.remoting3\"/>\n+        <module name=\"org.jboss.sasl\" />\n         <module name=\"org.jboss.stdio\"/>\n         <module name=\"org.jboss.threads\"/>\n         <module name=\"org.jboss.xnio\"/>","filename":"build/src/main/resources/modules/org/jboss/as/host-controller/main/module.xml"},{"diff":"@@ -79,22 +79,8 @@\n        <path name=\"relative\" path=\"relative\" relative-to=\"absolute\"/>\n     </paths>\n \n-    <management>\n-        <security-realms>\n-            <security-realm name=\"TestRealm\">\n-                <authentication>\n-                    <users>\n-                        <user username=\"TestUser\">\n-                            <password>TestUserPassword</password>\n-                        </user>\n-                    </users>\n-                </authentication>\n-            </security-realm>\n-        </security-realms>\n-    </management>\n-\n     <management-interfaces>\n-       <native-interface interface=\"management\" port=\"9999\" security-realm=\"TestRealm\"/>\n+       <native-interface interface=\"management\" port=\"9999\" />\n        <http-interface interface=\"management\" port=\"9990\"/>\n     </management-interfaces>\n ","filename":"build/src/main/resources/standalone/configuration/clustering-standalone.xml"},{"diff":"@@ -80,6 +80,10 @@\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n+            <groupId>org.jboss.sasl</groupId>\n+            <artifactId>jboss-sasl</artifactId>\n+        </dependency>\n+        <dependency>\n             <groupId>org.jboss.stdio</groupId>\n             <artifactId>jboss-stdio</artifactId>\n         </dependency>","filename":"host-controller/pom.xml"},{"diff":"@@ -33,6 +33,8 @@\n import java.net.InetAddress;\n import java.net.URI;\n import java.net.UnknownHostException;\n+import java.security.Provider;\n+import java.security.Security;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n@@ -68,6 +70,7 @@\n import org.jboss.remoting3.Channel;\n import org.jboss.remoting3.CloseHandler;\n import org.jboss.remoting3.Endpoint;\n+import org.jboss.sasl.JBossSaslProvider;\n import org.jboss.threads.AsyncFuture;\n import org.jboss.threads.AsyncFutureTask;\n \n@@ -85,6 +88,7 @@\n     private final int port;\n     private final String name;\n     private final RemoteFileRepository remoteFileRepository;\n+    private final Provider saslProvider = new JBossSaslProvider();\n \n     private volatile ProtocolChannelClient<ManagementChannel> channelClient;\n     /** Used to invoke ModelController ops on the master */\n@@ -156,6 +160,7 @@ public void register() {\n     }\n \n     private synchronized void connect() {\n+        Security.addProvider(saslProvider);\n         txOperationHandler = new NewTransactionalModelControllerOperationHandler(executor, controller);\n         ProtocolChannelClient<ManagementChannel> client;\n         try {","filename":"host-controller/src/main/java/org/jboss/as/host/controller/NewRemoteDomainConnectionService.java"},{"diff":"@@ -54,6 +54,10 @@\n             <artifactId>jboss-remoting</artifactId>\n         </dependency>\n         <dependency>\n+            <groupId>org.jboss.sasl</groupId>\n+            <artifactId>jboss-sasl</artifactId>\n+        </dependency>\n+        <dependency>\n             <groupId>org.jboss.marshalling</groupId>\n             <artifactId>jboss-marshalling-river</artifactId>\n             <scope>test</scope>","filename":"protocol/pom.xml"},{"diff":"@@ -23,7 +23,10 @@\n \n import static org.xnio.Options.SASL_POLICY_NOANONYMOUS;\n \n+import javax.security.auth.callback.Callback;\n import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.NameCallback;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n import java.io.Closeable;\n import java.io.IOException;\n import java.net.ConnectException;\n@@ -119,8 +122,8 @@ public Connection connect(CallbackHandler handler) throws IOException {\n             future = endpoint.connect(uri, map, handler);\n         } else {\n             // TODO - Remove temporary hard coded value once all clients can supply a CallbackHandler.\n-            new Throwable(\"Using default username and password.\").printStackTrace();\n-            future = endpoint.connect(uri, map, \"TestUser\", endpoint.getName(), \"TestUserPassword\".toCharArray());\n+            //new Throwable(\"Using default username and password.\").printStackTrace();\n+            future = endpoint.connect(uri, map, new AnonymousCallbackHandler());\n         }\n         // TODO - Re-evaluate timeouts - clients need time to enter their details but this extends the time for clients where we know this info in advance.\n         Status status = future.await(connectTimeout, TimeUnit.MILLISECONDS);\n@@ -326,4 +329,19 @@ public void setChannelFactory(ProtocolChannelFactory<T> channelFactory) {\n         }\n     }\n \n+    private static final class AnonymousCallbackHandler implements CallbackHandler {\n+\n+        public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n+            for (Callback current : callbacks) {\n+                if (current instanceof NameCallback) {\n+                    NameCallback ncb = (NameCallback) current;\n+                    ncb.setName(\"anonymous\");\n+                } else {\n+                    throw new UnsupportedCallbackException(current);\n+                }\n+            }\n+        }\n+\n+    }\n+\n }","filename":"protocol/src/main/java/org/jboss/as/protocol/ProtocolChannelClient.java"},{"diff":"@@ -26,11 +26,14 @@\n import java.net.ConnectException;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.security.Provider;\n+import java.security.Security;\n import java.util.concurrent.ExecutorService;\n \n import org.jboss.as.protocol.ProtocolChannelClient;\n import org.jboss.as.protocol.ProtocolChannelClient.Configuration;\n import org.jboss.remoting3.Endpoint;\n+import org.jboss.sasl.JBossSaslProvider;\n import org.xnio.IoUtils;\n \n /**\n@@ -90,7 +93,7 @@ public void requestDone() {\n     private abstract static class Establishing extends ManagementClientChannelStrategy {\n \n         private static final String CONNECT_TIME_OUT_PROPERTY = \"org.jboss.as.client.connect.timeout\";\n-\n+        private static final Provider saslProvider = new JBossSaslProvider();\n         private final String hostName;\n         private final int port;\n         private final ManagementOperationHandler handler;\n@@ -107,6 +110,10 @@ public Establishing(String hostName, int port, final ManagementOperationHandler\n \n         @Override\n         public ManagementChannel getChannel() throws IOException {\n+            if (Security.getProvider(saslProvider.getName()) == null) {\n+                Security.insertProviderAt(saslProvider, 1);\n+            }\n+\n             final ProtocolChannelClient.Configuration<ManagementChannel> configuration = new ProtocolChannelClient.Configuration<ManagementChannel>();\n             try {\n                 addConfigurationProperties(configuration);","filename":"protocol/src/main/java/org/jboss/as/protocol/mgmt/ManagementClientChannelStrategy.java"},{"diff":"@@ -22,6 +22,8 @@\n package org.jboss.as.protocol.mgmt;\n \n import java.io.IOException;\n+import java.security.Provider;\n+import java.security.Security;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n@@ -33,8 +35,10 @@\n import org.jboss.as.protocol.mgmt.support.RemoteChannelPairSetup;\n import org.jboss.as.protocol.mgmt.support.RemotingChannelPairSetup;\n import org.jboss.as.protocol.mgmt.support.SimpleHandlers;\n+import org.jboss.sasl.JBossSaslProvider;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n@@ -45,8 +49,13 @@\n public class RemoteChannelManagementTestCase {\n \n     RemotingChannelPairSetup channels;\n+    private Provider saslProvider = new JBossSaslProvider();\n+\n     @Before\n     public void start() throws Exception {\n+        if (Security.getProvider(saslProvider.getName()) == null) {\n+            Security.insertProviderAt(saslProvider, 1);\n+        }\n         channels = new RemoteChannelPairSetup();\n         channels.setupRemoting();\n         channels.startChannels();","filename":"protocol/src/test/java/org/jboss/as/protocol/mgmt/RemoteChannelManagementTestCase.java"},{"diff":"@@ -73,11 +73,11 @@ public static ChannelServer create(final Configuration configuration) throws IOE\n         //There is currently a probable bug in jboss remoting, so the user realm name MUST be the same as\n         //the endpoint name.\n \n-        provider.addUser(\"TestUser\", configuration.getEndpointName(), \"TestUserPassword\".toCharArray());\n+        provider.addUser(\"TestUser\",\"localhost.localdomain\", \"TestUserPassword\".toCharArray());\n         //ChannelListener<AcceptingChannel<ConnectedStreamChannel>> serverListener = networkServerProvider.getServerListener(OptionMap.create(Options.SASL_MECHANISMS, Sequence.of(\"DIGEST-MD5\")), provider);\n         System.out.println(configuration.getBindAddress());\n         //AcceptingChannel<? extends ConnectedStreamChannel> streamServer = xnio.createStreamServer(configuration.getBindAddress(), connectionChannelThread, serverListener, OptionMap.EMPTY);\n-        AcceptingChannel<? extends ConnectedStreamChannel> streamServer = networkServerProvider.createServer(configuration.getBindAddress(), OptionMap.create(Options.SASL_MECHANISMS, Sequence.of(\"CRAM-MD5\")), provider);\n+        AcceptingChannel<? extends ConnectedStreamChannel> streamServer = networkServerProvider.createServer(configuration.getBindAddress(), OptionMap.create(Options.SASL_MECHANISMS, Sequence.of(\"DIGEST-MD5\")), provider);\n \n         return new ChannelServer(endpoint, streamServer);\n     }","filename":"protocol/src/test/java/org/jboss/as/protocol/mgmt/support/ChannelServer.java"},{"diff":"@@ -103,7 +103,7 @@ public void startChannels() throws IOException, URISyntaxException {\n         configuration.setChannelFactory(new ManagementChannelFactory());\n \n         ProtocolChannelClient<ManagementChannel> client = ProtocolChannelClient.create(configuration);\n-        client.connect(new PasswordClientCallbackHandler(\"TestUser\", configuration.getEndpointName(), \"TestUserPassword\".toCharArray()));\n+        client.connect(new PasswordClientCallbackHandler(\"TestUser\", \"localhost.localdomain\", \"TestUserPassword\".toCharArray()));\n         clientChannel = client.openChannel(TEST_CHANNEL);\n         try {\n             clientConnectedLatch.await();","filename":"protocol/src/test/java/org/jboss/as/protocol/mgmt/support/RemoteChannelPairSetup.java"}],"author":{"email":"darran.lofthouse@jboss.com","login":"darranl","name":"Darran Lofthouse"}}}