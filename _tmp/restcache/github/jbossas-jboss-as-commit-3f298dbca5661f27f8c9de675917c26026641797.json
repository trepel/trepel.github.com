{"commit":{"author":{"login":"baranowb","email":"baranowb@gmail.com","name":"baranowb"},"authored_date":"2012-04-19T03:33:44-07:00","modified":[{"filename":"arquillian/common/src/main/java/org/jboss/as/arquillian/container/ManagementClient.java","diff":"@@ -19,8 +19,27 @@\n import java.io.IOException;\n import java.net.URI;\n import java.util.HashMap;\n-\n+import java.util.Set;\n+\n+import javax.management.Attribute;\n+import javax.management.AttributeList;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceAlreadyExistsException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.InvalidAttributeValueException;\n+import javax.management.ListenerNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanRegistrationException;\n import javax.management.MBeanServerConnection;\n+import javax.management.NotCompliantMBeanException;\n+import javax.management.NotificationFilter;\n+import javax.management.NotificationListener;\n+import javax.management.ObjectInstance;\n+import javax.management.ObjectName;\n+import javax.management.QueryExp;\n+import javax.management.ReflectionException;\n import javax.management.remote.JMXConnector;\n import javax.management.remote.JMXConnectorFactory;\n import javax.management.remote.JMXServiceURL;\n@@ -319,20 +338,12 @@ private void checkSuccessful(final ModelNode result,\n         }\n     }\n \n-    private static class UnSuccessfulOperationException extends Exception {\n-        private static final long serialVersionUID = 1L;\n-\n-        public UnSuccessfulOperationException(String message) {\n-            super(message);\n-        }\n-    }\n-\n     private MBeanServerConnection getConnection() {\n         if (connection == null) {\n             try {\n                 final HashMap<String, Object> env = new HashMap<String, Object>();\n                 env.put(CallbackHandler.class.getName(), Authentication.getCallbackHandler());\n-                connection = JMXConnectorFactory.connect(getRemoteJMXURL(), env).getMBeanServerConnection();\n+                connection = new MBeanConnectionProxy(JMXConnectorFactory.connect(getRemoteJMXURL(), env).getMBeanServerConnection());\n             } catch (IOException e) {\n                 throw new RuntimeException(e);\n             }\n@@ -370,4 +381,418 @@ public URI getRemoteEjbURL() {\n         }\n         return ejbUri;\n     }\n+    //-------------------------------------------------------------------------------------||\n+    // Helper classes ---------------------------------------------------------------------||\n+    //-------------------------------------------------------------------------------------||\n+    private static class UnSuccessfulOperationException extends Exception {\n+        private static final long serialVersionUID = 1L;\n+\n+        public UnSuccessfulOperationException(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    private class MBeanConnectionProxy implements MBeanServerConnection{\n+        private MBeanServerConnection connection;\n+\n+        /**\n+         * @param connection\n+         */\n+        public MBeanConnectionProxy(MBeanServerConnection connection) {\n+            super();\n+            this.connection = connection;\n+        }\n+\n+        /**\n+         * @param className\n+         * @param name\n+         * @return\n+         * @throws ReflectionException\n+         * @throws InstanceAlreadyExistsException\n+         * @throws MBeanRegistrationException\n+         * @throws MBeanException\n+         * @throws NotCompliantMBeanException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#createMBean(java.lang.String, javax.management.ObjectName)\n+         */\n+        public ObjectInstance createMBean(String className, ObjectName name) throws ReflectionException,\n+                InstanceAlreadyExistsException, MBeanException, NotCompliantMBeanException,\n+                IOException {\n+            checkConnection();\n+            return connection.createMBean(className, name);\n+        }\n+\n+        /**\n+         * @param className\n+         * @param name\n+         * @param loaderName\n+         * @return\n+         * @throws ReflectionException\n+         * @throws InstanceAlreadyExistsException\n+         * @throws MBeanRegistrationException\n+         * @throws MBeanException\n+         * @throws NotCompliantMBeanException\n+         * @throws InstanceNotFoundException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#createMBean(java.lang.String, javax.management.ObjectName, javax.management.ObjectName)\n+         */\n+        public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName) throws ReflectionException,\n+                InstanceAlreadyExistsException, MBeanException, NotCompliantMBeanException,\n+                InstanceNotFoundException, IOException {\n+            checkConnection();\n+            return connection.createMBean(className, name, loaderName);\n+        }\n+\n+        /**\n+         * @param className\n+         * @param name\n+         * @param params\n+         * @param signature\n+         * @return\n+         * @throws ReflectionException\n+         * @throws InstanceAlreadyExistsException\n+         * @throws MBeanRegistrationException\n+         * @throws MBeanException\n+         * @throws NotCompliantMBeanException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#createMBean(java.lang.String, javax.management.ObjectName, java.lang.Object[], java.lang.String[])\n+         */\n+        public ObjectInstance createMBean(String className, ObjectName name, Object[] params, String[] signature)\n+                throws ReflectionException, InstanceAlreadyExistsException, MBeanException,\n+                NotCompliantMBeanException, IOException {\n+            checkConnection();\n+            return connection.createMBean(className, name, params, signature);\n+        }\n+\n+        /**\n+         * @param className\n+         * @param name\n+         * @param loaderName\n+         * @param params\n+         * @param signature\n+         * @return\n+         * @throws ReflectionException\n+         * @throws InstanceAlreadyExistsException\n+         * @throws MBeanRegistrationException\n+         * @throws MBeanException\n+         * @throws NotCompliantMBeanException\n+         * @throws InstanceNotFoundException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#createMBean(java.lang.String, javax.management.ObjectName, javax.management.ObjectName, java.lang.Object[], java.lang.String[])\n+         */\n+        public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName, Object[] params,\n+                String[] signature) throws ReflectionException, InstanceAlreadyExistsException,\n+                MBeanException, NotCompliantMBeanException, InstanceNotFoundException, IOException {\n+            checkConnection();\n+            return connection.createMBean(className, name, loaderName, params, signature);\n+        }\n+\n+        /**\n+         * @param name\n+         * @throws InstanceNotFoundException\n+         * @throws MBeanRegistrationException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#unregisterMBean(javax.management.ObjectName)\n+         */\n+        public void unregisterMBean(ObjectName name) throws InstanceNotFoundException, MBeanRegistrationException, IOException {\n+            checkConnection();\n+            connection.unregisterMBean(name);\n+        }\n+\n+        /**\n+         * @param name\n+         * @return\n+         * @throws InstanceNotFoundException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#getObjectInstance(javax.management.ObjectName)\n+         */\n+        public ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFoundException, IOException {\n+            checkConnection();\n+            return connection.getObjectInstance(name);\n+        }\n+\n+        /**\n+         * @param name\n+         * @param query\n+         * @return\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#queryMBeans(javax.management.ObjectName, javax.management.QueryExp)\n+         */\n+        public Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query) throws IOException {\n+            checkConnection();\n+            return connection.queryMBeans(name, query);\n+        }\n+\n+        /**\n+         * @param name\n+         * @param query\n+         * @return\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#queryNames(javax.management.ObjectName, javax.management.QueryExp)\n+         */\n+        public Set<ObjectName> queryNames(ObjectName name, QueryExp query) throws IOException {\n+            checkConnection();\n+            return connection.queryNames(name, query);\n+        }\n+\n+        /**\n+         * @param name\n+         * @return\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#isRegistered(javax.management.ObjectName)\n+         */\n+        public boolean isRegistered(ObjectName name) throws IOException {\n+            checkConnection();\n+            return connection.isRegistered(name);\n+        }\n+\n+        /**\n+         * @return\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#getMBeanCount()\n+         */\n+        public Integer getMBeanCount() throws IOException {\n+            checkConnection();\n+            return connection.getMBeanCount();\n+        }\n+\n+        /**\n+         * @param name\n+         * @param attribute\n+         * @return\n+         * @throws MBeanException\n+         * @throws AttributeNotFoundException\n+         * @throws InstanceNotFoundException\n+         * @throws ReflectionException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#getAttribute(javax.management.ObjectName, java.lang.String)\n+         */\n+        public Object getAttribute(ObjectName name, String attribute) throws MBeanException, AttributeNotFoundException,\n+                InstanceNotFoundException, ReflectionException, IOException {\n+            checkConnection();\n+            return connection.getAttribute(name, attribute);\n+        }\n+\n+        /**\n+         * @param name\n+         * @param attributes\n+         * @return\n+         * @throws InstanceNotFoundException\n+         * @throws ReflectionException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#getAttributes(javax.management.ObjectName, java.lang.String[])\n+         */\n+        public AttributeList getAttributes(ObjectName name, String[] attributes) throws InstanceNotFoundException,\n+                ReflectionException, IOException {\n+            checkConnection();\n+            return connection.getAttributes(name, attributes);\n+        }\n+\n+        /**\n+         * @param name\n+         * @param attribute\n+         * @throws InstanceNotFoundException\n+         * @throws AttributeNotFoundException\n+         * @throws InvalidAttributeValueException\n+         * @throws MBeanException\n+         * @throws ReflectionException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#setAttribute(javax.management.ObjectName, javax.management.Attribute)\n+         */\n+        public void setAttribute(ObjectName name, Attribute attribute) throws InstanceNotFoundException,\n+                AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException, IOException {\n+            checkConnection();\n+            connection.setAttribute(name, attribute);\n+        }\n+\n+        /**\n+         * @param name\n+         * @param attributes\n+         * @return\n+         * @throws InstanceNotFoundException\n+         * @throws ReflectionException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#setAttributes(javax.management.ObjectName, javax.management.AttributeList)\n+         */\n+        public AttributeList setAttributes(ObjectName name, AttributeList attributes) throws InstanceNotFoundException,\n+                ReflectionException, IOException {\n+            checkConnection();\n+            return connection.setAttributes(name, attributes);\n+        }\n+\n+        /**\n+         * @param name\n+         * @param operationName\n+         * @param params\n+         * @param signature\n+         * @return\n+         * @throws InstanceNotFoundException\n+         * @throws MBeanException\n+         * @throws ReflectionException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#invoke(javax.management.ObjectName, java.lang.String, java.lang.Object[], java.lang.String[])\n+         */\n+        public Object invoke(ObjectName name, String operationName, Object[] params, String[] signature)\n+                throws InstanceNotFoundException, MBeanException, ReflectionException, IOException {\n+            checkConnection();\n+            return connection.invoke(name, operationName, params, signature);\n+        }\n+\n+        /**\n+         * @return\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#getDefaultDomain()\n+         */\n+        public String getDefaultDomain() throws IOException {\n+            checkConnection();\n+            return connection.getDefaultDomain();\n+        }\n+\n+        /**\n+         * @return\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#getDomains()\n+         */\n+        public String[] getDomains() throws IOException {\n+            checkConnection();\n+            return connection.getDomains();\n+        }\n+\n+        /**\n+         * @param name\n+         * @param listener\n+         * @param filter\n+         * @param handback\n+         * @throws InstanceNotFoundException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#addNotificationListener(javax.management.ObjectName, javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)\n+         */\n+        public void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter,\n+                Object handback) throws InstanceNotFoundException, IOException {\n+            checkConnection();\n+            connection.addNotificationListener(name, listener, filter, handback);\n+        }\n+\n+        /**\n+         * @param name\n+         * @param listener\n+         * @param filter\n+         * @param handback\n+         * @throws InstanceNotFoundException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#addNotificationListener(javax.management.ObjectName, javax.management.ObjectName, javax.management.NotificationFilter, java.lang.Object)\n+         */\n+        public void addNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback)\n+                throws InstanceNotFoundException, IOException {\n+            checkConnection();\n+            connection.addNotificationListener(name, listener, filter, handback);\n+        }\n+\n+        /**\n+         * @param name\n+         * @param listener\n+         * @throws InstanceNotFoundException\n+         * @throws ListenerNotFoundException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#removeNotificationListener(javax.management.ObjectName, javax.management.ObjectName)\n+         */\n+        public void removeNotificationListener(ObjectName name, ObjectName listener) throws InstanceNotFoundException,\n+                ListenerNotFoundException, IOException {\n+            checkConnection();\n+            connection.removeNotificationListener(name, listener);\n+        }\n+\n+        /**\n+         * @param name\n+         * @param listener\n+         * @param filter\n+         * @param handback\n+         * @throws InstanceNotFoundException\n+         * @throws ListenerNotFoundException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#removeNotificationListener(javax.management.ObjectName, javax.management.ObjectName, javax.management.NotificationFilter, java.lang.Object)\n+         */\n+        public void removeNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback)\n+                throws InstanceNotFoundException, ListenerNotFoundException, IOException {\n+            checkConnection();\n+            connection.removeNotificationListener(name, listener, filter, handback);\n+        }\n+\n+        /**\n+         * @param name\n+         * @param listener\n+         * @throws InstanceNotFoundException\n+         * @throws ListenerNotFoundException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#removeNotificationListener(javax.management.ObjectName, javax.management.NotificationListener)\n+         */\n+        public void removeNotificationListener(ObjectName name, NotificationListener listener)\n+                throws InstanceNotFoundException, ListenerNotFoundException, IOException {\n+            checkConnection();\n+            connection.removeNotificationListener(name, listener);\n+        }\n+\n+        /**\n+         * @param name\n+         * @param listener\n+         * @param filter\n+         * @param handback\n+         * @throws InstanceNotFoundException\n+         * @throws ListenerNotFoundException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#removeNotificationListener(javax.management.ObjectName, javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)\n+         */\n+        public void removeNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter,\n+                Object handback) throws InstanceNotFoundException, ListenerNotFoundException, IOException {\n+            checkConnection();\n+            connection.removeNotificationListener(name, listener, filter, handback);\n+        }\n+\n+        /**\n+         * @param name\n+         * @return\n+         * @throws InstanceNotFoundException\n+         * @throws IntrospectionException\n+         * @throws ReflectionException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#getMBeanInfo(javax.management.ObjectName)\n+         */\n+        public MBeanInfo getMBeanInfo(ObjectName name) throws InstanceNotFoundException, IntrospectionException,\n+                ReflectionException, IOException {\n+            checkConnection();\n+            return connection.getMBeanInfo(name);\n+        }\n+\n+        /**\n+         * @param name\n+         * @param className\n+         * @return\n+         * @throws InstanceNotFoundException\n+         * @throws IOException\n+         * @see javax.management.MBeanServerConnection#isInstanceOf(javax.management.ObjectName, java.lang.String)\n+         */\n+        public boolean isInstanceOf(ObjectName name, String className) throws InstanceNotFoundException, IOException {\n+            checkConnection();\n+            return connection.isInstanceOf(name, className);\n+        }\n+\n+        private void checkConnection(){\n+            try{\n+                this.connection.getMBeanCount();\n+                return;\n+            }catch(IOException ioe){\n+            }\n+            this.connection = this.getConnection();\n+        }\n+        private MBeanServerConnection getConnection() {\n+                try {\n+                    final HashMap<String, Object> env = new HashMap<String, Object>();\n+                    env.put(CallbackHandler.class.getName(), Authentication.getCallbackHandler());\n+                    connection = JMXConnectorFactory.connect(getRemoteJMXURL(), env).getMBeanServerConnection();\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            return connection;\n+        }\n+    }\n }"},{"filename":"testsuite/integration/basic/pom.xml","diff":"@@ -173,6 +173,7 @@\n                                         <include>org/jboss/as/test/integration/ejb/management/deployments/*TestCase.java</include>\n                                         <include>org/jboss/as/test/integration/ejb/transaction/bmt/lazyenlist</include>\n                                         <include>org/jboss/as/test/integration/jaxr/**/*TestCase*.java</include>\n+                                        <include>org/jboss/as/test/integration/jca/bootstrap/**/*TestCase*.java</include>\n                                         <include>org/jboss/as/test/integration/messaging/**/*TestCase*.java</include>\n                                         <include>org/jboss/as/test/integration/management/cli/HelpTestCase.java</include>\n                                         <include>org/jboss/as/test/integration/management/cli/JmsTestCase.java</include>\n@@ -217,6 +218,7 @@\n                                         <exclude>org/jboss/as/test/integration/ejb/management/deployments/*TestCase.java</exclude>\n                                         <exclude>org/jboss/as/test/integration/ejb/transaction/bmt/lazyenlist</exclude>\n                                         <exclude>org/jboss/as/test/integration/jaxr/**/*TestCase*.java</exclude>\n+                                        <exclude>org/jboss/as/test/integration/jca/bootstrap/**/*TestCase*.java</exclude>\n                                         <exclude>org/jboss/as/test/integration/messaging/**/*TestCase*.java</exclude>\n                                         <exclude>org/jboss/as/test/integration/management/cli/HelpTestCase.java</exclude>\n                                         <exclude>org/jboss/as/test/integration/management/cli/JmsTestCase.java</exclude>"},{"filename":"testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/archive/ArchiveValidationDeploymentTestCase.java","diff":"@@ -53,7 +53,7 @@\n @RunWith(Arquillian.class)\n @RunAsClient\n @ServerSetup(ArchiveValidationDeploymentTestCase.ArchiveValidationDeploymentTestCaseSetup.class)\n-@Ignore(\"AS7-4185,4188\")\n+@Ignore(\"AS7-4188\")\n public class ArchiveValidationDeploymentTestCase extends JcaMgmtBase {\n \n     private static Logger log = Logger.getLogger(\"ArchiveValidationDeploymentTestCase\");"},{"filename":"testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/bootstrap/CustomBootstrapContextTestCase.java","diff":"@@ -50,7 +50,6 @@\n  */\n @RunWith(Arquillian.class)\n @ServerSetup(CustomBootstrapContextTestCase.CustomBootstrapDeploymentTestCaseSetup.class)\n-@Ignore(\"AS7-4185\")\n public class CustomBootstrapContextTestCase extends JcaMgmtBase {\n \n     public static String ctx = \"customContext\";"}],"committed_date":"2012-04-24T17:42:05-07:00","parents":[{"id":"4aae78a557e5fa2d09861e3cfdda373d35c2a670"}],"message":"AS7-4185","tree":"e42792b6b2e2f643f972ec06d1ed228953ac3c7e","committer":{"login":"bstansberry","email":"brian.stansberry@redhat.com","name":"bstansberry@jboss.com"},"url":"/jbossas/jboss-as/commit/3f298dbca5661f27f8c9de675917c26026641797","id":"3f298dbca5661f27f8c9de675917c26026641797"}}